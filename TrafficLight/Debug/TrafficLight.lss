
TrafficLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000009f8  00000a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800062  00800062  00000a8e  2**0
                  ALLOC
  3 .stab         0000132c  00000000  00000000  00000a90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d24  00000000  00000000  00001dbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b9 04 	call	0x972	; 0x972 <main>
  8a:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TIMER1_INIT>:
#include "avr/io.h"

static void(*CallBackPtr)(void);

void TIMER1_INIT(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1A,FOC1B);
  9a:	af e4       	ldi	r26, 0x4F	; 79
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	ef e4       	ldi	r30, 0x4F	; 79
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	84 60       	ori	r24, 0x04	; 4
  a6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
  a8:	ae e4       	ldi	r26, 0x4E	; 78
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	ee e4       	ldi	r30, 0x4E	; 78
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	88 60       	ori	r24, 0x08	; 8
  b4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
  b6:	ae e4       	ldi	r26, 0x4E	; 78
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	ee e4       	ldi	r30, 0x4E	; 78
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 61       	ori	r24, 0x10	; 16
  c2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS12);
  c4:	ae e4       	ldi	r26, 0x4E	; 78
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	ee e4       	ldi	r30, 0x4E	; 78
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	84 60       	ori	r24, 0x04	; 4
  d0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS10);
  d2:	ae e4       	ldi	r26, 0x4E	; 78
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	ee e4       	ldi	r30, 0x4E	; 78
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	8c 93       	st	X, r24

	TCNT1 = 0;
  e0:	ec e4       	ldi	r30, 0x4C	; 76
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	11 82       	std	Z+1, r1	; 0x01
  e6:	10 82       	st	Z, r1
	ICR1 = 975;
  e8:	e6 e4       	ldi	r30, 0x46	; 70
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	8f ec       	ldi	r24, 0xCF	; 207
  ee:	93 e0       	ldi	r25, 0x03	; 3
  f0:	91 83       	std	Z+1, r25	; 0x01
  f2:	80 83       	st	Z, r24

	SET_BIT(TIMSK,OCIE1B);
  f4:	a9 e5       	ldi	r26, 0x59	; 89
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	e9 e5       	ldi	r30, 0x59	; 89
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	88 60       	ori	r24, 0x08	; 8
 100:	8c 93       	st	X, r24
}
 102:	cf 91       	pop	r28
 104:	df 91       	pop	r29
 106:	08 95       	ret

00000108 <__vector_8>:

void __vector_8(void) __attribute__((signal,used));

void __vector_8(void){
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	2f 93       	push	r18
 114:	3f 93       	push	r19
 116:	4f 93       	push	r20
 118:	5f 93       	push	r21
 11a:	6f 93       	push	r22
 11c:	7f 93       	push	r23
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	af 93       	push	r26
 124:	bf 93       	push	r27
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
 12a:	df 93       	push	r29
 12c:	cf 93       	push	r28
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62

	CallBackPtr();
 132:	e0 91 62 00 	lds	r30, 0x0062
 136:	f0 91 63 00 	lds	r31, 0x0063
 13a:	09 95       	icall

}
 13c:	cf 91       	pop	r28
 13e:	df 91       	pop	r29
 140:	ff 91       	pop	r31
 142:	ef 91       	pop	r30
 144:	bf 91       	pop	r27
 146:	af 91       	pop	r26
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	7f 91       	pop	r23
 14e:	6f 91       	pop	r22
 150:	5f 91       	pop	r21
 152:	4f 91       	pop	r20
 154:	3f 91       	pop	r19
 156:	2f 91       	pop	r18
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <TIMER1_SetCallBack>:

void TIMER1_SetCallBack(void (*Ptr)(void))
{
 162:	df 93       	push	r29
 164:	cf 93       	push	r28
 166:	00 d0       	rcall	.+0      	; 0x168 <TIMER1_SetCallBack+0x6>
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	9a 83       	std	Y+2, r25	; 0x02
 16e:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr = Ptr ;
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	9a 81       	ldd	r25, Y+2	; 0x02
 174:	90 93 63 00 	sts	0x0063, r25
 178:	80 93 62 00 	sts	0x0062, r24
}
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	cf 91       	pop	r28
 182:	df 91       	pop	r29
 184:	08 95       	ret

00000186 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
 186:	df 93       	push	r29
 188:	cf 93       	push	r28
 18a:	00 d0       	rcall	.+0      	; 0x18c <GPIO_setupPinDirection+0x6>
 18c:	00 d0       	rcall	.+0      	; 0x18e <GPIO_setupPinDirection+0x8>
 18e:	0f 92       	push	r0
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
 194:	89 83       	std	Y+1, r24	; 0x01
 196:	6a 83       	std	Y+2, r22	; 0x02
 198:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 19a:	8a 81       	ldd	r24, Y+2	; 0x02
 19c:	88 30       	cpi	r24, 0x08	; 8
 19e:	08 f0       	brcs	.+2      	; 0x1a2 <GPIO_setupPinDirection+0x1c>
 1a0:	d5 c0       	rjmp	.+426    	; 0x34c <GPIO_setupPinDirection+0x1c6>
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	84 30       	cpi	r24, 0x04	; 4
 1a6:	08 f0       	brcs	.+2      	; 0x1aa <GPIO_setupPinDirection+0x24>
 1a8:	d1 c0       	rjmp	.+418    	; 0x34c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	28 2f       	mov	r18, r24
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	3d 83       	std	Y+5, r19	; 0x05
 1b2:	2c 83       	std	Y+4, r18	; 0x04
 1b4:	8c 81       	ldd	r24, Y+4	; 0x04
 1b6:	9d 81       	ldd	r25, Y+5	; 0x05
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	91 05       	cpc	r25, r1
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <GPIO_setupPinDirection+0x3a>
 1be:	43 c0       	rjmp	.+134    	; 0x246 <GPIO_setupPinDirection+0xc0>
 1c0:	2c 81       	ldd	r18, Y+4	; 0x04
 1c2:	3d 81       	ldd	r19, Y+5	; 0x05
 1c4:	22 30       	cpi	r18, 0x02	; 2
 1c6:	31 05       	cpc	r19, r1
 1c8:	2c f4       	brge	.+10     	; 0x1d4 <GPIO_setupPinDirection+0x4e>
 1ca:	8c 81       	ldd	r24, Y+4	; 0x04
 1cc:	9d 81       	ldd	r25, Y+5	; 0x05
 1ce:	00 97       	sbiw	r24, 0x00	; 0
 1d0:	71 f0       	breq	.+28     	; 0x1ee <GPIO_setupPinDirection+0x68>
 1d2:	bc c0       	rjmp	.+376    	; 0x34c <GPIO_setupPinDirection+0x1c6>
 1d4:	2c 81       	ldd	r18, Y+4	; 0x04
 1d6:	3d 81       	ldd	r19, Y+5	; 0x05
 1d8:	22 30       	cpi	r18, 0x02	; 2
 1da:	31 05       	cpc	r19, r1
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <GPIO_setupPinDirection+0x5a>
 1de:	5f c0       	rjmp	.+190    	; 0x29e <GPIO_setupPinDirection+0x118>
 1e0:	8c 81       	ldd	r24, Y+4	; 0x04
 1e2:	9d 81       	ldd	r25, Y+5	; 0x05
 1e4:	83 30       	cpi	r24, 0x03	; 3
 1e6:	91 05       	cpc	r25, r1
 1e8:	09 f4       	brne	.+2      	; 0x1ec <GPIO_setupPinDirection+0x66>
 1ea:	85 c0       	rjmp	.+266    	; 0x2f6 <GPIO_setupPinDirection+0x170>
 1ec:	af c0       	rjmp	.+350    	; 0x34c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
 1ee:	8b 81       	ldd	r24, Y+3	; 0x03
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	a1 f4       	brne	.+40     	; 0x21c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
 1f4:	aa e3       	ldi	r26, 0x3A	; 58
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	ea e3       	ldi	r30, 0x3A	; 58
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	48 2f       	mov	r20, r24
 200:	8a 81       	ldd	r24, Y+2	; 0x02
 202:	28 2f       	mov	r18, r24
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 2e       	mov	r0, r18
 20c:	02 c0       	rjmp	.+4      	; 0x212 <GPIO_setupPinDirection+0x8c>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <GPIO_setupPinDirection+0x88>
 216:	84 2b       	or	r24, r20
 218:	8c 93       	st	X, r24
 21a:	98 c0       	rjmp	.+304    	; 0x34c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
 21c:	aa e3       	ldi	r26, 0x3A	; 58
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	ea e3       	ldi	r30, 0x3A	; 58
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	48 2f       	mov	r20, r24
 228:	8a 81       	ldd	r24, Y+2	; 0x02
 22a:	28 2f       	mov	r18, r24
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 2e       	mov	r0, r18
 234:	02 c0       	rjmp	.+4      	; 0x23a <GPIO_setupPinDirection+0xb4>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	0a 94       	dec	r0
 23c:	e2 f7       	brpl	.-8      	; 0x236 <GPIO_setupPinDirection+0xb0>
 23e:	80 95       	com	r24
 240:	84 23       	and	r24, r20
 242:	8c 93       	st	X, r24
 244:	83 c0       	rjmp	.+262    	; 0x34c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
 246:	8b 81       	ldd	r24, Y+3	; 0x03
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	a1 f4       	brne	.+40     	; 0x274 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
 24c:	a7 e3       	ldi	r26, 0x37	; 55
 24e:	b0 e0       	ldi	r27, 0x00	; 0
 250:	e7 e3       	ldi	r30, 0x37	; 55
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	48 2f       	mov	r20, r24
 258:	8a 81       	ldd	r24, Y+2	; 0x02
 25a:	28 2f       	mov	r18, r24
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 2e       	mov	r0, r18
 264:	02 c0       	rjmp	.+4      	; 0x26a <GPIO_setupPinDirection+0xe4>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	0a 94       	dec	r0
 26c:	e2 f7       	brpl	.-8      	; 0x266 <GPIO_setupPinDirection+0xe0>
 26e:	84 2b       	or	r24, r20
 270:	8c 93       	st	X, r24
 272:	6c c0       	rjmp	.+216    	; 0x34c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
 274:	a7 e3       	ldi	r26, 0x37	; 55
 276:	b0 e0       	ldi	r27, 0x00	; 0
 278:	e7 e3       	ldi	r30, 0x37	; 55
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	48 2f       	mov	r20, r24
 280:	8a 81       	ldd	r24, Y+2	; 0x02
 282:	28 2f       	mov	r18, r24
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 2e       	mov	r0, r18
 28c:	02 c0       	rjmp	.+4      	; 0x292 <GPIO_setupPinDirection+0x10c>
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	0a 94       	dec	r0
 294:	e2 f7       	brpl	.-8      	; 0x28e <GPIO_setupPinDirection+0x108>
 296:	80 95       	com	r24
 298:	84 23       	and	r24, r20
 29a:	8c 93       	st	X, r24
 29c:	57 c0       	rjmp	.+174    	; 0x34c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
 29e:	8b 81       	ldd	r24, Y+3	; 0x03
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	a1 f4       	brne	.+40     	; 0x2cc <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
 2a4:	a4 e3       	ldi	r26, 0x34	; 52
 2a6:	b0 e0       	ldi	r27, 0x00	; 0
 2a8:	e4 e3       	ldi	r30, 0x34	; 52
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	48 2f       	mov	r20, r24
 2b0:	8a 81       	ldd	r24, Y+2	; 0x02
 2b2:	28 2f       	mov	r18, r24
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 2e       	mov	r0, r18
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <GPIO_setupPinDirection+0x13c>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	0a 94       	dec	r0
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <GPIO_setupPinDirection+0x138>
 2c6:	84 2b       	or	r24, r20
 2c8:	8c 93       	st	X, r24
 2ca:	40 c0       	rjmp	.+128    	; 0x34c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 2cc:	a4 e3       	ldi	r26, 0x34	; 52
 2ce:	b0 e0       	ldi	r27, 0x00	; 0
 2d0:	e4 e3       	ldi	r30, 0x34	; 52
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	48 2f       	mov	r20, r24
 2d8:	8a 81       	ldd	r24, Y+2	; 0x02
 2da:	28 2f       	mov	r18, r24
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 2e       	mov	r0, r18
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <GPIO_setupPinDirection+0x164>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	0a 94       	dec	r0
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <GPIO_setupPinDirection+0x160>
 2ee:	80 95       	com	r24
 2f0:	84 23       	and	r24, r20
 2f2:	8c 93       	st	X, r24
 2f4:	2b c0       	rjmp	.+86     	; 0x34c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 2f6:	8b 81       	ldd	r24, Y+3	; 0x03
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	a1 f4       	brne	.+40     	; 0x324 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
 2fc:	a1 e3       	ldi	r26, 0x31	; 49
 2fe:	b0 e0       	ldi	r27, 0x00	; 0
 300:	e1 e3       	ldi	r30, 0x31	; 49
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	48 2f       	mov	r20, r24
 308:	8a 81       	ldd	r24, Y+2	; 0x02
 30a:	28 2f       	mov	r18, r24
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 2e       	mov	r0, r18
 314:	02 c0       	rjmp	.+4      	; 0x31a <GPIO_setupPinDirection+0x194>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <GPIO_setupPinDirection+0x190>
 31e:	84 2b       	or	r24, r20
 320:	8c 93       	st	X, r24
 322:	14 c0       	rjmp	.+40     	; 0x34c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 324:	a1 e3       	ldi	r26, 0x31	; 49
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	e1 e3       	ldi	r30, 0x31	; 49
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	48 2f       	mov	r20, r24
 330:	8a 81       	ldd	r24, Y+2	; 0x02
 332:	28 2f       	mov	r18, r24
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 2e       	mov	r0, r18
 33c:	02 c0       	rjmp	.+4      	; 0x342 <GPIO_setupPinDirection+0x1bc>
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	0a 94       	dec	r0
 344:	e2 f7       	brpl	.-8      	; 0x33e <GPIO_setupPinDirection+0x1b8>
 346:	80 95       	com	r24
 348:	84 23       	and	r24, r20
 34a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	0f 90       	pop	r0
 352:	0f 90       	pop	r0
 354:	0f 90       	pop	r0
 356:	cf 91       	pop	r28
 358:	df 91       	pop	r29
 35a:	08 95       	ret

0000035c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
 35c:	df 93       	push	r29
 35e:	cf 93       	push	r28
 360:	00 d0       	rcall	.+0      	; 0x362 <GPIO_writePin+0x6>
 362:	00 d0       	rcall	.+0      	; 0x364 <GPIO_writePin+0x8>
 364:	0f 92       	push	r0
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
 36a:	89 83       	std	Y+1, r24	; 0x01
 36c:	6a 83       	std	Y+2, r22	; 0x02
 36e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 370:	8a 81       	ldd	r24, Y+2	; 0x02
 372:	88 30       	cpi	r24, 0x08	; 8
 374:	08 f0       	brcs	.+2      	; 0x378 <GPIO_writePin+0x1c>
 376:	d5 c0       	rjmp	.+426    	; 0x522 <GPIO_writePin+0x1c6>
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	84 30       	cpi	r24, 0x04	; 4
 37c:	08 f0       	brcs	.+2      	; 0x380 <GPIO_writePin+0x24>
 37e:	d1 c0       	rjmp	.+418    	; 0x522 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
 380:	89 81       	ldd	r24, Y+1	; 0x01
 382:	28 2f       	mov	r18, r24
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	3d 83       	std	Y+5, r19	; 0x05
 388:	2c 83       	std	Y+4, r18	; 0x04
 38a:	8c 81       	ldd	r24, Y+4	; 0x04
 38c:	9d 81       	ldd	r25, Y+5	; 0x05
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	91 05       	cpc	r25, r1
 392:	09 f4       	brne	.+2      	; 0x396 <GPIO_writePin+0x3a>
 394:	43 c0       	rjmp	.+134    	; 0x41c <GPIO_writePin+0xc0>
 396:	2c 81       	ldd	r18, Y+4	; 0x04
 398:	3d 81       	ldd	r19, Y+5	; 0x05
 39a:	22 30       	cpi	r18, 0x02	; 2
 39c:	31 05       	cpc	r19, r1
 39e:	2c f4       	brge	.+10     	; 0x3aa <GPIO_writePin+0x4e>
 3a0:	8c 81       	ldd	r24, Y+4	; 0x04
 3a2:	9d 81       	ldd	r25, Y+5	; 0x05
 3a4:	00 97       	sbiw	r24, 0x00	; 0
 3a6:	71 f0       	breq	.+28     	; 0x3c4 <GPIO_writePin+0x68>
 3a8:	bc c0       	rjmp	.+376    	; 0x522 <GPIO_writePin+0x1c6>
 3aa:	2c 81       	ldd	r18, Y+4	; 0x04
 3ac:	3d 81       	ldd	r19, Y+5	; 0x05
 3ae:	22 30       	cpi	r18, 0x02	; 2
 3b0:	31 05       	cpc	r19, r1
 3b2:	09 f4       	brne	.+2      	; 0x3b6 <GPIO_writePin+0x5a>
 3b4:	5f c0       	rjmp	.+190    	; 0x474 <GPIO_writePin+0x118>
 3b6:	8c 81       	ldd	r24, Y+4	; 0x04
 3b8:	9d 81       	ldd	r25, Y+5	; 0x05
 3ba:	83 30       	cpi	r24, 0x03	; 3
 3bc:	91 05       	cpc	r25, r1
 3be:	09 f4       	brne	.+2      	; 0x3c2 <GPIO_writePin+0x66>
 3c0:	85 c0       	rjmp	.+266    	; 0x4cc <GPIO_writePin+0x170>
 3c2:	af c0       	rjmp	.+350    	; 0x522 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
 3c4:	8b 81       	ldd	r24, Y+3	; 0x03
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	a1 f4       	brne	.+40     	; 0x3f2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
 3ca:	ab e3       	ldi	r26, 0x3B	; 59
 3cc:	b0 e0       	ldi	r27, 0x00	; 0
 3ce:	eb e3       	ldi	r30, 0x3B	; 59
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	48 2f       	mov	r20, r24
 3d6:	8a 81       	ldd	r24, Y+2	; 0x02
 3d8:	28 2f       	mov	r18, r24
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	02 2e       	mov	r0, r18
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <GPIO_writePin+0x8c>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	0a 94       	dec	r0
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <GPIO_writePin+0x88>
 3ec:	84 2b       	or	r24, r20
 3ee:	8c 93       	st	X, r24
 3f0:	98 c0       	rjmp	.+304    	; 0x522 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 3f2:	ab e3       	ldi	r26, 0x3B	; 59
 3f4:	b0 e0       	ldi	r27, 0x00	; 0
 3f6:	eb e3       	ldi	r30, 0x3B	; 59
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	48 2f       	mov	r20, r24
 3fe:	8a 81       	ldd	r24, Y+2	; 0x02
 400:	28 2f       	mov	r18, r24
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	02 2e       	mov	r0, r18
 40a:	02 c0       	rjmp	.+4      	; 0x410 <GPIO_writePin+0xb4>
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	0a 94       	dec	r0
 412:	e2 f7       	brpl	.-8      	; 0x40c <GPIO_writePin+0xb0>
 414:	80 95       	com	r24
 416:	84 23       	and	r24, r20
 418:	8c 93       	st	X, r24
 41a:	83 c0       	rjmp	.+262    	; 0x522 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
 41c:	8b 81       	ldd	r24, Y+3	; 0x03
 41e:	81 30       	cpi	r24, 0x01	; 1
 420:	a1 f4       	brne	.+40     	; 0x44a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
 422:	a8 e3       	ldi	r26, 0x38	; 56
 424:	b0 e0       	ldi	r27, 0x00	; 0
 426:	e8 e3       	ldi	r30, 0x38	; 56
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	48 2f       	mov	r20, r24
 42e:	8a 81       	ldd	r24, Y+2	; 0x02
 430:	28 2f       	mov	r18, r24
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	02 2e       	mov	r0, r18
 43a:	02 c0       	rjmp	.+4      	; 0x440 <GPIO_writePin+0xe4>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	0a 94       	dec	r0
 442:	e2 f7       	brpl	.-8      	; 0x43c <GPIO_writePin+0xe0>
 444:	84 2b       	or	r24, r20
 446:	8c 93       	st	X, r24
 448:	6c c0       	rjmp	.+216    	; 0x522 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
 44a:	a8 e3       	ldi	r26, 0x38	; 56
 44c:	b0 e0       	ldi	r27, 0x00	; 0
 44e:	e8 e3       	ldi	r30, 0x38	; 56
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	48 2f       	mov	r20, r24
 456:	8a 81       	ldd	r24, Y+2	; 0x02
 458:	28 2f       	mov	r18, r24
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	02 2e       	mov	r0, r18
 462:	02 c0       	rjmp	.+4      	; 0x468 <GPIO_writePin+0x10c>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	0a 94       	dec	r0
 46a:	e2 f7       	brpl	.-8      	; 0x464 <GPIO_writePin+0x108>
 46c:	80 95       	com	r24
 46e:	84 23       	and	r24, r20
 470:	8c 93       	st	X, r24
 472:	57 c0       	rjmp	.+174    	; 0x522 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
 474:	8b 81       	ldd	r24, Y+3	; 0x03
 476:	81 30       	cpi	r24, 0x01	; 1
 478:	a1 f4       	brne	.+40     	; 0x4a2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
 47a:	a5 e3       	ldi	r26, 0x35	; 53
 47c:	b0 e0       	ldi	r27, 0x00	; 0
 47e:	e5 e3       	ldi	r30, 0x35	; 53
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	48 2f       	mov	r20, r24
 486:	8a 81       	ldd	r24, Y+2	; 0x02
 488:	28 2f       	mov	r18, r24
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	02 2e       	mov	r0, r18
 492:	02 c0       	rjmp	.+4      	; 0x498 <GPIO_writePin+0x13c>
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	0a 94       	dec	r0
 49a:	e2 f7       	brpl	.-8      	; 0x494 <GPIO_writePin+0x138>
 49c:	84 2b       	or	r24, r20
 49e:	8c 93       	st	X, r24
 4a0:	40 c0       	rjmp	.+128    	; 0x522 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
 4a2:	a5 e3       	ldi	r26, 0x35	; 53
 4a4:	b0 e0       	ldi	r27, 0x00	; 0
 4a6:	e5 e3       	ldi	r30, 0x35	; 53
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	48 2f       	mov	r20, r24
 4ae:	8a 81       	ldd	r24, Y+2	; 0x02
 4b0:	28 2f       	mov	r18, r24
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	02 2e       	mov	r0, r18
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <GPIO_writePin+0x164>
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	0a 94       	dec	r0
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <GPIO_writePin+0x160>
 4c4:	80 95       	com	r24
 4c6:	84 23       	and	r24, r20
 4c8:	8c 93       	st	X, r24
 4ca:	2b c0       	rjmp	.+86     	; 0x522 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
 4cc:	8b 81       	ldd	r24, Y+3	; 0x03
 4ce:	81 30       	cpi	r24, 0x01	; 1
 4d0:	a1 f4       	brne	.+40     	; 0x4fa <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
 4d2:	a2 e3       	ldi	r26, 0x32	; 50
 4d4:	b0 e0       	ldi	r27, 0x00	; 0
 4d6:	e2 e3       	ldi	r30, 0x32	; 50
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	48 2f       	mov	r20, r24
 4de:	8a 81       	ldd	r24, Y+2	; 0x02
 4e0:	28 2f       	mov	r18, r24
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	02 2e       	mov	r0, r18
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <GPIO_writePin+0x194>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	0a 94       	dec	r0
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <GPIO_writePin+0x190>
 4f4:	84 2b       	or	r24, r20
 4f6:	8c 93       	st	X, r24
 4f8:	14 c0       	rjmp	.+40     	; 0x522 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
 4fa:	a2 e3       	ldi	r26, 0x32	; 50
 4fc:	b0 e0       	ldi	r27, 0x00	; 0
 4fe:	e2 e3       	ldi	r30, 0x32	; 50
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	48 2f       	mov	r20, r24
 506:	8a 81       	ldd	r24, Y+2	; 0x02
 508:	28 2f       	mov	r18, r24
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	02 2e       	mov	r0, r18
 512:	02 c0       	rjmp	.+4      	; 0x518 <GPIO_writePin+0x1bc>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	0a 94       	dec	r0
 51a:	e2 f7       	brpl	.-8      	; 0x514 <GPIO_writePin+0x1b8>
 51c:	80 95       	com	r24
 51e:	84 23       	and	r24, r20
 520:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 522:	0f 90       	pop	r0
 524:	0f 90       	pop	r0
 526:	0f 90       	pop	r0
 528:	0f 90       	pop	r0
 52a:	0f 90       	pop	r0
 52c:	cf 91       	pop	r28
 52e:	df 91       	pop	r29
 530:	08 95       	ret

00000532 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
 532:	df 93       	push	r29
 534:	cf 93       	push	r28
 536:	00 d0       	rcall	.+0      	; 0x538 <GPIO_readPin+0x6>
 538:	00 d0       	rcall	.+0      	; 0x53a <GPIO_readPin+0x8>
 53a:	0f 92       	push	r0
 53c:	cd b7       	in	r28, 0x3d	; 61
 53e:	de b7       	in	r29, 0x3e	; 62
 540:	8a 83       	std	Y+2, r24	; 0x02
 542:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
 544:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 546:	8b 81       	ldd	r24, Y+3	; 0x03
 548:	88 30       	cpi	r24, 0x08	; 8
 54a:	08 f0       	brcs	.+2      	; 0x54e <GPIO_readPin+0x1c>
 54c:	84 c0       	rjmp	.+264    	; 0x656 <GPIO_readPin+0x124>
 54e:	8a 81       	ldd	r24, Y+2	; 0x02
 550:	84 30       	cpi	r24, 0x04	; 4
 552:	08 f0       	brcs	.+2      	; 0x556 <GPIO_readPin+0x24>
 554:	80 c0       	rjmp	.+256    	; 0x656 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
 556:	8a 81       	ldd	r24, Y+2	; 0x02
 558:	28 2f       	mov	r18, r24
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	3d 83       	std	Y+5, r19	; 0x05
 55e:	2c 83       	std	Y+4, r18	; 0x04
 560:	4c 81       	ldd	r20, Y+4	; 0x04
 562:	5d 81       	ldd	r21, Y+5	; 0x05
 564:	41 30       	cpi	r20, 0x01	; 1
 566:	51 05       	cpc	r21, r1
 568:	79 f1       	breq	.+94     	; 0x5c8 <GPIO_readPin+0x96>
 56a:	8c 81       	ldd	r24, Y+4	; 0x04
 56c:	9d 81       	ldd	r25, Y+5	; 0x05
 56e:	82 30       	cpi	r24, 0x02	; 2
 570:	91 05       	cpc	r25, r1
 572:	34 f4       	brge	.+12     	; 0x580 <GPIO_readPin+0x4e>
 574:	2c 81       	ldd	r18, Y+4	; 0x04
 576:	3d 81       	ldd	r19, Y+5	; 0x05
 578:	21 15       	cp	r18, r1
 57a:	31 05       	cpc	r19, r1
 57c:	69 f0       	breq	.+26     	; 0x598 <GPIO_readPin+0x66>
 57e:	6b c0       	rjmp	.+214    	; 0x656 <GPIO_readPin+0x124>
 580:	4c 81       	ldd	r20, Y+4	; 0x04
 582:	5d 81       	ldd	r21, Y+5	; 0x05
 584:	42 30       	cpi	r20, 0x02	; 2
 586:	51 05       	cpc	r21, r1
 588:	b9 f1       	breq	.+110    	; 0x5f8 <GPIO_readPin+0xc6>
 58a:	8c 81       	ldd	r24, Y+4	; 0x04
 58c:	9d 81       	ldd	r25, Y+5	; 0x05
 58e:	83 30       	cpi	r24, 0x03	; 3
 590:	91 05       	cpc	r25, r1
 592:	09 f4       	brne	.+2      	; 0x596 <GPIO_readPin+0x64>
 594:	49 c0       	rjmp	.+146    	; 0x628 <GPIO_readPin+0xf6>
 596:	5f c0       	rjmp	.+190    	; 0x656 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
 598:	e9 e3       	ldi	r30, 0x39	; 57
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	80 81       	ld	r24, Z
 59e:	28 2f       	mov	r18, r24
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	8b 81       	ldd	r24, Y+3	; 0x03
 5a4:	88 2f       	mov	r24, r24
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	a9 01       	movw	r20, r18
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <GPIO_readPin+0x7e>
 5ac:	55 95       	asr	r21
 5ae:	47 95       	ror	r20
 5b0:	8a 95       	dec	r24
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <GPIO_readPin+0x7a>
 5b4:	ca 01       	movw	r24, r20
 5b6:	81 70       	andi	r24, 0x01	; 1
 5b8:	90 70       	andi	r25, 0x00	; 0
 5ba:	88 23       	and	r24, r24
 5bc:	19 f0       	breq	.+6      	; 0x5c4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	89 83       	std	Y+1, r24	; 0x01
 5c2:	49 c0       	rjmp	.+146    	; 0x656 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 5c4:	19 82       	std	Y+1, r1	; 0x01
 5c6:	47 c0       	rjmp	.+142    	; 0x656 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
 5c8:	e6 e3       	ldi	r30, 0x36	; 54
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	80 81       	ld	r24, Z
 5ce:	28 2f       	mov	r18, r24
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	8b 81       	ldd	r24, Y+3	; 0x03
 5d4:	88 2f       	mov	r24, r24
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	a9 01       	movw	r20, r18
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <GPIO_readPin+0xae>
 5dc:	55 95       	asr	r21
 5de:	47 95       	ror	r20
 5e0:	8a 95       	dec	r24
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <GPIO_readPin+0xaa>
 5e4:	ca 01       	movw	r24, r20
 5e6:	81 70       	andi	r24, 0x01	; 1
 5e8:	90 70       	andi	r25, 0x00	; 0
 5ea:	88 23       	and	r24, r24
 5ec:	19 f0       	breq	.+6      	; 0x5f4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	89 83       	std	Y+1, r24	; 0x01
 5f2:	31 c0       	rjmp	.+98     	; 0x656 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 5f4:	19 82       	std	Y+1, r1	; 0x01
 5f6:	2f c0       	rjmp	.+94     	; 0x656 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
 5f8:	e3 e3       	ldi	r30, 0x33	; 51
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	80 81       	ld	r24, Z
 5fe:	28 2f       	mov	r18, r24
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	8b 81       	ldd	r24, Y+3	; 0x03
 604:	88 2f       	mov	r24, r24
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	a9 01       	movw	r20, r18
 60a:	02 c0       	rjmp	.+4      	; 0x610 <GPIO_readPin+0xde>
 60c:	55 95       	asr	r21
 60e:	47 95       	ror	r20
 610:	8a 95       	dec	r24
 612:	e2 f7       	brpl	.-8      	; 0x60c <GPIO_readPin+0xda>
 614:	ca 01       	movw	r24, r20
 616:	81 70       	andi	r24, 0x01	; 1
 618:	90 70       	andi	r25, 0x00	; 0
 61a:	88 23       	and	r24, r24
 61c:	19 f0       	breq	.+6      	; 0x624 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	89 83       	std	Y+1, r24	; 0x01
 622:	19 c0       	rjmp	.+50     	; 0x656 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 624:	19 82       	std	Y+1, r1	; 0x01
 626:	17 c0       	rjmp	.+46     	; 0x656 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
 628:	e0 e3       	ldi	r30, 0x30	; 48
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	80 81       	ld	r24, Z
 62e:	28 2f       	mov	r18, r24
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	8b 81       	ldd	r24, Y+3	; 0x03
 634:	88 2f       	mov	r24, r24
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	a9 01       	movw	r20, r18
 63a:	02 c0       	rjmp	.+4      	; 0x640 <GPIO_readPin+0x10e>
 63c:	55 95       	asr	r21
 63e:	47 95       	ror	r20
 640:	8a 95       	dec	r24
 642:	e2 f7       	brpl	.-8      	; 0x63c <GPIO_readPin+0x10a>
 644:	ca 01       	movw	r24, r20
 646:	81 70       	andi	r24, 0x01	; 1
 648:	90 70       	andi	r25, 0x00	; 0
 64a:	88 23       	and	r24, r24
 64c:	19 f0       	breq	.+6      	; 0x654 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	89 83       	std	Y+1, r24	; 0x01
 652:	01 c0       	rjmp	.+2      	; 0x656 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 654:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
 656:	89 81       	ldd	r24, Y+1	; 0x01
}
 658:	0f 90       	pop	r0
 65a:	0f 90       	pop	r0
 65c:	0f 90       	pop	r0
 65e:	0f 90       	pop	r0
 660:	0f 90       	pop	r0
 662:	cf 91       	pop	r28
 664:	df 91       	pop	r29
 666:	08 95       	ret

00000668 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
 668:	df 93       	push	r29
 66a:	cf 93       	push	r28
 66c:	00 d0       	rcall	.+0      	; 0x66e <GPIO_setupPortDirection+0x6>
 66e:	00 d0       	rcall	.+0      	; 0x670 <GPIO_setupPortDirection+0x8>
 670:	cd b7       	in	r28, 0x3d	; 61
 672:	de b7       	in	r29, 0x3e	; 62
 674:	89 83       	std	Y+1, r24	; 0x01
 676:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 678:	89 81       	ldd	r24, Y+1	; 0x01
 67a:	84 30       	cpi	r24, 0x04	; 4
 67c:	90 f5       	brcc	.+100    	; 0x6e2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
 67e:	89 81       	ldd	r24, Y+1	; 0x01
 680:	28 2f       	mov	r18, r24
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	3c 83       	std	Y+4, r19	; 0x04
 686:	2b 83       	std	Y+3, r18	; 0x03
 688:	8b 81       	ldd	r24, Y+3	; 0x03
 68a:	9c 81       	ldd	r25, Y+4	; 0x04
 68c:	81 30       	cpi	r24, 0x01	; 1
 68e:	91 05       	cpc	r25, r1
 690:	d1 f0       	breq	.+52     	; 0x6c6 <GPIO_setupPortDirection+0x5e>
 692:	2b 81       	ldd	r18, Y+3	; 0x03
 694:	3c 81       	ldd	r19, Y+4	; 0x04
 696:	22 30       	cpi	r18, 0x02	; 2
 698:	31 05       	cpc	r19, r1
 69a:	2c f4       	brge	.+10     	; 0x6a6 <GPIO_setupPortDirection+0x3e>
 69c:	8b 81       	ldd	r24, Y+3	; 0x03
 69e:	9c 81       	ldd	r25, Y+4	; 0x04
 6a0:	00 97       	sbiw	r24, 0x00	; 0
 6a2:	61 f0       	breq	.+24     	; 0x6bc <GPIO_setupPortDirection+0x54>
 6a4:	1e c0       	rjmp	.+60     	; 0x6e2 <GPIO_setupPortDirection+0x7a>
 6a6:	2b 81       	ldd	r18, Y+3	; 0x03
 6a8:	3c 81       	ldd	r19, Y+4	; 0x04
 6aa:	22 30       	cpi	r18, 0x02	; 2
 6ac:	31 05       	cpc	r19, r1
 6ae:	81 f0       	breq	.+32     	; 0x6d0 <GPIO_setupPortDirection+0x68>
 6b0:	8b 81       	ldd	r24, Y+3	; 0x03
 6b2:	9c 81       	ldd	r25, Y+4	; 0x04
 6b4:	83 30       	cpi	r24, 0x03	; 3
 6b6:	91 05       	cpc	r25, r1
 6b8:	81 f0       	breq	.+32     	; 0x6da <GPIO_setupPortDirection+0x72>
 6ba:	13 c0       	rjmp	.+38     	; 0x6e2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
 6bc:	ea e3       	ldi	r30, 0x3A	; 58
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	8a 81       	ldd	r24, Y+2	; 0x02
 6c2:	80 83       	st	Z, r24
 6c4:	0e c0       	rjmp	.+28     	; 0x6e2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
 6c6:	e7 e3       	ldi	r30, 0x37	; 55
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	8a 81       	ldd	r24, Y+2	; 0x02
 6cc:	80 83       	st	Z, r24
 6ce:	09 c0       	rjmp	.+18     	; 0x6e2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
 6d0:	e4 e3       	ldi	r30, 0x34	; 52
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	8a 81       	ldd	r24, Y+2	; 0x02
 6d6:	80 83       	st	Z, r24
 6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
 6da:	e1 e3       	ldi	r30, 0x31	; 49
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	8a 81       	ldd	r24, Y+2	; 0x02
 6e0:	80 83       	st	Z, r24
			break;
		}
	}
}
 6e2:	0f 90       	pop	r0
 6e4:	0f 90       	pop	r0
 6e6:	0f 90       	pop	r0
 6e8:	0f 90       	pop	r0
 6ea:	cf 91       	pop	r28
 6ec:	df 91       	pop	r29
 6ee:	08 95       	ret

000006f0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
 6f0:	df 93       	push	r29
 6f2:	cf 93       	push	r28
 6f4:	00 d0       	rcall	.+0      	; 0x6f6 <GPIO_writePort+0x6>
 6f6:	00 d0       	rcall	.+0      	; 0x6f8 <GPIO_writePort+0x8>
 6f8:	cd b7       	in	r28, 0x3d	; 61
 6fa:	de b7       	in	r29, 0x3e	; 62
 6fc:	89 83       	std	Y+1, r24	; 0x01
 6fe:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 700:	89 81       	ldd	r24, Y+1	; 0x01
 702:	84 30       	cpi	r24, 0x04	; 4
 704:	90 f5       	brcc	.+100    	; 0x76a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
 706:	89 81       	ldd	r24, Y+1	; 0x01
 708:	28 2f       	mov	r18, r24
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	3c 83       	std	Y+4, r19	; 0x04
 70e:	2b 83       	std	Y+3, r18	; 0x03
 710:	8b 81       	ldd	r24, Y+3	; 0x03
 712:	9c 81       	ldd	r25, Y+4	; 0x04
 714:	81 30       	cpi	r24, 0x01	; 1
 716:	91 05       	cpc	r25, r1
 718:	d1 f0       	breq	.+52     	; 0x74e <GPIO_writePort+0x5e>
 71a:	2b 81       	ldd	r18, Y+3	; 0x03
 71c:	3c 81       	ldd	r19, Y+4	; 0x04
 71e:	22 30       	cpi	r18, 0x02	; 2
 720:	31 05       	cpc	r19, r1
 722:	2c f4       	brge	.+10     	; 0x72e <GPIO_writePort+0x3e>
 724:	8b 81       	ldd	r24, Y+3	; 0x03
 726:	9c 81       	ldd	r25, Y+4	; 0x04
 728:	00 97       	sbiw	r24, 0x00	; 0
 72a:	61 f0       	breq	.+24     	; 0x744 <GPIO_writePort+0x54>
 72c:	1e c0       	rjmp	.+60     	; 0x76a <GPIO_writePort+0x7a>
 72e:	2b 81       	ldd	r18, Y+3	; 0x03
 730:	3c 81       	ldd	r19, Y+4	; 0x04
 732:	22 30       	cpi	r18, 0x02	; 2
 734:	31 05       	cpc	r19, r1
 736:	81 f0       	breq	.+32     	; 0x758 <GPIO_writePort+0x68>
 738:	8b 81       	ldd	r24, Y+3	; 0x03
 73a:	9c 81       	ldd	r25, Y+4	; 0x04
 73c:	83 30       	cpi	r24, 0x03	; 3
 73e:	91 05       	cpc	r25, r1
 740:	81 f0       	breq	.+32     	; 0x762 <GPIO_writePort+0x72>
 742:	13 c0       	rjmp	.+38     	; 0x76a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
 744:	eb e3       	ldi	r30, 0x3B	; 59
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	8a 81       	ldd	r24, Y+2	; 0x02
 74a:	80 83       	st	Z, r24
 74c:	0e c0       	rjmp	.+28     	; 0x76a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
 74e:	e8 e3       	ldi	r30, 0x38	; 56
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	8a 81       	ldd	r24, Y+2	; 0x02
 754:	80 83       	st	Z, r24
 756:	09 c0       	rjmp	.+18     	; 0x76a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
 758:	e5 e3       	ldi	r30, 0x35	; 53
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	8a 81       	ldd	r24, Y+2	; 0x02
 75e:	80 83       	st	Z, r24
 760:	04 c0       	rjmp	.+8      	; 0x76a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
 762:	e2 e3       	ldi	r30, 0x32	; 50
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	8a 81       	ldd	r24, Y+2	; 0x02
 768:	80 83       	st	Z, r24
			break;
		}
	}
}
 76a:	0f 90       	pop	r0
 76c:	0f 90       	pop	r0
 76e:	0f 90       	pop	r0
 770:	0f 90       	pop	r0
 772:	cf 91       	pop	r28
 774:	df 91       	pop	r29
 776:	08 95       	ret

00000778 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
 778:	df 93       	push	r29
 77a:	cf 93       	push	r28
 77c:	00 d0       	rcall	.+0      	; 0x77e <GPIO_readPort+0x6>
 77e:	00 d0       	rcall	.+0      	; 0x780 <GPIO_readPort+0x8>
 780:	cd b7       	in	r28, 0x3d	; 61
 782:	de b7       	in	r29, 0x3e	; 62
 784:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
 786:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 788:	8a 81       	ldd	r24, Y+2	; 0x02
 78a:	84 30       	cpi	r24, 0x04	; 4
 78c:	90 f5       	brcc	.+100    	; 0x7f2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
 78e:	8a 81       	ldd	r24, Y+2	; 0x02
 790:	28 2f       	mov	r18, r24
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	3c 83       	std	Y+4, r19	; 0x04
 796:	2b 83       	std	Y+3, r18	; 0x03
 798:	8b 81       	ldd	r24, Y+3	; 0x03
 79a:	9c 81       	ldd	r25, Y+4	; 0x04
 79c:	81 30       	cpi	r24, 0x01	; 1
 79e:	91 05       	cpc	r25, r1
 7a0:	d1 f0       	breq	.+52     	; 0x7d6 <GPIO_readPort+0x5e>
 7a2:	2b 81       	ldd	r18, Y+3	; 0x03
 7a4:	3c 81       	ldd	r19, Y+4	; 0x04
 7a6:	22 30       	cpi	r18, 0x02	; 2
 7a8:	31 05       	cpc	r19, r1
 7aa:	2c f4       	brge	.+10     	; 0x7b6 <GPIO_readPort+0x3e>
 7ac:	8b 81       	ldd	r24, Y+3	; 0x03
 7ae:	9c 81       	ldd	r25, Y+4	; 0x04
 7b0:	00 97       	sbiw	r24, 0x00	; 0
 7b2:	61 f0       	breq	.+24     	; 0x7cc <GPIO_readPort+0x54>
 7b4:	1e c0       	rjmp	.+60     	; 0x7f2 <GPIO_readPort+0x7a>
 7b6:	2b 81       	ldd	r18, Y+3	; 0x03
 7b8:	3c 81       	ldd	r19, Y+4	; 0x04
 7ba:	22 30       	cpi	r18, 0x02	; 2
 7bc:	31 05       	cpc	r19, r1
 7be:	81 f0       	breq	.+32     	; 0x7e0 <GPIO_readPort+0x68>
 7c0:	8b 81       	ldd	r24, Y+3	; 0x03
 7c2:	9c 81       	ldd	r25, Y+4	; 0x04
 7c4:	83 30       	cpi	r24, 0x03	; 3
 7c6:	91 05       	cpc	r25, r1
 7c8:	81 f0       	breq	.+32     	; 0x7ea <GPIO_readPort+0x72>
 7ca:	13 c0       	rjmp	.+38     	; 0x7f2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
 7cc:	e9 e3       	ldi	r30, 0x39	; 57
 7ce:	f0 e0       	ldi	r31, 0x00	; 0
 7d0:	80 81       	ld	r24, Z
 7d2:	89 83       	std	Y+1, r24	; 0x01
 7d4:	0e c0       	rjmp	.+28     	; 0x7f2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
 7d6:	e6 e3       	ldi	r30, 0x36	; 54
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	80 81       	ld	r24, Z
 7dc:	89 83       	std	Y+1, r24	; 0x01
 7de:	09 c0       	rjmp	.+18     	; 0x7f2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
 7e0:	e3 e3       	ldi	r30, 0x33	; 51
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	80 81       	ld	r24, Z
 7e6:	89 83       	std	Y+1, r24	; 0x01
 7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
 7ea:	e0 e3       	ldi	r30, 0x30	; 48
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	80 81       	ld	r24, Z
 7f0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
 7f2:	89 81       	ldd	r24, Y+1	; 0x01
}
 7f4:	0f 90       	pop	r0
 7f6:	0f 90       	pop	r0
 7f8:	0f 90       	pop	r0
 7fa:	0f 90       	pop	r0
 7fc:	cf 91       	pop	r28
 7fe:	df 91       	pop	r29
 800:	08 95       	ret

00000802 <SevenSegment_INIT>:
 *      Author: Ahmed
 */
#include "SevenSegment.h"

void SevenSegment_INIT(void)
{
 802:	df 93       	push	r29
 804:	cf 93       	push	r28
 806:	cd b7       	in	r28, 0x3d	; 61
 808:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTA_ID, 0, OUTPUT);
 80a:	80 e0       	ldi	r24, 0x00	; 0
 80c:	60 e0       	ldi	r22, 0x00	; 0
 80e:	41 e0       	ldi	r20, 0x01	; 1
 810:	0e 94 c3 00 	call	0x186	; 0x186 <GPIO_setupPinDirection>
	GPIO_writePin(PORTA_ID, 0, LOGIC_HIGH);
 814:	80 e0       	ldi	r24, 0x00	; 0
 816:	60 e0       	ldi	r22, 0x00	; 0
 818:	41 e0       	ldi	r20, 0x01	; 1
 81a:	0e 94 ae 01 	call	0x35c	; 0x35c <GPIO_writePin>
	GPIO_setupPinDirection(PORTC_ID, 0, OUTPUT);
 81e:	82 e0       	ldi	r24, 0x02	; 2
 820:	60 e0       	ldi	r22, 0x00	; 0
 822:	41 e0       	ldi	r20, 0x01	; 1
 824:	0e 94 c3 00 	call	0x186	; 0x186 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, 1, OUTPUT);
 828:	82 e0       	ldi	r24, 0x02	; 2
 82a:	61 e0       	ldi	r22, 0x01	; 1
 82c:	41 e0       	ldi	r20, 0x01	; 1
 82e:	0e 94 c3 00 	call	0x186	; 0x186 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, 2, OUTPUT);
 832:	82 e0       	ldi	r24, 0x02	; 2
 834:	62 e0       	ldi	r22, 0x02	; 2
 836:	41 e0       	ldi	r20, 0x01	; 1
 838:	0e 94 c3 00 	call	0x186	; 0x186 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, 3, OUTPUT);
 83c:	82 e0       	ldi	r24, 0x02	; 2
 83e:	63 e0       	ldi	r22, 0x03	; 3
 840:	41 e0       	ldi	r20, 0x01	; 1
 842:	0e 94 c3 00 	call	0x186	; 0x186 <GPIO_setupPinDirection>
}
 846:	cf 91       	pop	r28
 848:	df 91       	pop	r29
 84a:	08 95       	ret

0000084c <SevenSegment_writeNum>:

void SevenSegment_writeNum(unsigned char num)
{
 84c:	df 93       	push	r29
 84e:	cf 93       	push	r28
 850:	0f 92       	push	r0
 852:	cd b7       	in	r28, 0x3d	; 61
 854:	de b7       	in	r29, 0x3e	; 62
 856:	89 83       	std	Y+1, r24	; 0x01
	PORTC = (PORTC & 0xF0) | (num & 0x0F);
 858:	a5 e3       	ldi	r26, 0x35	; 53
 85a:	b0 e0       	ldi	r27, 0x00	; 0
 85c:	e5 e3       	ldi	r30, 0x35	; 53
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	80 81       	ld	r24, Z
 862:	98 2f       	mov	r25, r24
 864:	90 7f       	andi	r25, 0xF0	; 240
 866:	89 81       	ldd	r24, Y+1	; 0x01
 868:	8f 70       	andi	r24, 0x0F	; 15
 86a:	89 2b       	or	r24, r25
 86c:	8c 93       	st	X, r24
}
 86e:	0f 90       	pop	r0
 870:	cf 91       	pop	r28
 872:	df 91       	pop	r29
 874:	08 95       	ret

00000876 <Led_Init>:
 */
#include "Led.h"
signed char time = 0 ;

void Led_Init(void)
{
 876:	df 93       	push	r29
 878:	cf 93       	push	r28
 87a:	cd b7       	in	r28, 0x3d	; 61
 87c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTD_ID, 0, OUTPUT);
 87e:	83 e0       	ldi	r24, 0x03	; 3
 880:	60 e0       	ldi	r22, 0x00	; 0
 882:	41 e0       	ldi	r20, 0x01	; 1
 884:	0e 94 c3 00 	call	0x186	; 0x186 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID, 1, OUTPUT);
 888:	83 e0       	ldi	r24, 0x03	; 3
 88a:	61 e0       	ldi	r22, 0x01	; 1
 88c:	41 e0       	ldi	r20, 0x01	; 1
 88e:	0e 94 c3 00 	call	0x186	; 0x186 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID, 2, OUTPUT);
 892:	83 e0       	ldi	r24, 0x03	; 3
 894:	62 e0       	ldi	r22, 0x02	; 2
 896:	41 e0       	ldi	r20, 0x01	; 1
 898:	0e 94 c3 00 	call	0x186	; 0x186 <GPIO_setupPinDirection>

	GPIO_writePin(PORTD_ID, 0, LOGIC_LOW);
 89c:	83 e0       	ldi	r24, 0x03	; 3
 89e:	60 e0       	ldi	r22, 0x00	; 0
 8a0:	40 e0       	ldi	r20, 0x00	; 0
 8a2:	0e 94 ae 01 	call	0x35c	; 0x35c <GPIO_writePin>
	GPIO_writePin(PORTD_ID, 1, LOGIC_LOW);
 8a6:	83 e0       	ldi	r24, 0x03	; 3
 8a8:	61 e0       	ldi	r22, 0x01	; 1
 8aa:	40 e0       	ldi	r20, 0x00	; 0
 8ac:	0e 94 ae 01 	call	0x35c	; 0x35c <GPIO_writePin>
	GPIO_writePin(PORTD_ID, 2, LOGIC_LOW);
 8b0:	83 e0       	ldi	r24, 0x03	; 3
 8b2:	62 e0       	ldi	r22, 0x02	; 2
 8b4:	40 e0       	ldi	r20, 0x00	; 0
 8b6:	0e 94 ae 01 	call	0x35c	; 0x35c <GPIO_writePin>

	Led_Green();
 8ba:	0e 94 62 04 	call	0x8c4	; 0x8c4 <Led_Green>
}
 8be:	cf 91       	pop	r28
 8c0:	df 91       	pop	r29
 8c2:	08 95       	ret

000008c4 <Led_Green>:
void Led_Green(void)
{
 8c4:	df 93       	push	r29
 8c6:	cf 93       	push	r28
 8c8:	cd b7       	in	r28, 0x3d	; 61
 8ca:	de b7       	in	r29, 0x3e	; 62
	time = 9;
 8cc:	89 e0       	ldi	r24, 0x09	; 9
 8ce:	80 93 64 00 	sts	0x0064, r24
	GPIO_writePin(PORTD_ID, 0, LOGIC_HIGH);
 8d2:	83 e0       	ldi	r24, 0x03	; 3
 8d4:	60 e0       	ldi	r22, 0x00	; 0
 8d6:	41 e0       	ldi	r20, 0x01	; 1
 8d8:	0e 94 ae 01 	call	0x35c	; 0x35c <GPIO_writePin>
	GPIO_writePin(PORTD_ID, 1, LOGIC_LOW);
 8dc:	83 e0       	ldi	r24, 0x03	; 3
 8de:	61 e0       	ldi	r22, 0x01	; 1
 8e0:	40 e0       	ldi	r20, 0x00	; 0
 8e2:	0e 94 ae 01 	call	0x35c	; 0x35c <GPIO_writePin>
	GPIO_writePin(PORTD_ID, 2, LOGIC_LOW);
 8e6:	83 e0       	ldi	r24, 0x03	; 3
 8e8:	62 e0       	ldi	r22, 0x02	; 2
 8ea:	40 e0       	ldi	r20, 0x00	; 0
 8ec:	0e 94 ae 01 	call	0x35c	; 0x35c <GPIO_writePin>
}
 8f0:	cf 91       	pop	r28
 8f2:	df 91       	pop	r29
 8f4:	08 95       	ret

000008f6 <Led_Yellow>:

void Led_Yellow(void)
{
 8f6:	df 93       	push	r29
 8f8:	cf 93       	push	r28
 8fa:	cd b7       	in	r28, 0x3d	; 61
 8fc:	de b7       	in	r29, 0x3e	; 62
	time = 4;
 8fe:	84 e0       	ldi	r24, 0x04	; 4
 900:	80 93 64 00 	sts	0x0064, r24
	GPIO_writePin(PORTD_ID, 0, LOGIC_LOW);
 904:	83 e0       	ldi	r24, 0x03	; 3
 906:	60 e0       	ldi	r22, 0x00	; 0
 908:	40 e0       	ldi	r20, 0x00	; 0
 90a:	0e 94 ae 01 	call	0x35c	; 0x35c <GPIO_writePin>
	GPIO_writePin(PORTD_ID, 1, LOGIC_HIGH);
 90e:	83 e0       	ldi	r24, 0x03	; 3
 910:	61 e0       	ldi	r22, 0x01	; 1
 912:	41 e0       	ldi	r20, 0x01	; 1
 914:	0e 94 ae 01 	call	0x35c	; 0x35c <GPIO_writePin>
	GPIO_writePin(PORTD_ID, 2, LOGIC_LOW);
 918:	83 e0       	ldi	r24, 0x03	; 3
 91a:	62 e0       	ldi	r22, 0x02	; 2
 91c:	40 e0       	ldi	r20, 0x00	; 0
 91e:	0e 94 ae 01 	call	0x35c	; 0x35c <GPIO_writePin>
}
 922:	cf 91       	pop	r28
 924:	df 91       	pop	r29
 926:	08 95       	ret

00000928 <Led_Red>:

void Led_Red(void)
{
 928:	df 93       	push	r29
 92a:	cf 93       	push	r28
 92c:	cd b7       	in	r28, 0x3d	; 61
 92e:	de b7       	in	r29, 0x3e	; 62
	time = 7;
 930:	87 e0       	ldi	r24, 0x07	; 7
 932:	80 93 64 00 	sts	0x0064, r24
	GPIO_writePin(PORTD_ID, 0, LOGIC_LOW);
 936:	83 e0       	ldi	r24, 0x03	; 3
 938:	60 e0       	ldi	r22, 0x00	; 0
 93a:	40 e0       	ldi	r20, 0x00	; 0
 93c:	0e 94 ae 01 	call	0x35c	; 0x35c <GPIO_writePin>
	GPIO_writePin(PORTD_ID, 1, LOGIC_LOW);
 940:	83 e0       	ldi	r24, 0x03	; 3
 942:	61 e0       	ldi	r22, 0x01	; 1
 944:	40 e0       	ldi	r20, 0x00	; 0
 946:	0e 94 ae 01 	call	0x35c	; 0x35c <GPIO_writePin>
	GPIO_writePin(PORTD_ID, 2, LOGIC_HIGH);
 94a:	83 e0       	ldi	r24, 0x03	; 3
 94c:	62 e0       	ldi	r22, 0x02	; 2
 94e:	41 e0       	ldi	r20, 0x01	; 1
 950:	0e 94 ae 01 	call	0x35c	; 0x35c <GPIO_writePin>
}
 954:	cf 91       	pop	r28
 956:	df 91       	pop	r29
 958:	08 95       	ret

0000095a <TIMER1_ISR>:

unsigned char led = 1;
extern signed char time;

void TIMER1_ISR()
{
 95a:	df 93       	push	r29
 95c:	cf 93       	push	r28
 95e:	cd b7       	in	r28, 0x3d	; 61
 960:	de b7       	in	r29, 0x3e	; 62
	time--;
 962:	80 91 64 00 	lds	r24, 0x0064
 966:	81 50       	subi	r24, 0x01	; 1
 968:	80 93 64 00 	sts	0x0064, r24
}
 96c:	cf 91       	pop	r28
 96e:	df 91       	pop	r29
 970:	08 95       	ret

00000972 <main>:

int main(void)
{
 972:	df 93       	push	r29
 974:	cf 93       	push	r28
 976:	00 d0       	rcall	.+0      	; 0x978 <main+0x6>
 978:	cd b7       	in	r28, 0x3d	; 61
 97a:	de b7       	in	r29, 0x3e	; 62
	SevenSegment_INIT();
 97c:	0e 94 01 04 	call	0x802	; 0x802 <SevenSegment_INIT>

	TIMER1_INIT();
 980:	0e 94 49 00 	call	0x92	; 0x92 <TIMER1_INIT>
	TIMER1_SetCallBack(TIMER1_ISR);
 984:	8d ea       	ldi	r24, 0xAD	; 173
 986:	94 e0       	ldi	r25, 0x04	; 4
 988:	0e 94 b1 00 	call	0x162	; 0x162 <TIMER1_SetCallBack>

	Led_Init();
 98c:	0e 94 3b 04 	call	0x876	; 0x876 <Led_Init>

	sei();
 990:	78 94       	sei

	while(1)
	{
		if(time >= 0)
 992:	80 91 64 00 	lds	r24, 0x0064
 996:	88 23       	and	r24, r24
 998:	2c f0       	brlt	.+10     	; 0x9a4 <main+0x32>
		{
			SevenSegment_writeNum(time);
 99a:	80 91 64 00 	lds	r24, 0x0064
 99e:	0e 94 26 04 	call	0x84c	; 0x84c <SevenSegment_writeNum>
 9a2:	f7 cf       	rjmp	.-18     	; 0x992 <main+0x20>
		}
		else
		{
			switch(led)
 9a4:	80 91 60 00 	lds	r24, 0x0060
 9a8:	28 2f       	mov	r18, r24
 9aa:	30 e0       	ldi	r19, 0x00	; 0
 9ac:	3a 83       	std	Y+2, r19	; 0x02
 9ae:	29 83       	std	Y+1, r18	; 0x01
 9b0:	89 81       	ldd	r24, Y+1	; 0x01
 9b2:	9a 81       	ldd	r25, Y+2	; 0x02
 9b4:	81 30       	cpi	r24, 0x01	; 1
 9b6:	91 05       	cpc	r25, r1
 9b8:	61 f0       	breq	.+24     	; 0x9d2 <main+0x60>
 9ba:	29 81       	ldd	r18, Y+1	; 0x01
 9bc:	3a 81       	ldd	r19, Y+2	; 0x02
 9be:	22 30       	cpi	r18, 0x02	; 2
 9c0:	31 05       	cpc	r19, r1
 9c2:	51 f0       	breq	.+20     	; 0x9d8 <main+0x66>
 9c4:	89 81       	ldd	r24, Y+1	; 0x01
 9c6:	9a 81       	ldd	r25, Y+2	; 0x02
 9c8:	00 97       	sbiw	r24, 0x00	; 0
 9ca:	41 f4       	brne	.+16     	; 0x9dc <main+0x6a>
			{
				case 0: Led_Green(); break;
 9cc:	0e 94 62 04 	call	0x8c4	; 0x8c4 <Led_Green>
 9d0:	05 c0       	rjmp	.+10     	; 0x9dc <main+0x6a>
				case 1:	Led_Yellow(); break;
 9d2:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <Led_Yellow>
 9d6:	02 c0       	rjmp	.+4      	; 0x9dc <main+0x6a>
				case 2:	Led_Red(); break;
 9d8:	0e 94 94 04 	call	0x928	; 0x928 <Led_Red>
			}
			led++;
 9dc:	80 91 60 00 	lds	r24, 0x0060
 9e0:	8f 5f       	subi	r24, 0xFF	; 255
 9e2:	80 93 60 00 	sts	0x0060, r24
			if(led > 2)
 9e6:	80 91 60 00 	lds	r24, 0x0060
 9ea:	83 30       	cpi	r24, 0x03	; 3
 9ec:	90 f2       	brcs	.-92     	; 0x992 <main+0x20>
			{
				led = 0;
 9ee:	10 92 60 00 	sts	0x0060, r1
 9f2:	cf cf       	rjmp	.-98     	; 0x992 <main+0x20>

000009f4 <_exit>:
 9f4:	f8 94       	cli

000009f6 <__stop_program>:
 9f6:	ff cf       	rjmp	.-2      	; 0x9f6 <__stop_program>
