
TrafficLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000978  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000978  000009ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000012a8  00000000  00000000  000009f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cc6  00000000  00000000  00001c98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_8>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <main>
  7a:	0c 94 ba 04 	jmp	0x974	; 0x974 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <TIMER1_INIT>:

#include "TIMER.h"
#include "avr/io.h"

void TIMER1_INIT(void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1A,FOC1B);
  8a:	af e4       	ldi	r26, 0x4F	; 79
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	ef e4       	ldi	r30, 0x4F	; 79
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	84 60       	ori	r24, 0x04	; 4
  96:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
  98:	ae e4       	ldi	r26, 0x4E	; 78
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	ee e4       	ldi	r30, 0x4E	; 78
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	88 60       	ori	r24, 0x08	; 8
  a4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
  a6:	ae e4       	ldi	r26, 0x4E	; 78
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	ee e4       	ldi	r30, 0x4E	; 78
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 61       	ori	r24, 0x10	; 16
  b2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS12);
  b4:	ae e4       	ldi	r26, 0x4E	; 78
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	ee e4       	ldi	r30, 0x4E	; 78
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS10);
  c2:	ae e4       	ldi	r26, 0x4E	; 78
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	ee e4       	ldi	r30, 0x4E	; 78
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	8c 93       	st	X, r24

	TCNT1 = 0;
  d0:	ec e4       	ldi	r30, 0x4C	; 76
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	11 82       	std	Z+1, r1	; 0x01
  d6:	10 82       	st	Z, r1
	ICR1 = 975;
  d8:	e6 e4       	ldi	r30, 0x46	; 70
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	8f ec       	ldi	r24, 0xCF	; 207
  de:	93 e0       	ldi	r25, 0x03	; 3
  e0:	91 83       	std	Z+1, r25	; 0x01
  e2:	80 83       	st	Z, r24

	SET_BIT(TIMSK,OCIE1B);
  e4:	a9 e5       	ldi	r26, 0x59	; 89
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	e9 e5       	ldi	r30, 0x59	; 89
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	8c 93       	st	X, r24
}
  f2:	cf 91       	pop	r28
  f4:	df 91       	pop	r29
  f6:	08 95       	ret

000000f8 <__vector_8>:

ISR(TIMER1_COMPB_vect) // Interrupt service routine to control the watch time
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	8f 93       	push	r24
 104:	df 93       	push	r29
 106:	cf 93       	push	r28
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
	time--;
 10c:	80 91 60 00 	lds	r24, 0x0060
 110:	81 50       	subi	r24, 0x01	; 1
 112:	80 93 60 00 	sts	0x0060, r24
}
 116:	cf 91       	pop	r28
 118:	df 91       	pop	r29
 11a:	8f 91       	pop	r24
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
 126:	df 93       	push	r29
 128:	cf 93       	push	r28
 12a:	00 d0       	rcall	.+0      	; 0x12c <GPIO_setupPinDirection+0x6>
 12c:	00 d0       	rcall	.+0      	; 0x12e <GPIO_setupPinDirection+0x8>
 12e:	0f 92       	push	r0
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
 134:	89 83       	std	Y+1, r24	; 0x01
 136:	6a 83       	std	Y+2, r22	; 0x02
 138:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 13a:	8a 81       	ldd	r24, Y+2	; 0x02
 13c:	88 30       	cpi	r24, 0x08	; 8
 13e:	08 f0       	brcs	.+2      	; 0x142 <GPIO_setupPinDirection+0x1c>
 140:	d5 c0       	rjmp	.+426    	; 0x2ec <GPIO_setupPinDirection+0x1c6>
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	84 30       	cpi	r24, 0x04	; 4
 146:	08 f0       	brcs	.+2      	; 0x14a <GPIO_setupPinDirection+0x24>
 148:	d1 c0       	rjmp	.+418    	; 0x2ec <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	28 2f       	mov	r18, r24
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	3d 83       	std	Y+5, r19	; 0x05
 152:	2c 83       	std	Y+4, r18	; 0x04
 154:	8c 81       	ldd	r24, Y+4	; 0x04
 156:	9d 81       	ldd	r25, Y+5	; 0x05
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	91 05       	cpc	r25, r1
 15c:	09 f4       	brne	.+2      	; 0x160 <GPIO_setupPinDirection+0x3a>
 15e:	43 c0       	rjmp	.+134    	; 0x1e6 <GPIO_setupPinDirection+0xc0>
 160:	2c 81       	ldd	r18, Y+4	; 0x04
 162:	3d 81       	ldd	r19, Y+5	; 0x05
 164:	22 30       	cpi	r18, 0x02	; 2
 166:	31 05       	cpc	r19, r1
 168:	2c f4       	brge	.+10     	; 0x174 <GPIO_setupPinDirection+0x4e>
 16a:	8c 81       	ldd	r24, Y+4	; 0x04
 16c:	9d 81       	ldd	r25, Y+5	; 0x05
 16e:	00 97       	sbiw	r24, 0x00	; 0
 170:	71 f0       	breq	.+28     	; 0x18e <GPIO_setupPinDirection+0x68>
 172:	bc c0       	rjmp	.+376    	; 0x2ec <GPIO_setupPinDirection+0x1c6>
 174:	2c 81       	ldd	r18, Y+4	; 0x04
 176:	3d 81       	ldd	r19, Y+5	; 0x05
 178:	22 30       	cpi	r18, 0x02	; 2
 17a:	31 05       	cpc	r19, r1
 17c:	09 f4       	brne	.+2      	; 0x180 <GPIO_setupPinDirection+0x5a>
 17e:	5f c0       	rjmp	.+190    	; 0x23e <GPIO_setupPinDirection+0x118>
 180:	8c 81       	ldd	r24, Y+4	; 0x04
 182:	9d 81       	ldd	r25, Y+5	; 0x05
 184:	83 30       	cpi	r24, 0x03	; 3
 186:	91 05       	cpc	r25, r1
 188:	09 f4       	brne	.+2      	; 0x18c <GPIO_setupPinDirection+0x66>
 18a:	85 c0       	rjmp	.+266    	; 0x296 <GPIO_setupPinDirection+0x170>
 18c:	af c0       	rjmp	.+350    	; 0x2ec <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
 18e:	8b 81       	ldd	r24, Y+3	; 0x03
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	a1 f4       	brne	.+40     	; 0x1bc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
 194:	aa e3       	ldi	r26, 0x3A	; 58
 196:	b0 e0       	ldi	r27, 0x00	; 0
 198:	ea e3       	ldi	r30, 0x3A	; 58
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	48 2f       	mov	r20, r24
 1a0:	8a 81       	ldd	r24, Y+2	; 0x02
 1a2:	28 2f       	mov	r18, r24
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 2e       	mov	r0, r18
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <GPIO_setupPinDirection+0x8c>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	0a 94       	dec	r0
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <GPIO_setupPinDirection+0x88>
 1b6:	84 2b       	or	r24, r20
 1b8:	8c 93       	st	X, r24
 1ba:	98 c0       	rjmp	.+304    	; 0x2ec <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
 1bc:	aa e3       	ldi	r26, 0x3A	; 58
 1be:	b0 e0       	ldi	r27, 0x00	; 0
 1c0:	ea e3       	ldi	r30, 0x3A	; 58
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	48 2f       	mov	r20, r24
 1c8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ca:	28 2f       	mov	r18, r24
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 2e       	mov	r0, r18
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <GPIO_setupPinDirection+0xb4>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	0a 94       	dec	r0
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <GPIO_setupPinDirection+0xb0>
 1de:	80 95       	com	r24
 1e0:	84 23       	and	r24, r20
 1e2:	8c 93       	st	X, r24
 1e4:	83 c0       	rjmp	.+262    	; 0x2ec <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
 1e6:	8b 81       	ldd	r24, Y+3	; 0x03
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	a1 f4       	brne	.+40     	; 0x214 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
 1ec:	a7 e3       	ldi	r26, 0x37	; 55
 1ee:	b0 e0       	ldi	r27, 0x00	; 0
 1f0:	e7 e3       	ldi	r30, 0x37	; 55
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	48 2f       	mov	r20, r24
 1f8:	8a 81       	ldd	r24, Y+2	; 0x02
 1fa:	28 2f       	mov	r18, r24
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 2e       	mov	r0, r18
 204:	02 c0       	rjmp	.+4      	; 0x20a <GPIO_setupPinDirection+0xe4>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	0a 94       	dec	r0
 20c:	e2 f7       	brpl	.-8      	; 0x206 <GPIO_setupPinDirection+0xe0>
 20e:	84 2b       	or	r24, r20
 210:	8c 93       	st	X, r24
 212:	6c c0       	rjmp	.+216    	; 0x2ec <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
 214:	a7 e3       	ldi	r26, 0x37	; 55
 216:	b0 e0       	ldi	r27, 0x00	; 0
 218:	e7 e3       	ldi	r30, 0x37	; 55
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	48 2f       	mov	r20, r24
 220:	8a 81       	ldd	r24, Y+2	; 0x02
 222:	28 2f       	mov	r18, r24
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 2e       	mov	r0, r18
 22c:	02 c0       	rjmp	.+4      	; 0x232 <GPIO_setupPinDirection+0x10c>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	0a 94       	dec	r0
 234:	e2 f7       	brpl	.-8      	; 0x22e <GPIO_setupPinDirection+0x108>
 236:	80 95       	com	r24
 238:	84 23       	and	r24, r20
 23a:	8c 93       	st	X, r24
 23c:	57 c0       	rjmp	.+174    	; 0x2ec <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
 23e:	8b 81       	ldd	r24, Y+3	; 0x03
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	a1 f4       	brne	.+40     	; 0x26c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
 244:	a4 e3       	ldi	r26, 0x34	; 52
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	e4 e3       	ldi	r30, 0x34	; 52
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	48 2f       	mov	r20, r24
 250:	8a 81       	ldd	r24, Y+2	; 0x02
 252:	28 2f       	mov	r18, r24
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 2e       	mov	r0, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <GPIO_setupPinDirection+0x13c>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	0a 94       	dec	r0
 264:	e2 f7       	brpl	.-8      	; 0x25e <GPIO_setupPinDirection+0x138>
 266:	84 2b       	or	r24, r20
 268:	8c 93       	st	X, r24
 26a:	40 c0       	rjmp	.+128    	; 0x2ec <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 26c:	a4 e3       	ldi	r26, 0x34	; 52
 26e:	b0 e0       	ldi	r27, 0x00	; 0
 270:	e4 e3       	ldi	r30, 0x34	; 52
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	48 2f       	mov	r20, r24
 278:	8a 81       	ldd	r24, Y+2	; 0x02
 27a:	28 2f       	mov	r18, r24
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 2e       	mov	r0, r18
 284:	02 c0       	rjmp	.+4      	; 0x28a <GPIO_setupPinDirection+0x164>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	0a 94       	dec	r0
 28c:	e2 f7       	brpl	.-8      	; 0x286 <GPIO_setupPinDirection+0x160>
 28e:	80 95       	com	r24
 290:	84 23       	and	r24, r20
 292:	8c 93       	st	X, r24
 294:	2b c0       	rjmp	.+86     	; 0x2ec <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 296:	8b 81       	ldd	r24, Y+3	; 0x03
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	a1 f4       	brne	.+40     	; 0x2c4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
 29c:	a1 e3       	ldi	r26, 0x31	; 49
 29e:	b0 e0       	ldi	r27, 0x00	; 0
 2a0:	e1 e3       	ldi	r30, 0x31	; 49
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	48 2f       	mov	r20, r24
 2a8:	8a 81       	ldd	r24, Y+2	; 0x02
 2aa:	28 2f       	mov	r18, r24
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 2e       	mov	r0, r18
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <GPIO_setupPinDirection+0x194>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	0a 94       	dec	r0
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <GPIO_setupPinDirection+0x190>
 2be:	84 2b       	or	r24, r20
 2c0:	8c 93       	st	X, r24
 2c2:	14 c0       	rjmp	.+40     	; 0x2ec <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 2c4:	a1 e3       	ldi	r26, 0x31	; 49
 2c6:	b0 e0       	ldi	r27, 0x00	; 0
 2c8:	e1 e3       	ldi	r30, 0x31	; 49
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	80 81       	ld	r24, Z
 2ce:	48 2f       	mov	r20, r24
 2d0:	8a 81       	ldd	r24, Y+2	; 0x02
 2d2:	28 2f       	mov	r18, r24
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	02 2e       	mov	r0, r18
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <GPIO_setupPinDirection+0x1bc>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	0a 94       	dec	r0
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <GPIO_setupPinDirection+0x1b8>
 2e6:	80 95       	com	r24
 2e8:	84 23       	and	r24, r20
 2ea:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 2ec:	0f 90       	pop	r0
 2ee:	0f 90       	pop	r0
 2f0:	0f 90       	pop	r0
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	cf 91       	pop	r28
 2f8:	df 91       	pop	r29
 2fa:	08 95       	ret

000002fc <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
 2fc:	df 93       	push	r29
 2fe:	cf 93       	push	r28
 300:	00 d0       	rcall	.+0      	; 0x302 <GPIO_writePin+0x6>
 302:	00 d0       	rcall	.+0      	; 0x304 <GPIO_writePin+0x8>
 304:	0f 92       	push	r0
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
 30a:	89 83       	std	Y+1, r24	; 0x01
 30c:	6a 83       	std	Y+2, r22	; 0x02
 30e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 310:	8a 81       	ldd	r24, Y+2	; 0x02
 312:	88 30       	cpi	r24, 0x08	; 8
 314:	08 f0       	brcs	.+2      	; 0x318 <GPIO_writePin+0x1c>
 316:	d5 c0       	rjmp	.+426    	; 0x4c2 <GPIO_writePin+0x1c6>
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	84 30       	cpi	r24, 0x04	; 4
 31c:	08 f0       	brcs	.+2      	; 0x320 <GPIO_writePin+0x24>
 31e:	d1 c0       	rjmp	.+418    	; 0x4c2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
 320:	89 81       	ldd	r24, Y+1	; 0x01
 322:	28 2f       	mov	r18, r24
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	3d 83       	std	Y+5, r19	; 0x05
 328:	2c 83       	std	Y+4, r18	; 0x04
 32a:	8c 81       	ldd	r24, Y+4	; 0x04
 32c:	9d 81       	ldd	r25, Y+5	; 0x05
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	91 05       	cpc	r25, r1
 332:	09 f4       	brne	.+2      	; 0x336 <GPIO_writePin+0x3a>
 334:	43 c0       	rjmp	.+134    	; 0x3bc <GPIO_writePin+0xc0>
 336:	2c 81       	ldd	r18, Y+4	; 0x04
 338:	3d 81       	ldd	r19, Y+5	; 0x05
 33a:	22 30       	cpi	r18, 0x02	; 2
 33c:	31 05       	cpc	r19, r1
 33e:	2c f4       	brge	.+10     	; 0x34a <GPIO_writePin+0x4e>
 340:	8c 81       	ldd	r24, Y+4	; 0x04
 342:	9d 81       	ldd	r25, Y+5	; 0x05
 344:	00 97       	sbiw	r24, 0x00	; 0
 346:	71 f0       	breq	.+28     	; 0x364 <GPIO_writePin+0x68>
 348:	bc c0       	rjmp	.+376    	; 0x4c2 <GPIO_writePin+0x1c6>
 34a:	2c 81       	ldd	r18, Y+4	; 0x04
 34c:	3d 81       	ldd	r19, Y+5	; 0x05
 34e:	22 30       	cpi	r18, 0x02	; 2
 350:	31 05       	cpc	r19, r1
 352:	09 f4       	brne	.+2      	; 0x356 <GPIO_writePin+0x5a>
 354:	5f c0       	rjmp	.+190    	; 0x414 <GPIO_writePin+0x118>
 356:	8c 81       	ldd	r24, Y+4	; 0x04
 358:	9d 81       	ldd	r25, Y+5	; 0x05
 35a:	83 30       	cpi	r24, 0x03	; 3
 35c:	91 05       	cpc	r25, r1
 35e:	09 f4       	brne	.+2      	; 0x362 <GPIO_writePin+0x66>
 360:	85 c0       	rjmp	.+266    	; 0x46c <GPIO_writePin+0x170>
 362:	af c0       	rjmp	.+350    	; 0x4c2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
 364:	8b 81       	ldd	r24, Y+3	; 0x03
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	a1 f4       	brne	.+40     	; 0x392 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
 36a:	ab e3       	ldi	r26, 0x3B	; 59
 36c:	b0 e0       	ldi	r27, 0x00	; 0
 36e:	eb e3       	ldi	r30, 0x3B	; 59
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	80 81       	ld	r24, Z
 374:	48 2f       	mov	r20, r24
 376:	8a 81       	ldd	r24, Y+2	; 0x02
 378:	28 2f       	mov	r18, r24
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 2e       	mov	r0, r18
 382:	02 c0       	rjmp	.+4      	; 0x388 <GPIO_writePin+0x8c>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	0a 94       	dec	r0
 38a:	e2 f7       	brpl	.-8      	; 0x384 <GPIO_writePin+0x88>
 38c:	84 2b       	or	r24, r20
 38e:	8c 93       	st	X, r24
 390:	98 c0       	rjmp	.+304    	; 0x4c2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 392:	ab e3       	ldi	r26, 0x3B	; 59
 394:	b0 e0       	ldi	r27, 0x00	; 0
 396:	eb e3       	ldi	r30, 0x3B	; 59
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	48 2f       	mov	r20, r24
 39e:	8a 81       	ldd	r24, Y+2	; 0x02
 3a0:	28 2f       	mov	r18, r24
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 2e       	mov	r0, r18
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <GPIO_writePin+0xb4>
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	0a 94       	dec	r0
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <GPIO_writePin+0xb0>
 3b4:	80 95       	com	r24
 3b6:	84 23       	and	r24, r20
 3b8:	8c 93       	st	X, r24
 3ba:	83 c0       	rjmp	.+262    	; 0x4c2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
 3bc:	8b 81       	ldd	r24, Y+3	; 0x03
 3be:	81 30       	cpi	r24, 0x01	; 1
 3c0:	a1 f4       	brne	.+40     	; 0x3ea <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
 3c2:	a8 e3       	ldi	r26, 0x38	; 56
 3c4:	b0 e0       	ldi	r27, 0x00	; 0
 3c6:	e8 e3       	ldi	r30, 0x38	; 56
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	48 2f       	mov	r20, r24
 3ce:	8a 81       	ldd	r24, Y+2	; 0x02
 3d0:	28 2f       	mov	r18, r24
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 2e       	mov	r0, r18
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <GPIO_writePin+0xe4>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	0a 94       	dec	r0
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <GPIO_writePin+0xe0>
 3e4:	84 2b       	or	r24, r20
 3e6:	8c 93       	st	X, r24
 3e8:	6c c0       	rjmp	.+216    	; 0x4c2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
 3ea:	a8 e3       	ldi	r26, 0x38	; 56
 3ec:	b0 e0       	ldi	r27, 0x00	; 0
 3ee:	e8 e3       	ldi	r30, 0x38	; 56
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	48 2f       	mov	r20, r24
 3f6:	8a 81       	ldd	r24, Y+2	; 0x02
 3f8:	28 2f       	mov	r18, r24
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	02 2e       	mov	r0, r18
 402:	02 c0       	rjmp	.+4      	; 0x408 <GPIO_writePin+0x10c>
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	0a 94       	dec	r0
 40a:	e2 f7       	brpl	.-8      	; 0x404 <GPIO_writePin+0x108>
 40c:	80 95       	com	r24
 40e:	84 23       	and	r24, r20
 410:	8c 93       	st	X, r24
 412:	57 c0       	rjmp	.+174    	; 0x4c2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
 414:	8b 81       	ldd	r24, Y+3	; 0x03
 416:	81 30       	cpi	r24, 0x01	; 1
 418:	a1 f4       	brne	.+40     	; 0x442 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
 41a:	a5 e3       	ldi	r26, 0x35	; 53
 41c:	b0 e0       	ldi	r27, 0x00	; 0
 41e:	e5 e3       	ldi	r30, 0x35	; 53
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	48 2f       	mov	r20, r24
 426:	8a 81       	ldd	r24, Y+2	; 0x02
 428:	28 2f       	mov	r18, r24
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	02 2e       	mov	r0, r18
 432:	02 c0       	rjmp	.+4      	; 0x438 <GPIO_writePin+0x13c>
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	0a 94       	dec	r0
 43a:	e2 f7       	brpl	.-8      	; 0x434 <GPIO_writePin+0x138>
 43c:	84 2b       	or	r24, r20
 43e:	8c 93       	st	X, r24
 440:	40 c0       	rjmp	.+128    	; 0x4c2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
 442:	a5 e3       	ldi	r26, 0x35	; 53
 444:	b0 e0       	ldi	r27, 0x00	; 0
 446:	e5 e3       	ldi	r30, 0x35	; 53
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	48 2f       	mov	r20, r24
 44e:	8a 81       	ldd	r24, Y+2	; 0x02
 450:	28 2f       	mov	r18, r24
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	02 2e       	mov	r0, r18
 45a:	02 c0       	rjmp	.+4      	; 0x460 <GPIO_writePin+0x164>
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	0a 94       	dec	r0
 462:	e2 f7       	brpl	.-8      	; 0x45c <GPIO_writePin+0x160>
 464:	80 95       	com	r24
 466:	84 23       	and	r24, r20
 468:	8c 93       	st	X, r24
 46a:	2b c0       	rjmp	.+86     	; 0x4c2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
 46c:	8b 81       	ldd	r24, Y+3	; 0x03
 46e:	81 30       	cpi	r24, 0x01	; 1
 470:	a1 f4       	brne	.+40     	; 0x49a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
 472:	a2 e3       	ldi	r26, 0x32	; 50
 474:	b0 e0       	ldi	r27, 0x00	; 0
 476:	e2 e3       	ldi	r30, 0x32	; 50
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	48 2f       	mov	r20, r24
 47e:	8a 81       	ldd	r24, Y+2	; 0x02
 480:	28 2f       	mov	r18, r24
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	02 2e       	mov	r0, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <GPIO_writePin+0x194>
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	0a 94       	dec	r0
 492:	e2 f7       	brpl	.-8      	; 0x48c <GPIO_writePin+0x190>
 494:	84 2b       	or	r24, r20
 496:	8c 93       	st	X, r24
 498:	14 c0       	rjmp	.+40     	; 0x4c2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
 49a:	a2 e3       	ldi	r26, 0x32	; 50
 49c:	b0 e0       	ldi	r27, 0x00	; 0
 49e:	e2 e3       	ldi	r30, 0x32	; 50
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	80 81       	ld	r24, Z
 4a4:	48 2f       	mov	r20, r24
 4a6:	8a 81       	ldd	r24, Y+2	; 0x02
 4a8:	28 2f       	mov	r18, r24
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	02 2e       	mov	r0, r18
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <GPIO_writePin+0x1bc>
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	0a 94       	dec	r0
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <GPIO_writePin+0x1b8>
 4bc:	80 95       	com	r24
 4be:	84 23       	and	r24, r20
 4c0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 4c2:	0f 90       	pop	r0
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	0f 90       	pop	r0
 4ca:	0f 90       	pop	r0
 4cc:	cf 91       	pop	r28
 4ce:	df 91       	pop	r29
 4d0:	08 95       	ret

000004d2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
 4d2:	df 93       	push	r29
 4d4:	cf 93       	push	r28
 4d6:	00 d0       	rcall	.+0      	; 0x4d8 <GPIO_readPin+0x6>
 4d8:	00 d0       	rcall	.+0      	; 0x4da <GPIO_readPin+0x8>
 4da:	0f 92       	push	r0
 4dc:	cd b7       	in	r28, 0x3d	; 61
 4de:	de b7       	in	r29, 0x3e	; 62
 4e0:	8a 83       	std	Y+2, r24	; 0x02
 4e2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
 4e4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 4e6:	8b 81       	ldd	r24, Y+3	; 0x03
 4e8:	88 30       	cpi	r24, 0x08	; 8
 4ea:	08 f0       	brcs	.+2      	; 0x4ee <GPIO_readPin+0x1c>
 4ec:	84 c0       	rjmp	.+264    	; 0x5f6 <GPIO_readPin+0x124>
 4ee:	8a 81       	ldd	r24, Y+2	; 0x02
 4f0:	84 30       	cpi	r24, 0x04	; 4
 4f2:	08 f0       	brcs	.+2      	; 0x4f6 <GPIO_readPin+0x24>
 4f4:	80 c0       	rjmp	.+256    	; 0x5f6 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
 4f6:	8a 81       	ldd	r24, Y+2	; 0x02
 4f8:	28 2f       	mov	r18, r24
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	3d 83       	std	Y+5, r19	; 0x05
 4fe:	2c 83       	std	Y+4, r18	; 0x04
 500:	4c 81       	ldd	r20, Y+4	; 0x04
 502:	5d 81       	ldd	r21, Y+5	; 0x05
 504:	41 30       	cpi	r20, 0x01	; 1
 506:	51 05       	cpc	r21, r1
 508:	79 f1       	breq	.+94     	; 0x568 <GPIO_readPin+0x96>
 50a:	8c 81       	ldd	r24, Y+4	; 0x04
 50c:	9d 81       	ldd	r25, Y+5	; 0x05
 50e:	82 30       	cpi	r24, 0x02	; 2
 510:	91 05       	cpc	r25, r1
 512:	34 f4       	brge	.+12     	; 0x520 <GPIO_readPin+0x4e>
 514:	2c 81       	ldd	r18, Y+4	; 0x04
 516:	3d 81       	ldd	r19, Y+5	; 0x05
 518:	21 15       	cp	r18, r1
 51a:	31 05       	cpc	r19, r1
 51c:	69 f0       	breq	.+26     	; 0x538 <GPIO_readPin+0x66>
 51e:	6b c0       	rjmp	.+214    	; 0x5f6 <GPIO_readPin+0x124>
 520:	4c 81       	ldd	r20, Y+4	; 0x04
 522:	5d 81       	ldd	r21, Y+5	; 0x05
 524:	42 30       	cpi	r20, 0x02	; 2
 526:	51 05       	cpc	r21, r1
 528:	b9 f1       	breq	.+110    	; 0x598 <GPIO_readPin+0xc6>
 52a:	8c 81       	ldd	r24, Y+4	; 0x04
 52c:	9d 81       	ldd	r25, Y+5	; 0x05
 52e:	83 30       	cpi	r24, 0x03	; 3
 530:	91 05       	cpc	r25, r1
 532:	09 f4       	brne	.+2      	; 0x536 <GPIO_readPin+0x64>
 534:	49 c0       	rjmp	.+146    	; 0x5c8 <GPIO_readPin+0xf6>
 536:	5f c0       	rjmp	.+190    	; 0x5f6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
 538:	e9 e3       	ldi	r30, 0x39	; 57
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	28 2f       	mov	r18, r24
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	8b 81       	ldd	r24, Y+3	; 0x03
 544:	88 2f       	mov	r24, r24
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	a9 01       	movw	r20, r18
 54a:	02 c0       	rjmp	.+4      	; 0x550 <GPIO_readPin+0x7e>
 54c:	55 95       	asr	r21
 54e:	47 95       	ror	r20
 550:	8a 95       	dec	r24
 552:	e2 f7       	brpl	.-8      	; 0x54c <GPIO_readPin+0x7a>
 554:	ca 01       	movw	r24, r20
 556:	81 70       	andi	r24, 0x01	; 1
 558:	90 70       	andi	r25, 0x00	; 0
 55a:	88 23       	and	r24, r24
 55c:	19 f0       	breq	.+6      	; 0x564 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	89 83       	std	Y+1, r24	; 0x01
 562:	49 c0       	rjmp	.+146    	; 0x5f6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 564:	19 82       	std	Y+1, r1	; 0x01
 566:	47 c0       	rjmp	.+142    	; 0x5f6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
 568:	e6 e3       	ldi	r30, 0x36	; 54
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	80 81       	ld	r24, Z
 56e:	28 2f       	mov	r18, r24
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	8b 81       	ldd	r24, Y+3	; 0x03
 574:	88 2f       	mov	r24, r24
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	a9 01       	movw	r20, r18
 57a:	02 c0       	rjmp	.+4      	; 0x580 <GPIO_readPin+0xae>
 57c:	55 95       	asr	r21
 57e:	47 95       	ror	r20
 580:	8a 95       	dec	r24
 582:	e2 f7       	brpl	.-8      	; 0x57c <GPIO_readPin+0xaa>
 584:	ca 01       	movw	r24, r20
 586:	81 70       	andi	r24, 0x01	; 1
 588:	90 70       	andi	r25, 0x00	; 0
 58a:	88 23       	and	r24, r24
 58c:	19 f0       	breq	.+6      	; 0x594 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	89 83       	std	Y+1, r24	; 0x01
 592:	31 c0       	rjmp	.+98     	; 0x5f6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 594:	19 82       	std	Y+1, r1	; 0x01
 596:	2f c0       	rjmp	.+94     	; 0x5f6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
 598:	e3 e3       	ldi	r30, 0x33	; 51
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	80 81       	ld	r24, Z
 59e:	28 2f       	mov	r18, r24
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	8b 81       	ldd	r24, Y+3	; 0x03
 5a4:	88 2f       	mov	r24, r24
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	a9 01       	movw	r20, r18
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <GPIO_readPin+0xde>
 5ac:	55 95       	asr	r21
 5ae:	47 95       	ror	r20
 5b0:	8a 95       	dec	r24
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <GPIO_readPin+0xda>
 5b4:	ca 01       	movw	r24, r20
 5b6:	81 70       	andi	r24, 0x01	; 1
 5b8:	90 70       	andi	r25, 0x00	; 0
 5ba:	88 23       	and	r24, r24
 5bc:	19 f0       	breq	.+6      	; 0x5c4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	89 83       	std	Y+1, r24	; 0x01
 5c2:	19 c0       	rjmp	.+50     	; 0x5f6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 5c4:	19 82       	std	Y+1, r1	; 0x01
 5c6:	17 c0       	rjmp	.+46     	; 0x5f6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
 5c8:	e0 e3       	ldi	r30, 0x30	; 48
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	80 81       	ld	r24, Z
 5ce:	28 2f       	mov	r18, r24
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	8b 81       	ldd	r24, Y+3	; 0x03
 5d4:	88 2f       	mov	r24, r24
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	a9 01       	movw	r20, r18
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <GPIO_readPin+0x10e>
 5dc:	55 95       	asr	r21
 5de:	47 95       	ror	r20
 5e0:	8a 95       	dec	r24
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <GPIO_readPin+0x10a>
 5e4:	ca 01       	movw	r24, r20
 5e6:	81 70       	andi	r24, 0x01	; 1
 5e8:	90 70       	andi	r25, 0x00	; 0
 5ea:	88 23       	and	r24, r24
 5ec:	19 f0       	breq	.+6      	; 0x5f4 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	89 83       	std	Y+1, r24	; 0x01
 5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 5f4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
 5f6:	89 81       	ldd	r24, Y+1	; 0x01
}
 5f8:	0f 90       	pop	r0
 5fa:	0f 90       	pop	r0
 5fc:	0f 90       	pop	r0
 5fe:	0f 90       	pop	r0
 600:	0f 90       	pop	r0
 602:	cf 91       	pop	r28
 604:	df 91       	pop	r29
 606:	08 95       	ret

00000608 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
 608:	df 93       	push	r29
 60a:	cf 93       	push	r28
 60c:	00 d0       	rcall	.+0      	; 0x60e <GPIO_setupPortDirection+0x6>
 60e:	00 d0       	rcall	.+0      	; 0x610 <GPIO_setupPortDirection+0x8>
 610:	cd b7       	in	r28, 0x3d	; 61
 612:	de b7       	in	r29, 0x3e	; 62
 614:	89 83       	std	Y+1, r24	; 0x01
 616:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 618:	89 81       	ldd	r24, Y+1	; 0x01
 61a:	84 30       	cpi	r24, 0x04	; 4
 61c:	90 f5       	brcc	.+100    	; 0x682 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
 61e:	89 81       	ldd	r24, Y+1	; 0x01
 620:	28 2f       	mov	r18, r24
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	3c 83       	std	Y+4, r19	; 0x04
 626:	2b 83       	std	Y+3, r18	; 0x03
 628:	8b 81       	ldd	r24, Y+3	; 0x03
 62a:	9c 81       	ldd	r25, Y+4	; 0x04
 62c:	81 30       	cpi	r24, 0x01	; 1
 62e:	91 05       	cpc	r25, r1
 630:	d1 f0       	breq	.+52     	; 0x666 <GPIO_setupPortDirection+0x5e>
 632:	2b 81       	ldd	r18, Y+3	; 0x03
 634:	3c 81       	ldd	r19, Y+4	; 0x04
 636:	22 30       	cpi	r18, 0x02	; 2
 638:	31 05       	cpc	r19, r1
 63a:	2c f4       	brge	.+10     	; 0x646 <GPIO_setupPortDirection+0x3e>
 63c:	8b 81       	ldd	r24, Y+3	; 0x03
 63e:	9c 81       	ldd	r25, Y+4	; 0x04
 640:	00 97       	sbiw	r24, 0x00	; 0
 642:	61 f0       	breq	.+24     	; 0x65c <GPIO_setupPortDirection+0x54>
 644:	1e c0       	rjmp	.+60     	; 0x682 <GPIO_setupPortDirection+0x7a>
 646:	2b 81       	ldd	r18, Y+3	; 0x03
 648:	3c 81       	ldd	r19, Y+4	; 0x04
 64a:	22 30       	cpi	r18, 0x02	; 2
 64c:	31 05       	cpc	r19, r1
 64e:	81 f0       	breq	.+32     	; 0x670 <GPIO_setupPortDirection+0x68>
 650:	8b 81       	ldd	r24, Y+3	; 0x03
 652:	9c 81       	ldd	r25, Y+4	; 0x04
 654:	83 30       	cpi	r24, 0x03	; 3
 656:	91 05       	cpc	r25, r1
 658:	81 f0       	breq	.+32     	; 0x67a <GPIO_setupPortDirection+0x72>
 65a:	13 c0       	rjmp	.+38     	; 0x682 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
 65c:	ea e3       	ldi	r30, 0x3A	; 58
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	8a 81       	ldd	r24, Y+2	; 0x02
 662:	80 83       	st	Z, r24
 664:	0e c0       	rjmp	.+28     	; 0x682 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
 666:	e7 e3       	ldi	r30, 0x37	; 55
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	8a 81       	ldd	r24, Y+2	; 0x02
 66c:	80 83       	st	Z, r24
 66e:	09 c0       	rjmp	.+18     	; 0x682 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
 670:	e4 e3       	ldi	r30, 0x34	; 52
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	8a 81       	ldd	r24, Y+2	; 0x02
 676:	80 83       	st	Z, r24
 678:	04 c0       	rjmp	.+8      	; 0x682 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
 67a:	e1 e3       	ldi	r30, 0x31	; 49
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	8a 81       	ldd	r24, Y+2	; 0x02
 680:	80 83       	st	Z, r24
			break;
		}
	}
}
 682:	0f 90       	pop	r0
 684:	0f 90       	pop	r0
 686:	0f 90       	pop	r0
 688:	0f 90       	pop	r0
 68a:	cf 91       	pop	r28
 68c:	df 91       	pop	r29
 68e:	08 95       	ret

00000690 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
 690:	df 93       	push	r29
 692:	cf 93       	push	r28
 694:	00 d0       	rcall	.+0      	; 0x696 <GPIO_writePort+0x6>
 696:	00 d0       	rcall	.+0      	; 0x698 <GPIO_writePort+0x8>
 698:	cd b7       	in	r28, 0x3d	; 61
 69a:	de b7       	in	r29, 0x3e	; 62
 69c:	89 83       	std	Y+1, r24	; 0x01
 69e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 6a0:	89 81       	ldd	r24, Y+1	; 0x01
 6a2:	84 30       	cpi	r24, 0x04	; 4
 6a4:	90 f5       	brcc	.+100    	; 0x70a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
 6a6:	89 81       	ldd	r24, Y+1	; 0x01
 6a8:	28 2f       	mov	r18, r24
 6aa:	30 e0       	ldi	r19, 0x00	; 0
 6ac:	3c 83       	std	Y+4, r19	; 0x04
 6ae:	2b 83       	std	Y+3, r18	; 0x03
 6b0:	8b 81       	ldd	r24, Y+3	; 0x03
 6b2:	9c 81       	ldd	r25, Y+4	; 0x04
 6b4:	81 30       	cpi	r24, 0x01	; 1
 6b6:	91 05       	cpc	r25, r1
 6b8:	d1 f0       	breq	.+52     	; 0x6ee <GPIO_writePort+0x5e>
 6ba:	2b 81       	ldd	r18, Y+3	; 0x03
 6bc:	3c 81       	ldd	r19, Y+4	; 0x04
 6be:	22 30       	cpi	r18, 0x02	; 2
 6c0:	31 05       	cpc	r19, r1
 6c2:	2c f4       	brge	.+10     	; 0x6ce <GPIO_writePort+0x3e>
 6c4:	8b 81       	ldd	r24, Y+3	; 0x03
 6c6:	9c 81       	ldd	r25, Y+4	; 0x04
 6c8:	00 97       	sbiw	r24, 0x00	; 0
 6ca:	61 f0       	breq	.+24     	; 0x6e4 <GPIO_writePort+0x54>
 6cc:	1e c0       	rjmp	.+60     	; 0x70a <GPIO_writePort+0x7a>
 6ce:	2b 81       	ldd	r18, Y+3	; 0x03
 6d0:	3c 81       	ldd	r19, Y+4	; 0x04
 6d2:	22 30       	cpi	r18, 0x02	; 2
 6d4:	31 05       	cpc	r19, r1
 6d6:	81 f0       	breq	.+32     	; 0x6f8 <GPIO_writePort+0x68>
 6d8:	8b 81       	ldd	r24, Y+3	; 0x03
 6da:	9c 81       	ldd	r25, Y+4	; 0x04
 6dc:	83 30       	cpi	r24, 0x03	; 3
 6de:	91 05       	cpc	r25, r1
 6e0:	81 f0       	breq	.+32     	; 0x702 <GPIO_writePort+0x72>
 6e2:	13 c0       	rjmp	.+38     	; 0x70a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
 6e4:	eb e3       	ldi	r30, 0x3B	; 59
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ea:	80 83       	st	Z, r24
 6ec:	0e c0       	rjmp	.+28     	; 0x70a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
 6ee:	e8 e3       	ldi	r30, 0x38	; 56
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	8a 81       	ldd	r24, Y+2	; 0x02
 6f4:	80 83       	st	Z, r24
 6f6:	09 c0       	rjmp	.+18     	; 0x70a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
 6f8:	e5 e3       	ldi	r30, 0x35	; 53
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	8a 81       	ldd	r24, Y+2	; 0x02
 6fe:	80 83       	st	Z, r24
 700:	04 c0       	rjmp	.+8      	; 0x70a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
 702:	e2 e3       	ldi	r30, 0x32	; 50
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	8a 81       	ldd	r24, Y+2	; 0x02
 708:	80 83       	st	Z, r24
			break;
		}
	}
}
 70a:	0f 90       	pop	r0
 70c:	0f 90       	pop	r0
 70e:	0f 90       	pop	r0
 710:	0f 90       	pop	r0
 712:	cf 91       	pop	r28
 714:	df 91       	pop	r29
 716:	08 95       	ret

00000718 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
 718:	df 93       	push	r29
 71a:	cf 93       	push	r28
 71c:	00 d0       	rcall	.+0      	; 0x71e <GPIO_readPort+0x6>
 71e:	00 d0       	rcall	.+0      	; 0x720 <GPIO_readPort+0x8>
 720:	cd b7       	in	r28, 0x3d	; 61
 722:	de b7       	in	r29, 0x3e	; 62
 724:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
 726:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 728:	8a 81       	ldd	r24, Y+2	; 0x02
 72a:	84 30       	cpi	r24, 0x04	; 4
 72c:	90 f5       	brcc	.+100    	; 0x792 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
 72e:	8a 81       	ldd	r24, Y+2	; 0x02
 730:	28 2f       	mov	r18, r24
 732:	30 e0       	ldi	r19, 0x00	; 0
 734:	3c 83       	std	Y+4, r19	; 0x04
 736:	2b 83       	std	Y+3, r18	; 0x03
 738:	8b 81       	ldd	r24, Y+3	; 0x03
 73a:	9c 81       	ldd	r25, Y+4	; 0x04
 73c:	81 30       	cpi	r24, 0x01	; 1
 73e:	91 05       	cpc	r25, r1
 740:	d1 f0       	breq	.+52     	; 0x776 <GPIO_readPort+0x5e>
 742:	2b 81       	ldd	r18, Y+3	; 0x03
 744:	3c 81       	ldd	r19, Y+4	; 0x04
 746:	22 30       	cpi	r18, 0x02	; 2
 748:	31 05       	cpc	r19, r1
 74a:	2c f4       	brge	.+10     	; 0x756 <GPIO_readPort+0x3e>
 74c:	8b 81       	ldd	r24, Y+3	; 0x03
 74e:	9c 81       	ldd	r25, Y+4	; 0x04
 750:	00 97       	sbiw	r24, 0x00	; 0
 752:	61 f0       	breq	.+24     	; 0x76c <GPIO_readPort+0x54>
 754:	1e c0       	rjmp	.+60     	; 0x792 <GPIO_readPort+0x7a>
 756:	2b 81       	ldd	r18, Y+3	; 0x03
 758:	3c 81       	ldd	r19, Y+4	; 0x04
 75a:	22 30       	cpi	r18, 0x02	; 2
 75c:	31 05       	cpc	r19, r1
 75e:	81 f0       	breq	.+32     	; 0x780 <GPIO_readPort+0x68>
 760:	8b 81       	ldd	r24, Y+3	; 0x03
 762:	9c 81       	ldd	r25, Y+4	; 0x04
 764:	83 30       	cpi	r24, 0x03	; 3
 766:	91 05       	cpc	r25, r1
 768:	81 f0       	breq	.+32     	; 0x78a <GPIO_readPort+0x72>
 76a:	13 c0       	rjmp	.+38     	; 0x792 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
 76c:	e9 e3       	ldi	r30, 0x39	; 57
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	80 81       	ld	r24, Z
 772:	89 83       	std	Y+1, r24	; 0x01
 774:	0e c0       	rjmp	.+28     	; 0x792 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
 776:	e6 e3       	ldi	r30, 0x36	; 54
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	80 81       	ld	r24, Z
 77c:	89 83       	std	Y+1, r24	; 0x01
 77e:	09 c0       	rjmp	.+18     	; 0x792 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
 780:	e3 e3       	ldi	r30, 0x33	; 51
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	80 81       	ld	r24, Z
 786:	89 83       	std	Y+1, r24	; 0x01
 788:	04 c0       	rjmp	.+8      	; 0x792 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
 78a:	e0 e3       	ldi	r30, 0x30	; 48
 78c:	f0 e0       	ldi	r31, 0x00	; 0
 78e:	80 81       	ld	r24, Z
 790:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
 792:	89 81       	ldd	r24, Y+1	; 0x01
}
 794:	0f 90       	pop	r0
 796:	0f 90       	pop	r0
 798:	0f 90       	pop	r0
 79a:	0f 90       	pop	r0
 79c:	cf 91       	pop	r28
 79e:	df 91       	pop	r29
 7a0:	08 95       	ret

000007a2 <SevenSegment_INIT>:
 *      Author: Ahmed
 */
#include "SevenSegment.h"

void SevenSegment_INIT(void)
{
 7a2:	df 93       	push	r29
 7a4:	cf 93       	push	r28
 7a6:	cd b7       	in	r28, 0x3d	; 61
 7a8:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTA_ID, 0, OUTPUT);
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	60 e0       	ldi	r22, 0x00	; 0
 7ae:	41 e0       	ldi	r20, 0x01	; 1
 7b0:	0e 94 93 00 	call	0x126	; 0x126 <GPIO_setupPinDirection>
	GPIO_writePin(PORTA_ID, 0, LOGIC_HIGH);
 7b4:	80 e0       	ldi	r24, 0x00	; 0
 7b6:	60 e0       	ldi	r22, 0x00	; 0
 7b8:	41 e0       	ldi	r20, 0x01	; 1
 7ba:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_writePin>
	GPIO_setupPinDirection(PORTC_ID, 0, OUTPUT);
 7be:	82 e0       	ldi	r24, 0x02	; 2
 7c0:	60 e0       	ldi	r22, 0x00	; 0
 7c2:	41 e0       	ldi	r20, 0x01	; 1
 7c4:	0e 94 93 00 	call	0x126	; 0x126 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, 1, OUTPUT);
 7c8:	82 e0       	ldi	r24, 0x02	; 2
 7ca:	61 e0       	ldi	r22, 0x01	; 1
 7cc:	41 e0       	ldi	r20, 0x01	; 1
 7ce:	0e 94 93 00 	call	0x126	; 0x126 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, 2, OUTPUT);
 7d2:	82 e0       	ldi	r24, 0x02	; 2
 7d4:	62 e0       	ldi	r22, 0x02	; 2
 7d6:	41 e0       	ldi	r20, 0x01	; 1
 7d8:	0e 94 93 00 	call	0x126	; 0x126 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, 3, OUTPUT);
 7dc:	82 e0       	ldi	r24, 0x02	; 2
 7de:	63 e0       	ldi	r22, 0x03	; 3
 7e0:	41 e0       	ldi	r20, 0x01	; 1
 7e2:	0e 94 93 00 	call	0x126	; 0x126 <GPIO_setupPinDirection>
}
 7e6:	cf 91       	pop	r28
 7e8:	df 91       	pop	r29
 7ea:	08 95       	ret

000007ec <SevenSegment_writeNum>:

void SevenSegment_writeNum(unsigned char num)
{
 7ec:	df 93       	push	r29
 7ee:	cf 93       	push	r28
 7f0:	0f 92       	push	r0
 7f2:	cd b7       	in	r28, 0x3d	; 61
 7f4:	de b7       	in	r29, 0x3e	; 62
 7f6:	89 83       	std	Y+1, r24	; 0x01
	PORTC = (PORTC & 0xF0) | (num & 0x0F);
 7f8:	a5 e3       	ldi	r26, 0x35	; 53
 7fa:	b0 e0       	ldi	r27, 0x00	; 0
 7fc:	e5 e3       	ldi	r30, 0x35	; 53
 7fe:	f0 e0       	ldi	r31, 0x00	; 0
 800:	80 81       	ld	r24, Z
 802:	98 2f       	mov	r25, r24
 804:	90 7f       	andi	r25, 0xF0	; 240
 806:	89 81       	ldd	r24, Y+1	; 0x01
 808:	8f 70       	andi	r24, 0x0F	; 15
 80a:	89 2b       	or	r24, r25
 80c:	8c 93       	st	X, r24
}
 80e:	0f 90       	pop	r0
 810:	cf 91       	pop	r28
 812:	df 91       	pop	r29
 814:	08 95       	ret

00000816 <Led_Init>:
 */
#include "Led.h"
signed char time = 9 ;

void Led_Init(void)
{
 816:	df 93       	push	r29
 818:	cf 93       	push	r28
 81a:	cd b7       	in	r28, 0x3d	; 61
 81c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTD_ID, 0, OUTPUT);
 81e:	83 e0       	ldi	r24, 0x03	; 3
 820:	60 e0       	ldi	r22, 0x00	; 0
 822:	41 e0       	ldi	r20, 0x01	; 1
 824:	0e 94 93 00 	call	0x126	; 0x126 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID, 1, OUTPUT);
 828:	83 e0       	ldi	r24, 0x03	; 3
 82a:	61 e0       	ldi	r22, 0x01	; 1
 82c:	41 e0       	ldi	r20, 0x01	; 1
 82e:	0e 94 93 00 	call	0x126	; 0x126 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID, 2, OUTPUT);
 832:	83 e0       	ldi	r24, 0x03	; 3
 834:	62 e0       	ldi	r22, 0x02	; 2
 836:	41 e0       	ldi	r20, 0x01	; 1
 838:	0e 94 93 00 	call	0x126	; 0x126 <GPIO_setupPinDirection>

	GPIO_writePin(PORTD_ID, 0, LOGIC_LOW);
 83c:	83 e0       	ldi	r24, 0x03	; 3
 83e:	60 e0       	ldi	r22, 0x00	; 0
 840:	40 e0       	ldi	r20, 0x00	; 0
 842:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_writePin>
	GPIO_writePin(PORTD_ID, 1, LOGIC_LOW);
 846:	83 e0       	ldi	r24, 0x03	; 3
 848:	61 e0       	ldi	r22, 0x01	; 1
 84a:	40 e0       	ldi	r20, 0x00	; 0
 84c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_writePin>
	GPIO_writePin(PORTD_ID, 2, LOGIC_LOW);
 850:	83 e0       	ldi	r24, 0x03	; 3
 852:	62 e0       	ldi	r22, 0x02	; 2
 854:	40 e0       	ldi	r20, 0x00	; 0
 856:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_writePin>
}
 85a:	cf 91       	pop	r28
 85c:	df 91       	pop	r29
 85e:	08 95       	ret

00000860 <Led_Green>:
void Led_Green(void)
{
 860:	df 93       	push	r29
 862:	cf 93       	push	r28
 864:	cd b7       	in	r28, 0x3d	; 61
 866:	de b7       	in	r29, 0x3e	; 62
	time = 9;
 868:	89 e0       	ldi	r24, 0x09	; 9
 86a:	80 93 60 00 	sts	0x0060, r24
	GPIO_writePin(PORTD_ID, 0, LOGIC_HIGH);
 86e:	83 e0       	ldi	r24, 0x03	; 3
 870:	60 e0       	ldi	r22, 0x00	; 0
 872:	41 e0       	ldi	r20, 0x01	; 1
 874:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_writePin>
	GPIO_writePin(PORTD_ID, 1, LOGIC_LOW);
 878:	83 e0       	ldi	r24, 0x03	; 3
 87a:	61 e0       	ldi	r22, 0x01	; 1
 87c:	40 e0       	ldi	r20, 0x00	; 0
 87e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_writePin>
	GPIO_writePin(PORTD_ID, 2, LOGIC_LOW);
 882:	83 e0       	ldi	r24, 0x03	; 3
 884:	62 e0       	ldi	r22, 0x02	; 2
 886:	40 e0       	ldi	r20, 0x00	; 0
 888:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_writePin>
}
 88c:	cf 91       	pop	r28
 88e:	df 91       	pop	r29
 890:	08 95       	ret

00000892 <Led_Yellow>:

void Led_Yellow(void)
{
 892:	df 93       	push	r29
 894:	cf 93       	push	r28
 896:	cd b7       	in	r28, 0x3d	; 61
 898:	de b7       	in	r29, 0x3e	; 62
	time = 4;
 89a:	84 e0       	ldi	r24, 0x04	; 4
 89c:	80 93 60 00 	sts	0x0060, r24
	GPIO_writePin(PORTD_ID, 0, LOGIC_LOW);
 8a0:	83 e0       	ldi	r24, 0x03	; 3
 8a2:	60 e0       	ldi	r22, 0x00	; 0
 8a4:	40 e0       	ldi	r20, 0x00	; 0
 8a6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_writePin>
	GPIO_writePin(PORTD_ID, 1, LOGIC_HIGH);
 8aa:	83 e0       	ldi	r24, 0x03	; 3
 8ac:	61 e0       	ldi	r22, 0x01	; 1
 8ae:	41 e0       	ldi	r20, 0x01	; 1
 8b0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_writePin>
	GPIO_writePin(PORTD_ID, 2, LOGIC_LOW);
 8b4:	83 e0       	ldi	r24, 0x03	; 3
 8b6:	62 e0       	ldi	r22, 0x02	; 2
 8b8:	40 e0       	ldi	r20, 0x00	; 0
 8ba:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_writePin>
}
 8be:	cf 91       	pop	r28
 8c0:	df 91       	pop	r29
 8c2:	08 95       	ret

000008c4 <Led_Red>:

void Led_Red(void)
{
 8c4:	df 93       	push	r29
 8c6:	cf 93       	push	r28
 8c8:	cd b7       	in	r28, 0x3d	; 61
 8ca:	de b7       	in	r29, 0x3e	; 62
	time = 7;
 8cc:	87 e0       	ldi	r24, 0x07	; 7
 8ce:	80 93 60 00 	sts	0x0060, r24
	GPIO_writePin(PORTD_ID, 0, LOGIC_LOW);
 8d2:	83 e0       	ldi	r24, 0x03	; 3
 8d4:	60 e0       	ldi	r22, 0x00	; 0
 8d6:	40 e0       	ldi	r20, 0x00	; 0
 8d8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_writePin>
	GPIO_writePin(PORTD_ID, 1, LOGIC_LOW);
 8dc:	83 e0       	ldi	r24, 0x03	; 3
 8de:	61 e0       	ldi	r22, 0x01	; 1
 8e0:	40 e0       	ldi	r20, 0x00	; 0
 8e2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_writePin>
	GPIO_writePin(PORTD_ID, 2, LOGIC_HIGH);
 8e6:	83 e0       	ldi	r24, 0x03	; 3
 8e8:	62 e0       	ldi	r22, 0x02	; 2
 8ea:	41 e0       	ldi	r20, 0x01	; 1
 8ec:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_writePin>
}
 8f0:	cf 91       	pop	r28
 8f2:	df 91       	pop	r29
 8f4:	08 95       	ret

000008f6 <main>:

unsigned char led = 1;
extern signed char time;

int main(void)
{
 8f6:	df 93       	push	r29
 8f8:	cf 93       	push	r28
 8fa:	00 d0       	rcall	.+0      	; 0x8fc <main+0x6>
 8fc:	cd b7       	in	r28, 0x3d	; 61
 8fe:	de b7       	in	r29, 0x3e	; 62
	SevenSegment_INIT();
 900:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <SevenSegment_INIT>
	TIMER1_INIT();
 904:	0e 94 41 00 	call	0x82	; 0x82 <TIMER1_INIT>
	Led_Init();
 908:	0e 94 0b 04 	call	0x816	; 0x816 <Led_Init>
	Led_Green();
 90c:	0e 94 30 04 	call	0x860	; 0x860 <Led_Green>
	sei();
 910:	78 94       	sei
	while(1)
	{
		if(time >= 0)
 912:	80 91 60 00 	lds	r24, 0x0060
 916:	88 23       	and	r24, r24
 918:	2c f0       	brlt	.+10     	; 0x924 <main+0x2e>
		{
			SevenSegment_writeNum(time);
 91a:	80 91 60 00 	lds	r24, 0x0060
 91e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <SevenSegment_writeNum>
 922:	f7 cf       	rjmp	.-18     	; 0x912 <main+0x1c>
		}
		else
		{
			switch(led)
 924:	80 91 61 00 	lds	r24, 0x0061
 928:	28 2f       	mov	r18, r24
 92a:	30 e0       	ldi	r19, 0x00	; 0
 92c:	3a 83       	std	Y+2, r19	; 0x02
 92e:	29 83       	std	Y+1, r18	; 0x01
 930:	89 81       	ldd	r24, Y+1	; 0x01
 932:	9a 81       	ldd	r25, Y+2	; 0x02
 934:	81 30       	cpi	r24, 0x01	; 1
 936:	91 05       	cpc	r25, r1
 938:	61 f0       	breq	.+24     	; 0x952 <main+0x5c>
 93a:	29 81       	ldd	r18, Y+1	; 0x01
 93c:	3a 81       	ldd	r19, Y+2	; 0x02
 93e:	22 30       	cpi	r18, 0x02	; 2
 940:	31 05       	cpc	r19, r1
 942:	51 f0       	breq	.+20     	; 0x958 <main+0x62>
 944:	89 81       	ldd	r24, Y+1	; 0x01
 946:	9a 81       	ldd	r25, Y+2	; 0x02
 948:	00 97       	sbiw	r24, 0x00	; 0
 94a:	41 f4       	brne	.+16     	; 0x95c <main+0x66>
			{
				case 0: Led_Green(); break;
 94c:	0e 94 30 04 	call	0x860	; 0x860 <Led_Green>
 950:	05 c0       	rjmp	.+10     	; 0x95c <main+0x66>
				case 1:	Led_Yellow(); break;
 952:	0e 94 49 04 	call	0x892	; 0x892 <Led_Yellow>
 956:	02 c0       	rjmp	.+4      	; 0x95c <main+0x66>
				case 2:	Led_Red(); break;
 958:	0e 94 62 04 	call	0x8c4	; 0x8c4 <Led_Red>
			}
			led++;
 95c:	80 91 61 00 	lds	r24, 0x0061
 960:	8f 5f       	subi	r24, 0xFF	; 255
 962:	80 93 61 00 	sts	0x0061, r24
			if(led > 2)
 966:	80 91 61 00 	lds	r24, 0x0061
 96a:	83 30       	cpi	r24, 0x03	; 3
 96c:	90 f2       	brcs	.-92     	; 0x912 <main+0x1c>
			{
				led = 0;
 96e:	10 92 61 00 	sts	0x0061, r1
 972:	cf cf       	rjmp	.-98     	; 0x912 <main+0x1c>

00000974 <_exit>:
 974:	f8 94       	cli

00000976 <__stop_program>:
 976:	ff cf       	rjmp	.-2      	; 0x976 <__stop_program>
