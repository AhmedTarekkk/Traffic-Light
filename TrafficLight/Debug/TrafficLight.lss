
TrafficLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000029e4  00002a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800078  00800078  00002a90  2**0
                  ALLOC
  3 .stab         00002460  00000000  00000000  00002a90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001063  00000000  00000000  00004ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005f53  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006093  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006203  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008d37  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a69f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 37       	cpi	r26, 0x7B	; 123
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1c 14 	call	0x2838	; 0x2838 <main>
      8a:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e6       	ldi	r26, 0x6F	; 111
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9c 14 	jmp	0x2938	; 0x2938 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9c 14 	jmp	0x2938	; 0x2938 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e6       	ldi	r24, 0x6F	; 111
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9c 14 	jmp	0x2938	; 0x2938 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9c 14 	jmp	0x2938	; 0x2938 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9c 14 	jmp	0x2938	; 0x2938 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER1_INIT>:
#include "avr/io.h"

static void(*CallBackPtr)(void);

void TIMER1_INIT(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1A,FOC1B);
     b4e:	af e4       	ldi	r26, 0x4F	; 79
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e4       	ldi	r30, 0x4F	; 79
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	84 60       	ori	r24, 0x04	; 4
     b5a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
     b5c:	ae e4       	ldi	r26, 0x4E	; 78
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ee e4       	ldi	r30, 0x4E	; 78
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	88 60       	ori	r24, 0x08	; 8
     b68:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
     b6a:	ae e4       	ldi	r26, 0x4E	; 78
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ee e4       	ldi	r30, 0x4E	; 78
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 61       	ori	r24, 0x10	; 16
     b76:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS12);
     b78:	ae e4       	ldi	r26, 0x4E	; 78
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	ee e4       	ldi	r30, 0x4E	; 78
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	84 60       	ori	r24, 0x04	; 4
     b84:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS10);
     b86:	ae e4       	ldi	r26, 0x4E	; 78
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	ee e4       	ldi	r30, 0x4E	; 78
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	81 60       	ori	r24, 0x01	; 1
     b92:	8c 93       	st	X, r24

	TCNT1 = 0;
     b94:	ec e4       	ldi	r30, 0x4C	; 76
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	11 82       	std	Z+1, r1	; 0x01
     b9a:	10 82       	st	Z, r1
	ICR1 = 975;
     b9c:	e6 e4       	ldi	r30, 0x46	; 70
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	8f ec       	ldi	r24, 0xCF	; 207
     ba2:	93 e0       	ldi	r25, 0x03	; 3
     ba4:	91 83       	std	Z+1, r25	; 0x01
     ba6:	80 83       	st	Z, r24

	SET_BIT(TIMSK,OCIE1B);
     ba8:	a9 e5       	ldi	r26, 0x59	; 89
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	e9 e5       	ldi	r30, 0x59	; 89
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	88 60       	ori	r24, 0x08	; 8
     bb4:	8c 93       	st	X, r24
}
     bb6:	cf 91       	pop	r28
     bb8:	df 91       	pop	r29
     bba:	08 95       	ret

00000bbc <__vector_8>:

void __vector_8(void) __attribute__((signal,used));

void __vector_8(void){
     bbc:	1f 92       	push	r1
     bbe:	0f 92       	push	r0
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	0f 92       	push	r0
     bc4:	11 24       	eor	r1, r1
     bc6:	2f 93       	push	r18
     bc8:	3f 93       	push	r19
     bca:	4f 93       	push	r20
     bcc:	5f 93       	push	r21
     bce:	6f 93       	push	r22
     bd0:	7f 93       	push	r23
     bd2:	8f 93       	push	r24
     bd4:	9f 93       	push	r25
     bd6:	af 93       	push	r26
     bd8:	bf 93       	push	r27
     bda:	ef 93       	push	r30
     bdc:	ff 93       	push	r31
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62

	CallBackPtr();
     be6:	e0 91 78 00 	lds	r30, 0x0078
     bea:	f0 91 79 00 	lds	r31, 0x0079
     bee:	09 95       	icall

}
     bf0:	cf 91       	pop	r28
     bf2:	df 91       	pop	r29
     bf4:	ff 91       	pop	r31
     bf6:	ef 91       	pop	r30
     bf8:	bf 91       	pop	r27
     bfa:	af 91       	pop	r26
     bfc:	9f 91       	pop	r25
     bfe:	8f 91       	pop	r24
     c00:	7f 91       	pop	r23
     c02:	6f 91       	pop	r22
     c04:	5f 91       	pop	r21
     c06:	4f 91       	pop	r20
     c08:	3f 91       	pop	r19
     c0a:	2f 91       	pop	r18
     c0c:	0f 90       	pop	r0
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	0f 90       	pop	r0
     c12:	1f 90       	pop	r1
     c14:	18 95       	reti

00000c16 <TIMER1_SetCallBack>:

void TIMER1_SetCallBack(void (*Ptr)(void))
{
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	00 d0       	rcall	.+0      	; 0xc1c <TIMER1_SetCallBack+0x6>
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	9a 83       	std	Y+2, r25	; 0x02
     c22:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr = Ptr ;
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	9a 81       	ldd	r25, Y+2	; 0x02
     c28:	90 93 79 00 	sts	0x0079, r25
     c2c:	80 93 78 00 	sts	0x0078, r24
}
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <GPIO_setupPinDirection+0x6>
     c40:	00 d0       	rcall	.+0      	; 0xc42 <GPIO_setupPinDirection+0x8>
     c42:	0f 92       	push	r0
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	89 83       	std	Y+1, r24	; 0x01
     c4a:	6a 83       	std	Y+2, r22	; 0x02
     c4c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     c4e:	8a 81       	ldd	r24, Y+2	; 0x02
     c50:	88 30       	cpi	r24, 0x08	; 8
     c52:	08 f0       	brcs	.+2      	; 0xc56 <GPIO_setupPinDirection+0x1c>
     c54:	d5 c0       	rjmp	.+426    	; 0xe00 <GPIO_setupPinDirection+0x1c6>
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	84 30       	cpi	r24, 0x04	; 4
     c5a:	08 f0       	brcs	.+2      	; 0xc5e <GPIO_setupPinDirection+0x24>
     c5c:	d1 c0       	rjmp	.+418    	; 0xe00 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	28 2f       	mov	r18, r24
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	3d 83       	std	Y+5, r19	; 0x05
     c66:	2c 83       	std	Y+4, r18	; 0x04
     c68:	8c 81       	ldd	r24, Y+4	; 0x04
     c6a:	9d 81       	ldd	r25, Y+5	; 0x05
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	91 05       	cpc	r25, r1
     c70:	09 f4       	brne	.+2      	; 0xc74 <GPIO_setupPinDirection+0x3a>
     c72:	43 c0       	rjmp	.+134    	; 0xcfa <GPIO_setupPinDirection+0xc0>
     c74:	2c 81       	ldd	r18, Y+4	; 0x04
     c76:	3d 81       	ldd	r19, Y+5	; 0x05
     c78:	22 30       	cpi	r18, 0x02	; 2
     c7a:	31 05       	cpc	r19, r1
     c7c:	2c f4       	brge	.+10     	; 0xc88 <GPIO_setupPinDirection+0x4e>
     c7e:	8c 81       	ldd	r24, Y+4	; 0x04
     c80:	9d 81       	ldd	r25, Y+5	; 0x05
     c82:	00 97       	sbiw	r24, 0x00	; 0
     c84:	71 f0       	breq	.+28     	; 0xca2 <GPIO_setupPinDirection+0x68>
     c86:	bc c0       	rjmp	.+376    	; 0xe00 <GPIO_setupPinDirection+0x1c6>
     c88:	2c 81       	ldd	r18, Y+4	; 0x04
     c8a:	3d 81       	ldd	r19, Y+5	; 0x05
     c8c:	22 30       	cpi	r18, 0x02	; 2
     c8e:	31 05       	cpc	r19, r1
     c90:	09 f4       	brne	.+2      	; 0xc94 <GPIO_setupPinDirection+0x5a>
     c92:	5f c0       	rjmp	.+190    	; 0xd52 <GPIO_setupPinDirection+0x118>
     c94:	8c 81       	ldd	r24, Y+4	; 0x04
     c96:	9d 81       	ldd	r25, Y+5	; 0x05
     c98:	83 30       	cpi	r24, 0x03	; 3
     c9a:	91 05       	cpc	r25, r1
     c9c:	09 f4       	brne	.+2      	; 0xca0 <GPIO_setupPinDirection+0x66>
     c9e:	85 c0       	rjmp	.+266    	; 0xdaa <GPIO_setupPinDirection+0x170>
     ca0:	af c0       	rjmp	.+350    	; 0xe00 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     ca2:	8b 81       	ldd	r24, Y+3	; 0x03
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	a1 f4       	brne	.+40     	; 0xcd0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     ca8:	aa e3       	ldi	r26, 0x3A	; 58
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	ea e3       	ldi	r30, 0x3A	; 58
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	48 2f       	mov	r20, r24
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	02 2e       	mov	r0, r18
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <GPIO_setupPinDirection+0x8c>
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	0a 94       	dec	r0
     cc8:	e2 f7       	brpl	.-8      	; 0xcc2 <GPIO_setupPinDirection+0x88>
     cca:	84 2b       	or	r24, r20
     ccc:	8c 93       	st	X, r24
     cce:	98 c0       	rjmp	.+304    	; 0xe00 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     cd0:	aa e3       	ldi	r26, 0x3A	; 58
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	ea e3       	ldi	r30, 0x3A	; 58
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	48 2f       	mov	r20, r24
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	28 2f       	mov	r18, r24
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	02 2e       	mov	r0, r18
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <GPIO_setupPinDirection+0xb4>
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	0a 94       	dec	r0
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <GPIO_setupPinDirection+0xb0>
     cf2:	80 95       	com	r24
     cf4:	84 23       	and	r24, r20
     cf6:	8c 93       	st	X, r24
     cf8:	83 c0       	rjmp	.+262    	; 0xe00 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	a1 f4       	brne	.+40     	; 0xd28 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     d00:	a7 e3       	ldi	r26, 0x37	; 55
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e7 e3       	ldi	r30, 0x37	; 55
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	48 2f       	mov	r20, r24
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	02 2e       	mov	r0, r18
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <GPIO_setupPinDirection+0xe4>
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	0a 94       	dec	r0
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <GPIO_setupPinDirection+0xe0>
     d22:	84 2b       	or	r24, r20
     d24:	8c 93       	st	X, r24
     d26:	6c c0       	rjmp	.+216    	; 0xe00 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     d28:	a7 e3       	ldi	r26, 0x37	; 55
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e7 e3       	ldi	r30, 0x37	; 55
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	48 2f       	mov	r20, r24
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 2e       	mov	r0, r18
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <GPIO_setupPinDirection+0x10c>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	0a 94       	dec	r0
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <GPIO_setupPinDirection+0x108>
     d4a:	80 95       	com	r24
     d4c:	84 23       	and	r24, r20
     d4e:	8c 93       	st	X, r24
     d50:	57 c0       	rjmp	.+174    	; 0xe00 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	a1 f4       	brne	.+40     	; 0xd80 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     d58:	a4 e3       	ldi	r26, 0x34	; 52
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e4 e3       	ldi	r30, 0x34	; 52
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	48 2f       	mov	r20, r24
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	02 2e       	mov	r0, r18
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <GPIO_setupPinDirection+0x13c>
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	0a 94       	dec	r0
     d78:	e2 f7       	brpl	.-8      	; 0xd72 <GPIO_setupPinDirection+0x138>
     d7a:	84 2b       	or	r24, r20
     d7c:	8c 93       	st	X, r24
     d7e:	40 c0       	rjmp	.+128    	; 0xe00 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     d80:	a4 e3       	ldi	r26, 0x34	; 52
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e4 e3       	ldi	r30, 0x34	; 52
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	48 2f       	mov	r20, r24
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	02 2e       	mov	r0, r18
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <GPIO_setupPinDirection+0x164>
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	0a 94       	dec	r0
     da0:	e2 f7       	brpl	.-8      	; 0xd9a <GPIO_setupPinDirection+0x160>
     da2:	80 95       	com	r24
     da4:	84 23       	and	r24, r20
     da6:	8c 93       	st	X, r24
     da8:	2b c0       	rjmp	.+86     	; 0xe00 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	a1 f4       	brne	.+40     	; 0xdd8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     db0:	a1 e3       	ldi	r26, 0x31	; 49
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e1 e3       	ldi	r30, 0x31	; 49
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	48 2f       	mov	r20, r24
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	02 2e       	mov	r0, r18
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <GPIO_setupPinDirection+0x194>
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	0a 94       	dec	r0
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <GPIO_setupPinDirection+0x190>
     dd2:	84 2b       	or	r24, r20
     dd4:	8c 93       	st	X, r24
     dd6:	14 c0       	rjmp	.+40     	; 0xe00 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     dd8:	a1 e3       	ldi	r26, 0x31	; 49
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e1 e3       	ldi	r30, 0x31	; 49
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	48 2f       	mov	r20, r24
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 2e       	mov	r0, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <GPIO_setupPinDirection+0x1bc>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	0a 94       	dec	r0
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <GPIO_setupPinDirection+0x1b8>
     dfa:	80 95       	com	r24
     dfc:	84 23       	and	r24, r20
     dfe:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	cf 91       	pop	r28
     e0c:	df 91       	pop	r29
     e0e:	08 95       	ret

00000e10 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	00 d0       	rcall	.+0      	; 0xe16 <GPIO_writePin+0x6>
     e16:	00 d0       	rcall	.+0      	; 0xe18 <GPIO_writePin+0x8>
     e18:	0f 92       	push	r0
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	89 83       	std	Y+1, r24	; 0x01
     e20:	6a 83       	std	Y+2, r22	; 0x02
     e22:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	88 30       	cpi	r24, 0x08	; 8
     e28:	08 f0       	brcs	.+2      	; 0xe2c <GPIO_writePin+0x1c>
     e2a:	d5 c0       	rjmp	.+426    	; 0xfd6 <GPIO_writePin+0x1c6>
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	84 30       	cpi	r24, 0x04	; 4
     e30:	08 f0       	brcs	.+2      	; 0xe34 <GPIO_writePin+0x24>
     e32:	d1 c0       	rjmp	.+418    	; 0xfd6 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	3d 83       	std	Y+5, r19	; 0x05
     e3c:	2c 83       	std	Y+4, r18	; 0x04
     e3e:	8c 81       	ldd	r24, Y+4	; 0x04
     e40:	9d 81       	ldd	r25, Y+5	; 0x05
     e42:	81 30       	cpi	r24, 0x01	; 1
     e44:	91 05       	cpc	r25, r1
     e46:	09 f4       	brne	.+2      	; 0xe4a <GPIO_writePin+0x3a>
     e48:	43 c0       	rjmp	.+134    	; 0xed0 <GPIO_writePin+0xc0>
     e4a:	2c 81       	ldd	r18, Y+4	; 0x04
     e4c:	3d 81       	ldd	r19, Y+5	; 0x05
     e4e:	22 30       	cpi	r18, 0x02	; 2
     e50:	31 05       	cpc	r19, r1
     e52:	2c f4       	brge	.+10     	; 0xe5e <GPIO_writePin+0x4e>
     e54:	8c 81       	ldd	r24, Y+4	; 0x04
     e56:	9d 81       	ldd	r25, Y+5	; 0x05
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	71 f0       	breq	.+28     	; 0xe78 <GPIO_writePin+0x68>
     e5c:	bc c0       	rjmp	.+376    	; 0xfd6 <GPIO_writePin+0x1c6>
     e5e:	2c 81       	ldd	r18, Y+4	; 0x04
     e60:	3d 81       	ldd	r19, Y+5	; 0x05
     e62:	22 30       	cpi	r18, 0x02	; 2
     e64:	31 05       	cpc	r19, r1
     e66:	09 f4       	brne	.+2      	; 0xe6a <GPIO_writePin+0x5a>
     e68:	5f c0       	rjmp	.+190    	; 0xf28 <GPIO_writePin+0x118>
     e6a:	8c 81       	ldd	r24, Y+4	; 0x04
     e6c:	9d 81       	ldd	r25, Y+5	; 0x05
     e6e:	83 30       	cpi	r24, 0x03	; 3
     e70:	91 05       	cpc	r25, r1
     e72:	09 f4       	brne	.+2      	; 0xe76 <GPIO_writePin+0x66>
     e74:	85 c0       	rjmp	.+266    	; 0xf80 <GPIO_writePin+0x170>
     e76:	af c0       	rjmp	.+350    	; 0xfd6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	a1 f4       	brne	.+40     	; 0xea6 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     e7e:	ab e3       	ldi	r26, 0x3B	; 59
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	eb e3       	ldi	r30, 0x3B	; 59
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	48 2f       	mov	r20, r24
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 2e       	mov	r0, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <GPIO_writePin+0x8c>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <GPIO_writePin+0x88>
     ea0:	84 2b       	or	r24, r20
     ea2:	8c 93       	st	X, r24
     ea4:	98 c0       	rjmp	.+304    	; 0xfd6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     ea6:	ab e3       	ldi	r26, 0x3B	; 59
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	eb e3       	ldi	r30, 0x3B	; 59
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	48 2f       	mov	r20, r24
     eb2:	8a 81       	ldd	r24, Y+2	; 0x02
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 2e       	mov	r0, r18
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <GPIO_writePin+0xb4>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	0a 94       	dec	r0
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <GPIO_writePin+0xb0>
     ec8:	80 95       	com	r24
     eca:	84 23       	and	r24, r20
     ecc:	8c 93       	st	X, r24
     ece:	83 c0       	rjmp	.+262    	; 0xfd6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	a1 f4       	brne	.+40     	; 0xefe <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     ed6:	a8 e3       	ldi	r26, 0x38	; 56
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e8 e3       	ldi	r30, 0x38	; 56
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 2e       	mov	r0, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <GPIO_writePin+0xe4>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <GPIO_writePin+0xe0>
     ef8:	84 2b       	or	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	6c c0       	rjmp	.+216    	; 0xfd6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     efe:	a8 e3       	ldi	r26, 0x38	; 56
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e8 e3       	ldi	r30, 0x38	; 56
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <GPIO_writePin+0x10c>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <GPIO_writePin+0x108>
     f20:	80 95       	com	r24
     f22:	84 23       	and	r24, r20
     f24:	8c 93       	st	X, r24
     f26:	57 c0       	rjmp	.+174    	; 0xfd6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	81 30       	cpi	r24, 0x01	; 1
     f2c:	a1 f4       	brne	.+40     	; 0xf56 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     f2e:	a5 e3       	ldi	r26, 0x35	; 53
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e5 e3       	ldi	r30, 0x35	; 53
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	48 2f       	mov	r20, r24
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	02 2e       	mov	r0, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <GPIO_writePin+0x13c>
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	0a 94       	dec	r0
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <GPIO_writePin+0x138>
     f50:	84 2b       	or	r24, r20
     f52:	8c 93       	st	X, r24
     f54:	40 c0       	rjmp	.+128    	; 0xfd6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     f56:	a5 e3       	ldi	r26, 0x35	; 53
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e5 e3       	ldi	r30, 0x35	; 53
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	48 2f       	mov	r20, r24
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 2e       	mov	r0, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <GPIO_writePin+0x164>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <GPIO_writePin+0x160>
     f78:	80 95       	com	r24
     f7a:	84 23       	and	r24, r20
     f7c:	8c 93       	st	X, r24
     f7e:	2b c0       	rjmp	.+86     	; 0xfd6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	a1 f4       	brne	.+40     	; 0xfae <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     f86:	a2 e3       	ldi	r26, 0x32	; 50
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e2 e3       	ldi	r30, 0x32	; 50
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <GPIO_writePin+0x194>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <GPIO_writePin+0x190>
     fa8:	84 2b       	or	r24, r20
     faa:	8c 93       	st	X, r24
     fac:	14 c0       	rjmp	.+40     	; 0xfd6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     fae:	a2 e3       	ldi	r26, 0x32	; 50
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e2 e3       	ldi	r30, 0x32	; 50
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <GPIO_writePin+0x1bc>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <GPIO_writePin+0x1b8>
     fd0:	80 95       	com	r24
     fd2:	84 23       	and	r24, r20
     fd4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	00 d0       	rcall	.+0      	; 0xfec <GPIO_readPin+0x6>
     fec:	00 d0       	rcall	.+0      	; 0xfee <GPIO_readPin+0x8>
     fee:	0f 92       	push	r0
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	8a 83       	std	Y+2, r24	; 0x02
     ff6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     ff8:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	88 30       	cpi	r24, 0x08	; 8
     ffe:	08 f0       	brcs	.+2      	; 0x1002 <GPIO_readPin+0x1c>
    1000:	84 c0       	rjmp	.+264    	; 0x110a <GPIO_readPin+0x124>
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	84 30       	cpi	r24, 0x04	; 4
    1006:	08 f0       	brcs	.+2      	; 0x100a <GPIO_readPin+0x24>
    1008:	80 c0       	rjmp	.+256    	; 0x110a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	3d 83       	std	Y+5, r19	; 0x05
    1012:	2c 83       	std	Y+4, r18	; 0x04
    1014:	4c 81       	ldd	r20, Y+4	; 0x04
    1016:	5d 81       	ldd	r21, Y+5	; 0x05
    1018:	41 30       	cpi	r20, 0x01	; 1
    101a:	51 05       	cpc	r21, r1
    101c:	79 f1       	breq	.+94     	; 0x107c <GPIO_readPin+0x96>
    101e:	8c 81       	ldd	r24, Y+4	; 0x04
    1020:	9d 81       	ldd	r25, Y+5	; 0x05
    1022:	82 30       	cpi	r24, 0x02	; 2
    1024:	91 05       	cpc	r25, r1
    1026:	34 f4       	brge	.+12     	; 0x1034 <GPIO_readPin+0x4e>
    1028:	2c 81       	ldd	r18, Y+4	; 0x04
    102a:	3d 81       	ldd	r19, Y+5	; 0x05
    102c:	21 15       	cp	r18, r1
    102e:	31 05       	cpc	r19, r1
    1030:	69 f0       	breq	.+26     	; 0x104c <GPIO_readPin+0x66>
    1032:	6b c0       	rjmp	.+214    	; 0x110a <GPIO_readPin+0x124>
    1034:	4c 81       	ldd	r20, Y+4	; 0x04
    1036:	5d 81       	ldd	r21, Y+5	; 0x05
    1038:	42 30       	cpi	r20, 0x02	; 2
    103a:	51 05       	cpc	r21, r1
    103c:	b9 f1       	breq	.+110    	; 0x10ac <GPIO_readPin+0xc6>
    103e:	8c 81       	ldd	r24, Y+4	; 0x04
    1040:	9d 81       	ldd	r25, Y+5	; 0x05
    1042:	83 30       	cpi	r24, 0x03	; 3
    1044:	91 05       	cpc	r25, r1
    1046:	09 f4       	brne	.+2      	; 0x104a <GPIO_readPin+0x64>
    1048:	49 c0       	rjmp	.+146    	; 0x10dc <GPIO_readPin+0xf6>
    104a:	5f c0       	rjmp	.+190    	; 0x110a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    104c:	e9 e3       	ldi	r30, 0x39	; 57
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	88 2f       	mov	r24, r24
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	a9 01       	movw	r20, r18
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <GPIO_readPin+0x7e>
    1060:	55 95       	asr	r21
    1062:	47 95       	ror	r20
    1064:	8a 95       	dec	r24
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <GPIO_readPin+0x7a>
    1068:	ca 01       	movw	r24, r20
    106a:	81 70       	andi	r24, 0x01	; 1
    106c:	90 70       	andi	r25, 0x00	; 0
    106e:	88 23       	and	r24, r24
    1070:	19 f0       	breq	.+6      	; 0x1078 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	49 c0       	rjmp	.+146    	; 0x110a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1078:	19 82       	std	Y+1, r1	; 0x01
    107a:	47 c0       	rjmp	.+142    	; 0x110a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    107c:	e6 e3       	ldi	r30, 0x36	; 54
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	88 2f       	mov	r24, r24
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	a9 01       	movw	r20, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <GPIO_readPin+0xae>
    1090:	55 95       	asr	r21
    1092:	47 95       	ror	r20
    1094:	8a 95       	dec	r24
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <GPIO_readPin+0xaa>
    1098:	ca 01       	movw	r24, r20
    109a:	81 70       	andi	r24, 0x01	; 1
    109c:	90 70       	andi	r25, 0x00	; 0
    109e:	88 23       	and	r24, r24
    10a0:	19 f0       	breq	.+6      	; 0x10a8 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	31 c0       	rjmp	.+98     	; 0x110a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10a8:	19 82       	std	Y+1, r1	; 0x01
    10aa:	2f c0       	rjmp	.+94     	; 0x110a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    10ac:	e3 e3       	ldi	r30, 0x33	; 51
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	88 2f       	mov	r24, r24
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	a9 01       	movw	r20, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <GPIO_readPin+0xde>
    10c0:	55 95       	asr	r21
    10c2:	47 95       	ror	r20
    10c4:	8a 95       	dec	r24
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <GPIO_readPin+0xda>
    10c8:	ca 01       	movw	r24, r20
    10ca:	81 70       	andi	r24, 0x01	; 1
    10cc:	90 70       	andi	r25, 0x00	; 0
    10ce:	88 23       	and	r24, r24
    10d0:	19 f0       	breq	.+6      	; 0x10d8 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	89 83       	std	Y+1, r24	; 0x01
    10d6:	19 c0       	rjmp	.+50     	; 0x110a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10d8:	19 82       	std	Y+1, r1	; 0x01
    10da:	17 c0       	rjmp	.+46     	; 0x110a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    10dc:	e0 e3       	ldi	r30, 0x30	; 48
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	a9 01       	movw	r20, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <GPIO_readPin+0x10e>
    10f0:	55 95       	asr	r21
    10f2:	47 95       	ror	r20
    10f4:	8a 95       	dec	r24
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <GPIO_readPin+0x10a>
    10f8:	ca 01       	movw	r24, r20
    10fa:	81 70       	andi	r24, 0x01	; 1
    10fc:	90 70       	andi	r25, 0x00	; 0
    10fe:	88 23       	and	r24, r24
    1100:	19 f0       	breq	.+6      	; 0x1108 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	01 c0       	rjmp	.+2      	; 0x110a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1108:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    110a:	89 81       	ldd	r24, Y+1	; 0x01
}
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	00 d0       	rcall	.+0      	; 0x1122 <GPIO_setupPortDirection+0x6>
    1122:	00 d0       	rcall	.+0      	; 0x1124 <GPIO_setupPortDirection+0x8>
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	84 30       	cpi	r24, 0x04	; 4
    1130:	90 f5       	brcc	.+100    	; 0x1196 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	3c 83       	std	Y+4, r19	; 0x04
    113a:	2b 83       	std	Y+3, r18	; 0x03
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	9c 81       	ldd	r25, Y+4	; 0x04
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	91 05       	cpc	r25, r1
    1144:	d1 f0       	breq	.+52     	; 0x117a <GPIO_setupPortDirection+0x5e>
    1146:	2b 81       	ldd	r18, Y+3	; 0x03
    1148:	3c 81       	ldd	r19, Y+4	; 0x04
    114a:	22 30       	cpi	r18, 0x02	; 2
    114c:	31 05       	cpc	r19, r1
    114e:	2c f4       	brge	.+10     	; 0x115a <GPIO_setupPortDirection+0x3e>
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	61 f0       	breq	.+24     	; 0x1170 <GPIO_setupPortDirection+0x54>
    1158:	1e c0       	rjmp	.+60     	; 0x1196 <GPIO_setupPortDirection+0x7a>
    115a:	2b 81       	ldd	r18, Y+3	; 0x03
    115c:	3c 81       	ldd	r19, Y+4	; 0x04
    115e:	22 30       	cpi	r18, 0x02	; 2
    1160:	31 05       	cpc	r19, r1
    1162:	81 f0       	breq	.+32     	; 0x1184 <GPIO_setupPortDirection+0x68>
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	9c 81       	ldd	r25, Y+4	; 0x04
    1168:	83 30       	cpi	r24, 0x03	; 3
    116a:	91 05       	cpc	r25, r1
    116c:	81 f0       	breq	.+32     	; 0x118e <GPIO_setupPortDirection+0x72>
    116e:	13 c0       	rjmp	.+38     	; 0x1196 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1170:	ea e3       	ldi	r30, 0x3A	; 58
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	80 83       	st	Z, r24
    1178:	0e c0       	rjmp	.+28     	; 0x1196 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    117a:	e7 e3       	ldi	r30, 0x37	; 55
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	80 83       	st	Z, r24
    1182:	09 c0       	rjmp	.+18     	; 0x1196 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1184:	e4 e3       	ldi	r30, 0x34	; 52
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	80 83       	st	Z, r24
    118c:	04 c0       	rjmp	.+8      	; 0x1196 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    118e:	e1 e3       	ldi	r30, 0x31	; 49
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	80 83       	st	Z, r24
			break;
		}
	}
}
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <GPIO_writePort+0x6>
    11aa:	00 d0       	rcall	.+0      	; 0x11ac <GPIO_writePort+0x8>
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	89 83       	std	Y+1, r24	; 0x01
    11b2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	84 30       	cpi	r24, 0x04	; 4
    11b8:	90 f5       	brcc	.+100    	; 0x121e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	3c 83       	std	Y+4, r19	; 0x04
    11c2:	2b 83       	std	Y+3, r18	; 0x03
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	9c 81       	ldd	r25, Y+4	; 0x04
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	91 05       	cpc	r25, r1
    11cc:	d1 f0       	breq	.+52     	; 0x1202 <GPIO_writePort+0x5e>
    11ce:	2b 81       	ldd	r18, Y+3	; 0x03
    11d0:	3c 81       	ldd	r19, Y+4	; 0x04
    11d2:	22 30       	cpi	r18, 0x02	; 2
    11d4:	31 05       	cpc	r19, r1
    11d6:	2c f4       	brge	.+10     	; 0x11e2 <GPIO_writePort+0x3e>
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	9c 81       	ldd	r25, Y+4	; 0x04
    11dc:	00 97       	sbiw	r24, 0x00	; 0
    11de:	61 f0       	breq	.+24     	; 0x11f8 <GPIO_writePort+0x54>
    11e0:	1e c0       	rjmp	.+60     	; 0x121e <GPIO_writePort+0x7a>
    11e2:	2b 81       	ldd	r18, Y+3	; 0x03
    11e4:	3c 81       	ldd	r19, Y+4	; 0x04
    11e6:	22 30       	cpi	r18, 0x02	; 2
    11e8:	31 05       	cpc	r19, r1
    11ea:	81 f0       	breq	.+32     	; 0x120c <GPIO_writePort+0x68>
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	9c 81       	ldd	r25, Y+4	; 0x04
    11f0:	83 30       	cpi	r24, 0x03	; 3
    11f2:	91 05       	cpc	r25, r1
    11f4:	81 f0       	breq	.+32     	; 0x1216 <GPIO_writePort+0x72>
    11f6:	13 c0       	rjmp	.+38     	; 0x121e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    11f8:	eb e3       	ldi	r30, 0x3B	; 59
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	80 83       	st	Z, r24
    1200:	0e c0       	rjmp	.+28     	; 0x121e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1202:	e8 e3       	ldi	r30, 0x38	; 56
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	80 83       	st	Z, r24
    120a:	09 c0       	rjmp	.+18     	; 0x121e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    120c:	e5 e3       	ldi	r30, 0x35	; 53
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	80 83       	st	Z, r24
    1214:	04 c0       	rjmp	.+8      	; 0x121e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1216:	e2 e3       	ldi	r30, 0x32	; 50
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	80 83       	st	Z, r24
			break;
		}
	}
}
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	00 d0       	rcall	.+0      	; 0x1232 <GPIO_readPort+0x6>
    1232:	00 d0       	rcall	.+0      	; 0x1234 <GPIO_readPort+0x8>
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    123a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	84 30       	cpi	r24, 0x04	; 4
    1240:	90 f5       	brcc	.+100    	; 0x12a6 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	3c 83       	std	Y+4, r19	; 0x04
    124a:	2b 83       	std	Y+3, r18	; 0x03
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	9c 81       	ldd	r25, Y+4	; 0x04
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	91 05       	cpc	r25, r1
    1254:	d1 f0       	breq	.+52     	; 0x128a <GPIO_readPort+0x5e>
    1256:	2b 81       	ldd	r18, Y+3	; 0x03
    1258:	3c 81       	ldd	r19, Y+4	; 0x04
    125a:	22 30       	cpi	r18, 0x02	; 2
    125c:	31 05       	cpc	r19, r1
    125e:	2c f4       	brge	.+10     	; 0x126a <GPIO_readPort+0x3e>
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	61 f0       	breq	.+24     	; 0x1280 <GPIO_readPort+0x54>
    1268:	1e c0       	rjmp	.+60     	; 0x12a6 <GPIO_readPort+0x7a>
    126a:	2b 81       	ldd	r18, Y+3	; 0x03
    126c:	3c 81       	ldd	r19, Y+4	; 0x04
    126e:	22 30       	cpi	r18, 0x02	; 2
    1270:	31 05       	cpc	r19, r1
    1272:	81 f0       	breq	.+32     	; 0x1294 <GPIO_readPort+0x68>
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	83 30       	cpi	r24, 0x03	; 3
    127a:	91 05       	cpc	r25, r1
    127c:	81 f0       	breq	.+32     	; 0x129e <GPIO_readPort+0x72>
    127e:	13 c0       	rjmp	.+38     	; 0x12a6 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1280:	e9 e3       	ldi	r30, 0x39	; 57
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	0e c0       	rjmp	.+28     	; 0x12a6 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    128a:	e6 e3       	ldi	r30, 0x36	; 54
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	89 83       	std	Y+1, r24	; 0x01
    1292:	09 c0       	rjmp	.+18     	; 0x12a6 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1294:	e3 e3       	ldi	r30, 0x33	; 51
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	04 c0       	rjmp	.+8      	; 0x12a6 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    129e:	e0 e3       	ldi	r30, 0x30	; 48
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <SevenSegment_INIT>:
 *      Author: Ahmed
 */
#include "SevenSegment.h"

void SevenSegment_INIT(void)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTA_ID, 0, OUTPUT);
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	60 e0       	ldi	r22, 0x00	; 0
    12c2:	41 e0       	ldi	r20, 0x01	; 1
    12c4:	0e 94 1d 06 	call	0xc3a	; 0xc3a <GPIO_setupPinDirection>
	GPIO_writePin(PORTA_ID, 0, LOGIC_HIGH);
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	41 e0       	ldi	r20, 0x01	; 1
    12ce:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
	GPIO_setupPinDirection(PORTC_ID, 0, OUTPUT);
    12d2:	82 e0       	ldi	r24, 0x02	; 2
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	41 e0       	ldi	r20, 0x01	; 1
    12d8:	0e 94 1d 06 	call	0xc3a	; 0xc3a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, 1, OUTPUT);
    12dc:	82 e0       	ldi	r24, 0x02	; 2
    12de:	61 e0       	ldi	r22, 0x01	; 1
    12e0:	41 e0       	ldi	r20, 0x01	; 1
    12e2:	0e 94 1d 06 	call	0xc3a	; 0xc3a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, 2, OUTPUT);
    12e6:	82 e0       	ldi	r24, 0x02	; 2
    12e8:	62 e0       	ldi	r22, 0x02	; 2
    12ea:	41 e0       	ldi	r20, 0x01	; 1
    12ec:	0e 94 1d 06 	call	0xc3a	; 0xc3a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, 3, OUTPUT);
    12f0:	82 e0       	ldi	r24, 0x02	; 2
    12f2:	63 e0       	ldi	r22, 0x03	; 3
    12f4:	41 e0       	ldi	r20, 0x01	; 1
    12f6:	0e 94 1d 06 	call	0xc3a	; 0xc3a <GPIO_setupPinDirection>
}
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <SevenSegment_writeNum>:

void SevenSegment_writeNum(unsigned char num)
{
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	0f 92       	push	r0
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	89 83       	std	Y+1, r24	; 0x01
	PORTC = (PORTC & 0xF0) | (num & 0x0F);
    130c:	a5 e3       	ldi	r26, 0x35	; 53
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e5 e3       	ldi	r30, 0x35	; 53
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	98 2f       	mov	r25, r24
    1318:	90 7f       	andi	r25, 0xF0	; 240
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	8f 70       	andi	r24, 0x0F	; 15
    131e:	89 2b       	or	r24, r25
    1320:	8c 93       	st	X, r24
}
    1322:	0f 90       	pop	r0
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <Led_Init>:
 */
#include "Led.h"
signed char time = 0 ;

void Led_Init(void)
{
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTD_ID, 0, OUTPUT);
    1332:	83 e0       	ldi	r24, 0x03	; 3
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	41 e0       	ldi	r20, 0x01	; 1
    1338:	0e 94 1d 06 	call	0xc3a	; 0xc3a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID, 1, OUTPUT);
    133c:	83 e0       	ldi	r24, 0x03	; 3
    133e:	61 e0       	ldi	r22, 0x01	; 1
    1340:	41 e0       	ldi	r20, 0x01	; 1
    1342:	0e 94 1d 06 	call	0xc3a	; 0xc3a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID, 2, OUTPUT);
    1346:	83 e0       	ldi	r24, 0x03	; 3
    1348:	62 e0       	ldi	r22, 0x02	; 2
    134a:	41 e0       	ldi	r20, 0x01	; 1
    134c:	0e 94 1d 06 	call	0xc3a	; 0xc3a <GPIO_setupPinDirection>

	GPIO_writePin(PORTD_ID, 0, LOGIC_LOW);
    1350:	83 e0       	ldi	r24, 0x03	; 3
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
	GPIO_writePin(PORTD_ID, 1, LOGIC_LOW);
    135a:	83 e0       	ldi	r24, 0x03	; 3
    135c:	61 e0       	ldi	r22, 0x01	; 1
    135e:	40 e0       	ldi	r20, 0x00	; 0
    1360:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
	GPIO_writePin(PORTD_ID, 2, LOGIC_LOW);
    1364:	83 e0       	ldi	r24, 0x03	; 3
    1366:	62 e0       	ldi	r22, 0x02	; 2
    1368:	40 e0       	ldi	r20, 0x00	; 0
    136a:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>

	Led_Green();
    136e:	0e 94 bc 09 	call	0x1378	; 0x1378 <Led_Green>
}
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <Led_Green>:
void Led_Green(void)
{
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
	time = 9;
    1380:	89 e0       	ldi	r24, 0x09	; 9
    1382:	80 93 7a 00 	sts	0x007A, r24
	GPIO_writePin(PORTD_ID, 0, LOGIC_HIGH);
    1386:	83 e0       	ldi	r24, 0x03	; 3
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	41 e0       	ldi	r20, 0x01	; 1
    138c:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
	GPIO_writePin(PORTD_ID, 1, LOGIC_LOW);
    1390:	83 e0       	ldi	r24, 0x03	; 3
    1392:	61 e0       	ldi	r22, 0x01	; 1
    1394:	40 e0       	ldi	r20, 0x00	; 0
    1396:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
	GPIO_writePin(PORTD_ID, 2, LOGIC_LOW);
    139a:	83 e0       	ldi	r24, 0x03	; 3
    139c:	62 e0       	ldi	r22, 0x02	; 2
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
}
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <Led_Yellow>:

void Led_Yellow(void)
{
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
	time = 4;
    13b2:	84 e0       	ldi	r24, 0x04	; 4
    13b4:	80 93 7a 00 	sts	0x007A, r24
	GPIO_writePin(PORTD_ID, 0, LOGIC_LOW);
    13b8:	83 e0       	ldi	r24, 0x03	; 3
    13ba:	60 e0       	ldi	r22, 0x00	; 0
    13bc:	40 e0       	ldi	r20, 0x00	; 0
    13be:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
	GPIO_writePin(PORTD_ID, 1, LOGIC_HIGH);
    13c2:	83 e0       	ldi	r24, 0x03	; 3
    13c4:	61 e0       	ldi	r22, 0x01	; 1
    13c6:	41 e0       	ldi	r20, 0x01	; 1
    13c8:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
	GPIO_writePin(PORTD_ID, 2, LOGIC_LOW);
    13cc:	83 e0       	ldi	r24, 0x03	; 3
    13ce:	62 e0       	ldi	r22, 0x02	; 2
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
}
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <Led_Red>:

void Led_Red(void)
{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
	time = 7;
    13e4:	87 e0       	ldi	r24, 0x07	; 7
    13e6:	80 93 7a 00 	sts	0x007A, r24
	GPIO_writePin(PORTD_ID, 0, LOGIC_LOW);
    13ea:	83 e0       	ldi	r24, 0x03	; 3
    13ec:	60 e0       	ldi	r22, 0x00	; 0
    13ee:	40 e0       	ldi	r20, 0x00	; 0
    13f0:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
	GPIO_writePin(PORTD_ID, 1, LOGIC_LOW);
    13f4:	83 e0       	ldi	r24, 0x03	; 3
    13f6:	61 e0       	ldi	r22, 0x01	; 1
    13f8:	40 e0       	ldi	r20, 0x00	; 0
    13fa:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
	GPIO_writePin(PORTD_ID, 2, LOGIC_HIGH);
    13fe:	83 e0       	ldi	r24, 0x03	; 3
    1400:	62 e0       	ldi	r22, 0x02	; 2
    1402:	41 e0       	ldi	r20, 0x01	; 1
    1404:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
}
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <LCD_init>:
#include "../../LIB/common_macros.h"
#include "../../MCAL/GPIO/gpio.h"
#include "util/delay.h"

void LCD_init(void)
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	2e 97       	sbiw	r28, 0x0e	; 14
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	61 e0       	ldi	r22, 0x01	; 1
    1426:	41 e0       	ldi	r20, 0x01	; 1
    1428:	0e 94 1d 06 	call	0xc3a	; 0xc3a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	62 e0       	ldi	r22, 0x02	; 2
    1430:	41 e0       	ldi	r20, 0x01	; 1
    1432:	0e 94 1d 06 	call	0xc3a	; 0xc3a <GPIO_setupPinDirection>
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	a0 ea       	ldi	r26, 0xA0	; 160
    143c:	b1 e4       	ldi	r27, 0x41	; 65
    143e:	8b 87       	std	Y+11, r24	; 0x0b
    1440:	9c 87       	std	Y+12, r25	; 0x0c
    1442:	ad 87       	std	Y+13, r26	; 0x0d
    1444:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1446:	6b 85       	ldd	r22, Y+11	; 0x0b
    1448:	7c 85       	ldd	r23, Y+12	; 0x0c
    144a:	8d 85       	ldd	r24, Y+13	; 0x0d
    144c:	9e 85       	ldd	r25, Y+14	; 0x0e
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	4a e7       	ldi	r20, 0x7A	; 122
    1454:	53 e4       	ldi	r21, 0x43	; 67
    1456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	8f 83       	std	Y+7, r24	; 0x07
    1460:	98 87       	std	Y+8, r25	; 0x08
    1462:	a9 87       	std	Y+9, r26	; 0x09
    1464:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1466:	6f 81       	ldd	r22, Y+7	; 0x07
    1468:	78 85       	ldd	r23, Y+8	; 0x08
    146a:	89 85       	ldd	r24, Y+9	; 0x09
    146c:	9a 85       	ldd	r25, Y+10	; 0x0a
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e8       	ldi	r20, 0x80	; 128
    1474:	5f e3       	ldi	r21, 0x3F	; 63
    1476:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    147a:	88 23       	and	r24, r24
    147c:	2c f4       	brge	.+10     	; 0x1488 <LCD_init+0x7a>
		__ticks = 1;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	9e 83       	std	Y+6, r25	; 0x06
    1484:	8d 83       	std	Y+5, r24	; 0x05
    1486:	3f c0       	rjmp	.+126    	; 0x1506 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1488:	6f 81       	ldd	r22, Y+7	; 0x07
    148a:	78 85       	ldd	r23, Y+8	; 0x08
    148c:	89 85       	ldd	r24, Y+9	; 0x09
    148e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	3f ef       	ldi	r19, 0xFF	; 255
    1494:	4f e7       	ldi	r20, 0x7F	; 127
    1496:	57 e4       	ldi	r21, 0x47	; 71
    1498:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    149c:	18 16       	cp	r1, r24
    149e:	4c f5       	brge	.+82     	; 0x14f2 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    14a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	40 e2       	ldi	r20, 0x20	; 32
    14ae:	51 e4       	ldi	r21, 0x41	; 65
    14b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	bc 01       	movw	r22, r24
    14ba:	cd 01       	movw	r24, r26
    14bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	9e 83       	std	Y+6, r25	; 0x06
    14c6:	8d 83       	std	Y+5, r24	; 0x05
    14c8:	0f c0       	rjmp	.+30     	; 0x14e8 <LCD_init+0xda>
    14ca:	89 e1       	ldi	r24, 0x19	; 25
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	9c 83       	std	Y+4, r25	; 0x04
    14d0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	9c 81       	ldd	r25, Y+4	; 0x04
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <LCD_init+0xc8>
    14da:	9c 83       	std	Y+4, r25	; 0x04
    14dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14de:	8d 81       	ldd	r24, Y+5	; 0x05
    14e0:	9e 81       	ldd	r25, Y+6	; 0x06
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	9e 83       	std	Y+6, r25	; 0x06
    14e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ea:	9e 81       	ldd	r25, Y+6	; 0x06
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	69 f7       	brne	.-38     	; 0x14ca <LCD_init+0xbc>
    14f0:	14 c0       	rjmp	.+40     	; 0x151a <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f2:	6f 81       	ldd	r22, Y+7	; 0x07
    14f4:	78 85       	ldd	r23, Y+8	; 0x08
    14f6:	89 85       	ldd	r24, Y+9	; 0x09
    14f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	9e 83       	std	Y+6, r25	; 0x06
    1504:	8d 83       	std	Y+5, r24	; 0x05
    1506:	8d 81       	ldd	r24, Y+5	; 0x05
    1508:	9e 81       	ldd	r25, Y+6	; 0x06
    150a:	9a 83       	std	Y+2, r25	; 0x02
    150c:	89 83       	std	Y+1, r24	; 0x01
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	9a 81       	ldd	r25, Y+2	; 0x02
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	f1 f7       	brne	.-4      	; 0x1512 <LCD_init+0x104>
    1516:	9a 83       	std	Y+2, r25	; 0x02
    1518:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 4)

	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, PIN_OUTPUT);
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	63 e0       	ldi	r22, 0x03	; 3
    151e:	41 e0       	ldi	r20, 0x01	; 1
    1520:	0e 94 1d 06 	call	0xc3a	; 0xc3a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, PIN_OUTPUT);
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	64 e0       	ldi	r22, 0x04	; 4
    1528:	41 e0       	ldi	r20, 0x01	; 1
    152a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, PIN_OUTPUT);
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	65 e0       	ldi	r22, 0x05	; 5
    1532:	41 e0       	ldi	r20, 0x01	; 1
    1534:	0e 94 1d 06 	call	0xc3a	; 0xc3a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, PIN_OUTPUT);
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	66 e0       	ldi	r22, 0x06	; 6
    153c:	41 e0       	ldi	r20, 0x01	; 1
    153e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1542:	83 e3       	ldi	r24, 0x33	; 51
    1544:	0e 94 b9 0a 	call	0x1572	; 0x1572 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1548:	82 e3       	ldi	r24, 0x32	; 50
    154a:	0e 94 b9 0a 	call	0x1572	; 0x1572 <LCD_sendCommand>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    154e:	88 e2       	ldi	r24, 0x28	; 40
    1550:	0e 94 b9 0a 	call	0x1572	; 0x1572 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1554:	8c e0       	ldi	r24, 0x0C	; 12
    1556:	0e 94 b9 0a 	call	0x1572	; 0x1572 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	0e 94 b9 0a 	call	0x1572	; 0x1572 <LCD_sendCommand>
}
    1560:	2e 96       	adiw	r28, 0x0e	; 14
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1572:	0f 93       	push	r16
    1574:	1f 93       	push	r17
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	c3 56       	subi	r28, 0x63	; 99
    1580:	d0 40       	sbci	r29, 0x00	; 0
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	fe 01       	movw	r30, r28
    158e:	ed 59       	subi	r30, 0x9D	; 157
    1590:	ff 4f       	sbci	r31, 0xFF	; 255
    1592:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID	, LOGIC_LOW); /* Rs = 0 */
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	61 e0       	ldi	r22, 0x01	; 1
    1598:	40 e0       	ldi	r20, 0x00	; 0
    159a:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
    159e:	fe 01       	movw	r30, r28
    15a0:	e1 5a       	subi	r30, 0xA1	; 161
    15a2:	ff 4f       	sbci	r31, 0xFF	; 255
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	a0 e8       	ldi	r26, 0x80	; 128
    15aa:	bf e3       	ldi	r27, 0x3F	; 63
    15ac:	80 83       	st	Z, r24
    15ae:	91 83       	std	Z+1, r25	; 0x01
    15b0:	a2 83       	std	Z+2, r26	; 0x02
    15b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b4:	8e 01       	movw	r16, r28
    15b6:	05 5a       	subi	r16, 0xA5	; 165
    15b8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ba:	fe 01       	movw	r30, r28
    15bc:	e1 5a       	subi	r30, 0xA1	; 161
    15be:	ff 4f       	sbci	r31, 0xFF	; 255
    15c0:	60 81       	ld	r22, Z
    15c2:	71 81       	ldd	r23, Z+1	; 0x01
    15c4:	82 81       	ldd	r24, Z+2	; 0x02
    15c6:	93 81       	ldd	r25, Z+3	; 0x03
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	4a e7       	ldi	r20, 0x7A	; 122
    15ce:	53 e4       	ldi	r21, 0x43	; 67
    15d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	f8 01       	movw	r30, r16
    15da:	80 83       	st	Z, r24
    15dc:	91 83       	std	Z+1, r25	; 0x01
    15de:	a2 83       	std	Z+2, r26	; 0x02
    15e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15e2:	fe 01       	movw	r30, r28
    15e4:	e5 5a       	subi	r30, 0xA5	; 165
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	60 81       	ld	r22, Z
    15ea:	71 81       	ldd	r23, Z+1	; 0x01
    15ec:	82 81       	ldd	r24, Z+2	; 0x02
    15ee:	93 81       	ldd	r25, Z+3	; 0x03
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e8       	ldi	r20, 0x80	; 128
    15f6:	5f e3       	ldi	r21, 0x3F	; 63
    15f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15fc:	88 23       	and	r24, r24
    15fe:	44 f4       	brge	.+16     	; 0x1610 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1600:	fe 01       	movw	r30, r28
    1602:	e7 5a       	subi	r30, 0xA7	; 167
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	91 83       	std	Z+1, r25	; 0x01
    160c:	80 83       	st	Z, r24
    160e:	64 c0       	rjmp	.+200    	; 0x16d8 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1610:	fe 01       	movw	r30, r28
    1612:	e5 5a       	subi	r30, 0xA5	; 165
    1614:	ff 4f       	sbci	r31, 0xFF	; 255
    1616:	60 81       	ld	r22, Z
    1618:	71 81       	ldd	r23, Z+1	; 0x01
    161a:	82 81       	ldd	r24, Z+2	; 0x02
    161c:	93 81       	ldd	r25, Z+3	; 0x03
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	3f ef       	ldi	r19, 0xFF	; 255
    1622:	4f e7       	ldi	r20, 0x7F	; 127
    1624:	57 e4       	ldi	r21, 0x47	; 71
    1626:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    162a:	18 16       	cp	r1, r24
    162c:	0c f0       	brlt	.+2      	; 0x1630 <LCD_sendCommand+0xbe>
    162e:	43 c0       	rjmp	.+134    	; 0x16b6 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1630:	fe 01       	movw	r30, r28
    1632:	e1 5a       	subi	r30, 0xA1	; 161
    1634:	ff 4f       	sbci	r31, 0xFF	; 255
    1636:	60 81       	ld	r22, Z
    1638:	71 81       	ldd	r23, Z+1	; 0x01
    163a:	82 81       	ldd	r24, Z+2	; 0x02
    163c:	93 81       	ldd	r25, Z+3	; 0x03
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e2       	ldi	r20, 0x20	; 32
    1644:	51 e4       	ldi	r21, 0x41	; 65
    1646:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	8e 01       	movw	r16, r28
    1650:	07 5a       	subi	r16, 0xA7	; 167
    1652:	1f 4f       	sbci	r17, 0xFF	; 255
    1654:	bc 01       	movw	r22, r24
    1656:	cd 01       	movw	r24, r26
    1658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	f8 01       	movw	r30, r16
    1662:	91 83       	std	Z+1, r25	; 0x01
    1664:	80 83       	st	Z, r24
    1666:	1f c0       	rjmp	.+62     	; 0x16a6 <LCD_sendCommand+0x134>
    1668:	fe 01       	movw	r30, r28
    166a:	e9 5a       	subi	r30, 0xA9	; 169
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	89 e1       	ldi	r24, 0x19	; 25
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	91 83       	std	Z+1, r25	; 0x01
    1674:	80 83       	st	Z, r24
    1676:	fe 01       	movw	r30, r28
    1678:	e9 5a       	subi	r30, 0xA9	; 169
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	80 81       	ld	r24, Z
    167e:	91 81       	ldd	r25, Z+1	; 0x01
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	f1 f7       	brne	.-4      	; 0x1680 <LCD_sendCommand+0x10e>
    1684:	fe 01       	movw	r30, r28
    1686:	e9 5a       	subi	r30, 0xA9	; 169
    1688:	ff 4f       	sbci	r31, 0xFF	; 255
    168a:	91 83       	std	Z+1, r25	; 0x01
    168c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168e:	de 01       	movw	r26, r28
    1690:	a7 5a       	subi	r26, 0xA7	; 167
    1692:	bf 4f       	sbci	r27, 0xFF	; 255
    1694:	fe 01       	movw	r30, r28
    1696:	e7 5a       	subi	r30, 0xA7	; 167
    1698:	ff 4f       	sbci	r31, 0xFF	; 255
    169a:	80 81       	ld	r24, Z
    169c:	91 81       	ldd	r25, Z+1	; 0x01
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	11 96       	adiw	r26, 0x01	; 1
    16a2:	9c 93       	st	X, r25
    16a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a6:	fe 01       	movw	r30, r28
    16a8:	e7 5a       	subi	r30, 0xA7	; 167
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	80 81       	ld	r24, Z
    16ae:	91 81       	ldd	r25, Z+1	; 0x01
    16b0:	00 97       	sbiw	r24, 0x00	; 0
    16b2:	d1 f6       	brne	.-76     	; 0x1668 <LCD_sendCommand+0xf6>
    16b4:	27 c0       	rjmp	.+78     	; 0x1704 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b6:	8e 01       	movw	r16, r28
    16b8:	07 5a       	subi	r16, 0xA7	; 167
    16ba:	1f 4f       	sbci	r17, 0xFF	; 255
    16bc:	fe 01       	movw	r30, r28
    16be:	e5 5a       	subi	r30, 0xA5	; 165
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	60 81       	ld	r22, Z
    16c4:	71 81       	ldd	r23, Z+1	; 0x01
    16c6:	82 81       	ldd	r24, Z+2	; 0x02
    16c8:	93 81       	ldd	r25, Z+3	; 0x03
    16ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	f8 01       	movw	r30, r16
    16d4:	91 83       	std	Z+1, r25	; 0x01
    16d6:	80 83       	st	Z, r24
    16d8:	de 01       	movw	r26, r28
    16da:	ab 5a       	subi	r26, 0xAB	; 171
    16dc:	bf 4f       	sbci	r27, 0xFF	; 255
    16de:	fe 01       	movw	r30, r28
    16e0:	e7 5a       	subi	r30, 0xA7	; 167
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	80 81       	ld	r24, Z
    16e6:	91 81       	ldd	r25, Z+1	; 0x01
    16e8:	8d 93       	st	X+, r24
    16ea:	9c 93       	st	X, r25
    16ec:	fe 01       	movw	r30, r28
    16ee:	eb 5a       	subi	r30, 0xAB	; 171
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	80 81       	ld	r24, Z
    16f4:	91 81       	ldd	r25, Z+1	; 0x01
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <LCD_sendCommand+0x184>
    16fa:	fe 01       	movw	r30, r28
    16fc:	eb 5a       	subi	r30, 0xAB	; 171
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	91 83       	std	Z+1, r25	; 0x01
    1702:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable = 1 */
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	62 e0       	ldi	r22, 0x02	; 2
    1708:	41 e0       	ldi	r20, 0x01	; 1
    170a:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
    170e:	fe 01       	movw	r30, r28
    1710:	ef 5a       	subi	r30, 0xAF	; 175
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	a0 e8       	ldi	r26, 0x80	; 128
    171a:	bf e3       	ldi	r27, 0x3F	; 63
    171c:	80 83       	st	Z, r24
    171e:	91 83       	std	Z+1, r25	; 0x01
    1720:	a2 83       	std	Z+2, r26	; 0x02
    1722:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1724:	8e 01       	movw	r16, r28
    1726:	03 5b       	subi	r16, 0xB3	; 179
    1728:	1f 4f       	sbci	r17, 0xFF	; 255
    172a:	fe 01       	movw	r30, r28
    172c:	ef 5a       	subi	r30, 0xAF	; 175
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	60 81       	ld	r22, Z
    1732:	71 81       	ldd	r23, Z+1	; 0x01
    1734:	82 81       	ldd	r24, Z+2	; 0x02
    1736:	93 81       	ldd	r25, Z+3	; 0x03
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	4a e7       	ldi	r20, 0x7A	; 122
    173e:	53 e4       	ldi	r21, 0x43	; 67
    1740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	f8 01       	movw	r30, r16
    174a:	80 83       	st	Z, r24
    174c:	91 83       	std	Z+1, r25	; 0x01
    174e:	a2 83       	std	Z+2, r26	; 0x02
    1750:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1752:	fe 01       	movw	r30, r28
    1754:	e3 5b       	subi	r30, 0xB3	; 179
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	60 81       	ld	r22, Z
    175a:	71 81       	ldd	r23, Z+1	; 0x01
    175c:	82 81       	ldd	r24, Z+2	; 0x02
    175e:	93 81       	ldd	r25, Z+3	; 0x03
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e8       	ldi	r20, 0x80	; 128
    1766:	5f e3       	ldi	r21, 0x3F	; 63
    1768:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    176c:	88 23       	and	r24, r24
    176e:	44 f4       	brge	.+16     	; 0x1780 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1770:	fe 01       	movw	r30, r28
    1772:	e5 5b       	subi	r30, 0xB5	; 181
    1774:	ff 4f       	sbci	r31, 0xFF	; 255
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	91 83       	std	Z+1, r25	; 0x01
    177c:	80 83       	st	Z, r24
    177e:	64 c0       	rjmp	.+200    	; 0x1848 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1780:	fe 01       	movw	r30, r28
    1782:	e3 5b       	subi	r30, 0xB3	; 179
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	60 81       	ld	r22, Z
    1788:	71 81       	ldd	r23, Z+1	; 0x01
    178a:	82 81       	ldd	r24, Z+2	; 0x02
    178c:	93 81       	ldd	r25, Z+3	; 0x03
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	3f ef       	ldi	r19, 0xFF	; 255
    1792:	4f e7       	ldi	r20, 0x7F	; 127
    1794:	57 e4       	ldi	r21, 0x47	; 71
    1796:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    179a:	18 16       	cp	r1, r24
    179c:	0c f0       	brlt	.+2      	; 0x17a0 <LCD_sendCommand+0x22e>
    179e:	43 c0       	rjmp	.+134    	; 0x1826 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a0:	fe 01       	movw	r30, r28
    17a2:	ef 5a       	subi	r30, 0xAF	; 175
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	60 81       	ld	r22, Z
    17a8:	71 81       	ldd	r23, Z+1	; 0x01
    17aa:	82 81       	ldd	r24, Z+2	; 0x02
    17ac:	93 81       	ldd	r25, Z+3	; 0x03
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e2       	ldi	r20, 0x20	; 32
    17b4:	51 e4       	ldi	r21, 0x41	; 65
    17b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	8e 01       	movw	r16, r28
    17c0:	05 5b       	subi	r16, 0xB5	; 181
    17c2:	1f 4f       	sbci	r17, 0xFF	; 255
    17c4:	bc 01       	movw	r22, r24
    17c6:	cd 01       	movw	r24, r26
    17c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	f8 01       	movw	r30, r16
    17d2:	91 83       	std	Z+1, r25	; 0x01
    17d4:	80 83       	st	Z, r24
    17d6:	1f c0       	rjmp	.+62     	; 0x1816 <LCD_sendCommand+0x2a4>
    17d8:	fe 01       	movw	r30, r28
    17da:	e7 5b       	subi	r30, 0xB7	; 183
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	89 e1       	ldi	r24, 0x19	; 25
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	91 83       	std	Z+1, r25	; 0x01
    17e4:	80 83       	st	Z, r24
    17e6:	fe 01       	movw	r30, r28
    17e8:	e7 5b       	subi	r30, 0xB7	; 183
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	80 81       	ld	r24, Z
    17ee:	91 81       	ldd	r25, Z+1	; 0x01
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <LCD_sendCommand+0x27e>
    17f4:	fe 01       	movw	r30, r28
    17f6:	e7 5b       	subi	r30, 0xB7	; 183
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	91 83       	std	Z+1, r25	; 0x01
    17fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17fe:	de 01       	movw	r26, r28
    1800:	a5 5b       	subi	r26, 0xB5	; 181
    1802:	bf 4f       	sbci	r27, 0xFF	; 255
    1804:	fe 01       	movw	r30, r28
    1806:	e5 5b       	subi	r30, 0xB5	; 181
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	80 81       	ld	r24, Z
    180c:	91 81       	ldd	r25, Z+1	; 0x01
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	11 96       	adiw	r26, 0x01	; 1
    1812:	9c 93       	st	X, r25
    1814:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1816:	fe 01       	movw	r30, r28
    1818:	e5 5b       	subi	r30, 0xB5	; 181
    181a:	ff 4f       	sbci	r31, 0xFF	; 255
    181c:	80 81       	ld	r24, Z
    181e:	91 81       	ldd	r25, Z+1	; 0x01
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	d1 f6       	brne	.-76     	; 0x17d8 <LCD_sendCommand+0x266>
    1824:	27 c0       	rjmp	.+78     	; 0x1874 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1826:	8e 01       	movw	r16, r28
    1828:	05 5b       	subi	r16, 0xB5	; 181
    182a:	1f 4f       	sbci	r17, 0xFF	; 255
    182c:	fe 01       	movw	r30, r28
    182e:	e3 5b       	subi	r30, 0xB3	; 179
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	60 81       	ld	r22, Z
    1834:	71 81       	ldd	r23, Z+1	; 0x01
    1836:	82 81       	ldd	r24, Z+2	; 0x02
    1838:	93 81       	ldd	r25, Z+3	; 0x03
    183a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	f8 01       	movw	r30, r16
    1844:	91 83       	std	Z+1, r25	; 0x01
    1846:	80 83       	st	Z, r24
    1848:	de 01       	movw	r26, r28
    184a:	a9 5b       	subi	r26, 0xB9	; 185
    184c:	bf 4f       	sbci	r27, 0xFF	; 255
    184e:	fe 01       	movw	r30, r28
    1850:	e5 5b       	subi	r30, 0xB5	; 181
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	80 81       	ld	r24, Z
    1856:	91 81       	ldd	r25, Z+1	; 0x01
    1858:	8d 93       	st	X+, r24
    185a:	9c 93       	st	X, r25
    185c:	fe 01       	movw	r30, r28
    185e:	e9 5b       	subi	r30, 0xB9	; 185
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	80 81       	ld	r24, Z
    1864:	91 81       	ldd	r25, Z+1	; 0x01
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	f1 f7       	brne	.-4      	; 0x1866 <LCD_sendCommand+0x2f4>
    186a:	fe 01       	movw	r30, r28
    186c:	e9 5b       	subi	r30, 0xB9	; 185
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	91 83       	std	Z+1, r25	; 0x01
    1872:	80 83       	st	Z, r24
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Enable = 1 */
	_delay_ms(1);

#elif(LCD_DATA_BITS_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command,4));
    1874:	fe 01       	movw	r30, r28
    1876:	ed 59       	subi	r30, 0x9D	; 157
    1878:	ff 4f       	sbci	r31, 0xFF	; 255
    187a:	80 81       	ld	r24, Z
    187c:	82 95       	swap	r24
    187e:	8f 70       	andi	r24, 0x0F	; 15
    1880:	98 2f       	mov	r25, r24
    1882:	91 70       	andi	r25, 0x01	; 1
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	63 e0       	ldi	r22, 0x03	; 3
    1888:	49 2f       	mov	r20, r25
    188a:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command,5));
    188e:	fe 01       	movw	r30, r28
    1890:	ed 59       	subi	r30, 0x9D	; 157
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	80 81       	ld	r24, Z
    1896:	82 95       	swap	r24
    1898:	86 95       	lsr	r24
    189a:	87 70       	andi	r24, 0x07	; 7
    189c:	98 2f       	mov	r25, r24
    189e:	91 70       	andi	r25, 0x01	; 1
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	64 e0       	ldi	r22, 0x04	; 4
    18a4:	49 2f       	mov	r20, r25
    18a6:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command,6));
    18aa:	fe 01       	movw	r30, r28
    18ac:	ed 59       	subi	r30, 0x9D	; 157
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	80 81       	ld	r24, Z
    18b2:	82 95       	swap	r24
    18b4:	86 95       	lsr	r24
    18b6:	86 95       	lsr	r24
    18b8:	83 70       	andi	r24, 0x03	; 3
    18ba:	98 2f       	mov	r25, r24
    18bc:	91 70       	andi	r25, 0x01	; 1
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	65 e0       	ldi	r22, 0x05	; 5
    18c2:	49 2f       	mov	r20, r25
    18c4:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command,7));
    18c8:	fe 01       	movw	r30, r28
    18ca:	ed 59       	subi	r30, 0x9D	; 157
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	80 81       	ld	r24, Z
    18d0:	98 2f       	mov	r25, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	99 27       	eor	r25, r25
    18d6:	99 1f       	adc	r25, r25
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	66 e0       	ldi	r22, 0x06	; 6
    18dc:	49 2f       	mov	r20, r25
    18de:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
    18e2:	fe 01       	movw	r30, r28
    18e4:	ed 5b       	subi	r30, 0xBD	; 189
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	a0 e8       	ldi	r26, 0x80	; 128
    18ee:	bf e3       	ldi	r27, 0x3F	; 63
    18f0:	80 83       	st	Z, r24
    18f2:	91 83       	std	Z+1, r25	; 0x01
    18f4:	a2 83       	std	Z+2, r26	; 0x02
    18f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f8:	8e 01       	movw	r16, r28
    18fa:	01 5c       	subi	r16, 0xC1	; 193
    18fc:	1f 4f       	sbci	r17, 0xFF	; 255
    18fe:	fe 01       	movw	r30, r28
    1900:	ed 5b       	subi	r30, 0xBD	; 189
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	60 81       	ld	r22, Z
    1906:	71 81       	ldd	r23, Z+1	; 0x01
    1908:	82 81       	ldd	r24, Z+2	; 0x02
    190a:	93 81       	ldd	r25, Z+3	; 0x03
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	4a e7       	ldi	r20, 0x7A	; 122
    1912:	53 e4       	ldi	r21, 0x43	; 67
    1914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	f8 01       	movw	r30, r16
    191e:	80 83       	st	Z, r24
    1920:	91 83       	std	Z+1, r25	; 0x01
    1922:	a2 83       	std	Z+2, r26	; 0x02
    1924:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1926:	fe 01       	movw	r30, r28
    1928:	ff 96       	adiw	r30, 0x3f	; 63
    192a:	60 81       	ld	r22, Z
    192c:	71 81       	ldd	r23, Z+1	; 0x01
    192e:	82 81       	ldd	r24, Z+2	; 0x02
    1930:	93 81       	ldd	r25, Z+3	; 0x03
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	40 e8       	ldi	r20, 0x80	; 128
    1938:	5f e3       	ldi	r21, 0x3F	; 63
    193a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    193e:	88 23       	and	r24, r24
    1940:	2c f4       	brge	.+10     	; 0x194c <LCD_sendCommand+0x3da>
		__ticks = 1;
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	9e af       	std	Y+62, r25	; 0x3e
    1948:	8d af       	std	Y+61, r24	; 0x3d
    194a:	46 c0       	rjmp	.+140    	; 0x19d8 <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    194c:	fe 01       	movw	r30, r28
    194e:	ff 96       	adiw	r30, 0x3f	; 63
    1950:	60 81       	ld	r22, Z
    1952:	71 81       	ldd	r23, Z+1	; 0x01
    1954:	82 81       	ldd	r24, Z+2	; 0x02
    1956:	93 81       	ldd	r25, Z+3	; 0x03
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	3f ef       	ldi	r19, 0xFF	; 255
    195c:	4f e7       	ldi	r20, 0x7F	; 127
    195e:	57 e4       	ldi	r21, 0x47	; 71
    1960:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1964:	18 16       	cp	r1, r24
    1966:	64 f5       	brge	.+88     	; 0x19c0 <LCD_sendCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1968:	fe 01       	movw	r30, r28
    196a:	ed 5b       	subi	r30, 0xBD	; 189
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	60 81       	ld	r22, Z
    1970:	71 81       	ldd	r23, Z+1	; 0x01
    1972:	82 81       	ldd	r24, Z+2	; 0x02
    1974:	93 81       	ldd	r25, Z+3	; 0x03
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e2       	ldi	r20, 0x20	; 32
    197c:	51 e4       	ldi	r21, 0x41	; 65
    197e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	bc 01       	movw	r22, r24
    1988:	cd 01       	movw	r24, r26
    198a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	9e af       	std	Y+62, r25	; 0x3e
    1994:	8d af       	std	Y+61, r24	; 0x3d
    1996:	0f c0       	rjmp	.+30     	; 0x19b6 <LCD_sendCommand+0x444>
    1998:	89 e1       	ldi	r24, 0x19	; 25
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	9c af       	std	Y+60, r25	; 0x3c
    199e:	8b af       	std	Y+59, r24	; 0x3b
    19a0:	8b ad       	ldd	r24, Y+59	; 0x3b
    19a2:	9c ad       	ldd	r25, Y+60	; 0x3c
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	f1 f7       	brne	.-4      	; 0x19a4 <LCD_sendCommand+0x432>
    19a8:	9c af       	std	Y+60, r25	; 0x3c
    19aa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    19ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	9e af       	std	Y+62, r25	; 0x3e
    19b4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    19b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	69 f7       	brne	.-38     	; 0x1998 <LCD_sendCommand+0x426>
    19be:	16 c0       	rjmp	.+44     	; 0x19ec <LCD_sendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c0:	fe 01       	movw	r30, r28
    19c2:	ff 96       	adiw	r30, 0x3f	; 63
    19c4:	60 81       	ld	r22, Z
    19c6:	71 81       	ldd	r23, Z+1	; 0x01
    19c8:	82 81       	ldd	r24, Z+2	; 0x02
    19ca:	93 81       	ldd	r25, Z+3	; 0x03
    19cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	9e af       	std	Y+62, r25	; 0x3e
    19d6:	8d af       	std	Y+61, r24	; 0x3d
    19d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    19da:	9e ad       	ldd	r25, Y+62	; 0x3e
    19dc:	9a af       	std	Y+58, r25	; 0x3a
    19de:	89 af       	std	Y+57, r24	; 0x39
    19e0:	89 ad       	ldd	r24, Y+57	; 0x39
    19e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	f1 f7       	brne	.-4      	; 0x19e4 <LCD_sendCommand+0x472>
    19e8:	9a af       	std	Y+58, r25	; 0x3a
    19ea:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	62 e0       	ldi	r22, 0x02	; 2
    19f0:	40 e0       	ldi	r20, 0x00	; 0
    19f2:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	a0 e8       	ldi	r26, 0x80	; 128
    19fc:	bf e3       	ldi	r27, 0x3F	; 63
    19fe:	8d ab       	std	Y+53, r24	; 0x35
    1a00:	9e ab       	std	Y+54, r25	; 0x36
    1a02:	af ab       	std	Y+55, r26	; 0x37
    1a04:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a06:	6d a9       	ldd	r22, Y+53	; 0x35
    1a08:	7e a9       	ldd	r23, Y+54	; 0x36
    1a0a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a0c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	4a e7       	ldi	r20, 0x7A	; 122
    1a14:	53 e4       	ldi	r21, 0x43	; 67
    1a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	89 ab       	std	Y+49, r24	; 0x31
    1a20:	9a ab       	std	Y+50, r25	; 0x32
    1a22:	ab ab       	std	Y+51, r26	; 0x33
    1a24:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a26:	69 a9       	ldd	r22, Y+49	; 0x31
    1a28:	7a a9       	ldd	r23, Y+50	; 0x32
    1a2a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a2c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e8       	ldi	r20, 0x80	; 128
    1a34:	5f e3       	ldi	r21, 0x3F	; 63
    1a36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a3a:	88 23       	and	r24, r24
    1a3c:	2c f4       	brge	.+10     	; 0x1a48 <LCD_sendCommand+0x4d6>
		__ticks = 1;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	98 ab       	std	Y+48, r25	; 0x30
    1a44:	8f a7       	std	Y+47, r24	; 0x2f
    1a46:	3f c0       	rjmp	.+126    	; 0x1ac6 <LCD_sendCommand+0x554>
	else if (__tmp > 65535)
    1a48:	69 a9       	ldd	r22, Y+49	; 0x31
    1a4a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a4c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a4e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	3f ef       	ldi	r19, 0xFF	; 255
    1a54:	4f e7       	ldi	r20, 0x7F	; 127
    1a56:	57 e4       	ldi	r21, 0x47	; 71
    1a58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a5c:	18 16       	cp	r1, r24
    1a5e:	4c f5       	brge	.+82     	; 0x1ab2 <LCD_sendCommand+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a60:	6d a9       	ldd	r22, Y+53	; 0x35
    1a62:	7e a9       	ldd	r23, Y+54	; 0x36
    1a64:	8f a9       	ldd	r24, Y+55	; 0x37
    1a66:	98 ad       	ldd	r25, Y+56	; 0x38
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e2       	ldi	r20, 0x20	; 32
    1a6e:	51 e4       	ldi	r21, 0x41	; 65
    1a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	bc 01       	movw	r22, r24
    1a7a:	cd 01       	movw	r24, r26
    1a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	98 ab       	std	Y+48, r25	; 0x30
    1a86:	8f a7       	std	Y+47, r24	; 0x2f
    1a88:	0f c0       	rjmp	.+30     	; 0x1aa8 <LCD_sendCommand+0x536>
    1a8a:	89 e1       	ldi	r24, 0x19	; 25
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	9e a7       	std	Y+46, r25	; 0x2e
    1a90:	8d a7       	std	Y+45, r24	; 0x2d
    1a92:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a94:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <LCD_sendCommand+0x524>
    1a9a:	9e a7       	std	Y+46, r25	; 0x2e
    1a9c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aa0:	98 a9       	ldd	r25, Y+48	; 0x30
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	98 ab       	std	Y+48, r25	; 0x30
    1aa6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aaa:	98 a9       	ldd	r25, Y+48	; 0x30
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	69 f7       	brne	.-38     	; 0x1a8a <LCD_sendCommand+0x518>
    1ab0:	14 c0       	rjmp	.+40     	; 0x1ada <LCD_sendCommand+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ab4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ab6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ab8:	9c a9       	ldd	r25, Y+52	; 0x34
    1aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	98 ab       	std	Y+48, r25	; 0x30
    1ac4:	8f a7       	std	Y+47, r24	; 0x2f
    1ac6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ac8:	98 a9       	ldd	r25, Y+48	; 0x30
    1aca:	9c a7       	std	Y+44, r25	; 0x2c
    1acc:	8b a7       	std	Y+43, r24	; 0x2b
    1ace:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ad0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <LCD_sendCommand+0x560>
    1ad6:	9c a7       	std	Y+44, r25	; 0x2c
    1ad8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	62 e0       	ldi	r22, 0x02	; 2
    1ade:	41 e0       	ldi	r20, 0x01	; 1
    1ae0:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	a0 e8       	ldi	r26, 0x80	; 128
    1aea:	bf e3       	ldi	r27, 0x3F	; 63
    1aec:	8f a3       	std	Y+39, r24	; 0x27
    1aee:	98 a7       	std	Y+40, r25	; 0x28
    1af0:	a9 a7       	std	Y+41, r26	; 0x29
    1af2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af4:	6f a1       	ldd	r22, Y+39	; 0x27
    1af6:	78 a5       	ldd	r23, Y+40	; 0x28
    1af8:	89 a5       	ldd	r24, Y+41	; 0x29
    1afa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	4a e7       	ldi	r20, 0x7A	; 122
    1b02:	53 e4       	ldi	r21, 0x43	; 67
    1b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	8b a3       	std	Y+35, r24	; 0x23
    1b0e:	9c a3       	std	Y+36, r25	; 0x24
    1b10:	ad a3       	std	Y+37, r26	; 0x25
    1b12:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b14:	6b a1       	ldd	r22, Y+35	; 0x23
    1b16:	7c a1       	ldd	r23, Y+36	; 0x24
    1b18:	8d a1       	ldd	r24, Y+37	; 0x25
    1b1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e8       	ldi	r20, 0x80	; 128
    1b22:	5f e3       	ldi	r21, 0x3F	; 63
    1b24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b28:	88 23       	and	r24, r24
    1b2a:	2c f4       	brge	.+10     	; 0x1b36 <LCD_sendCommand+0x5c4>
		__ticks = 1;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	9a a3       	std	Y+34, r25	; 0x22
    1b32:	89 a3       	std	Y+33, r24	; 0x21
    1b34:	3f c0       	rjmp	.+126    	; 0x1bb4 <LCD_sendCommand+0x642>
	else if (__tmp > 65535)
    1b36:	6b a1       	ldd	r22, Y+35	; 0x23
    1b38:	7c a1       	ldd	r23, Y+36	; 0x24
    1b3a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b3c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	3f ef       	ldi	r19, 0xFF	; 255
    1b42:	4f e7       	ldi	r20, 0x7F	; 127
    1b44:	57 e4       	ldi	r21, 0x47	; 71
    1b46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b4a:	18 16       	cp	r1, r24
    1b4c:	4c f5       	brge	.+82     	; 0x1ba0 <LCD_sendCommand+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4e:	6f a1       	ldd	r22, Y+39	; 0x27
    1b50:	78 a5       	ldd	r23, Y+40	; 0x28
    1b52:	89 a5       	ldd	r24, Y+41	; 0x29
    1b54:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e2       	ldi	r20, 0x20	; 32
    1b5c:	51 e4       	ldi	r21, 0x41	; 65
    1b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	bc 01       	movw	r22, r24
    1b68:	cd 01       	movw	r24, r26
    1b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	9a a3       	std	Y+34, r25	; 0x22
    1b74:	89 a3       	std	Y+33, r24	; 0x21
    1b76:	0f c0       	rjmp	.+30     	; 0x1b96 <LCD_sendCommand+0x624>
    1b78:	89 e1       	ldi	r24, 0x19	; 25
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	98 a3       	std	Y+32, r25	; 0x20
    1b7e:	8f 8f       	std	Y+31, r24	; 0x1f
    1b80:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b82:	98 a1       	ldd	r25, Y+32	; 0x20
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <LCD_sendCommand+0x612>
    1b88:	98 a3       	std	Y+32, r25	; 0x20
    1b8a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b8e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	9a a3       	std	Y+34, r25	; 0x22
    1b94:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b96:	89 a1       	ldd	r24, Y+33	; 0x21
    1b98:	9a a1       	ldd	r25, Y+34	; 0x22
    1b9a:	00 97       	sbiw	r24, 0x00	; 0
    1b9c:	69 f7       	brne	.-38     	; 0x1b78 <LCD_sendCommand+0x606>
    1b9e:	14 c0       	rjmp	.+40     	; 0x1bc8 <LCD_sendCommand+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ba2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ba4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ba6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	9a a3       	std	Y+34, r25	; 0x22
    1bb2:	89 a3       	std	Y+33, r24	; 0x21
    1bb4:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb6:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb8:	9e 8f       	std	Y+30, r25	; 0x1e
    1bba:	8d 8f       	std	Y+29, r24	; 0x1d
    1bbc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bbe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <LCD_sendCommand+0x64e>
    1bc4:	9e 8f       	std	Y+30, r25	; 0x1e
    1bc6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command,0));
    1bc8:	fe 01       	movw	r30, r28
    1bca:	ed 59       	subi	r30, 0x9D	; 157
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	80 81       	ld	r24, Z
    1bd0:	98 2f       	mov	r25, r24
    1bd2:	91 70       	andi	r25, 0x01	; 1
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	63 e0       	ldi	r22, 0x03	; 3
    1bd8:	49 2f       	mov	r20, r25
    1bda:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command,1));
    1bde:	fe 01       	movw	r30, r28
    1be0:	ed 59       	subi	r30, 0x9D	; 157
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	80 81       	ld	r24, Z
    1be6:	86 95       	lsr	r24
    1be8:	98 2f       	mov	r25, r24
    1bea:	91 70       	andi	r25, 0x01	; 1
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	64 e0       	ldi	r22, 0x04	; 4
    1bf0:	49 2f       	mov	r20, r25
    1bf2:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command,2));
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	ed 59       	subi	r30, 0x9D	; 157
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	80 81       	ld	r24, Z
    1bfe:	86 95       	lsr	r24
    1c00:	86 95       	lsr	r24
    1c02:	98 2f       	mov	r25, r24
    1c04:	91 70       	andi	r25, 0x01	; 1
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	65 e0       	ldi	r22, 0x05	; 5
    1c0a:	49 2f       	mov	r20, r25
    1c0c:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command,3));
    1c10:	fe 01       	movw	r30, r28
    1c12:	ed 59       	subi	r30, 0x9D	; 157
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	80 81       	ld	r24, Z
    1c18:	86 95       	lsr	r24
    1c1a:	86 95       	lsr	r24
    1c1c:	86 95       	lsr	r24
    1c1e:	98 2f       	mov	r25, r24
    1c20:	91 70       	andi	r25, 0x01	; 1
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	66 e0       	ldi	r22, 0x06	; 6
    1c26:	49 2f       	mov	r20, r25
    1c28:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	a0 e8       	ldi	r26, 0x80	; 128
    1c32:	bf e3       	ldi	r27, 0x3F	; 63
    1c34:	89 8f       	std	Y+25, r24	; 0x19
    1c36:	9a 8f       	std	Y+26, r25	; 0x1a
    1c38:	ab 8f       	std	Y+27, r26	; 0x1b
    1c3a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	4a e7       	ldi	r20, 0x7A	; 122
    1c4a:	53 e4       	ldi	r21, 0x43	; 67
    1c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	8d 8b       	std	Y+21, r24	; 0x15
    1c56:	9e 8b       	std	Y+22, r25	; 0x16
    1c58:	af 8b       	std	Y+23, r26	; 0x17
    1c5a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c60:	8f 89       	ldd	r24, Y+23	; 0x17
    1c62:	98 8d       	ldd	r25, Y+24	; 0x18
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e8       	ldi	r20, 0x80	; 128
    1c6a:	5f e3       	ldi	r21, 0x3F	; 63
    1c6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c70:	88 23       	and	r24, r24
    1c72:	2c f4       	brge	.+10     	; 0x1c7e <LCD_sendCommand+0x70c>
		__ticks = 1;
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	9c 8b       	std	Y+20, r25	; 0x14
    1c7a:	8b 8b       	std	Y+19, r24	; 0x13
    1c7c:	3f c0       	rjmp	.+126    	; 0x1cfc <LCD_sendCommand+0x78a>
	else if (__tmp > 65535)
    1c7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c80:	7e 89       	ldd	r23, Y+22	; 0x16
    1c82:	8f 89       	ldd	r24, Y+23	; 0x17
    1c84:	98 8d       	ldd	r25, Y+24	; 0x18
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	3f ef       	ldi	r19, 0xFF	; 255
    1c8a:	4f e7       	ldi	r20, 0x7F	; 127
    1c8c:	57 e4       	ldi	r21, 0x47	; 71
    1c8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c92:	18 16       	cp	r1, r24
    1c94:	4c f5       	brge	.+82     	; 0x1ce8 <LCD_sendCommand+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c96:	69 8d       	ldd	r22, Y+25	; 0x19
    1c98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e2       	ldi	r20, 0x20	; 32
    1ca4:	51 e4       	ldi	r21, 0x41	; 65
    1ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	bc 01       	movw	r22, r24
    1cb0:	cd 01       	movw	r24, r26
    1cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	9c 8b       	std	Y+20, r25	; 0x14
    1cbc:	8b 8b       	std	Y+19, r24	; 0x13
    1cbe:	0f c0       	rjmp	.+30     	; 0x1cde <LCD_sendCommand+0x76c>
    1cc0:	89 e1       	ldi	r24, 0x19	; 25
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	9a 8b       	std	Y+18, r25	; 0x12
    1cc6:	89 8b       	std	Y+17, r24	; 0x11
    1cc8:	89 89       	ldd	r24, Y+17	; 0x11
    1cca:	9a 89       	ldd	r25, Y+18	; 0x12
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <LCD_sendCommand+0x75a>
    1cd0:	9a 8b       	std	Y+18, r25	; 0x12
    1cd2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd4:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd6:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	9c 8b       	std	Y+20, r25	; 0x14
    1cdc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cde:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce2:	00 97       	sbiw	r24, 0x00	; 0
    1ce4:	69 f7       	brne	.-38     	; 0x1cc0 <LCD_sendCommand+0x74e>
    1ce6:	14 c0       	rjmp	.+40     	; 0x1d10 <LCD_sendCommand+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce8:	6d 89       	ldd	r22, Y+21	; 0x15
    1cea:	7e 89       	ldd	r23, Y+22	; 0x16
    1cec:	8f 89       	ldd	r24, Y+23	; 0x17
    1cee:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	9c 8b       	std	Y+20, r25	; 0x14
    1cfa:	8b 8b       	std	Y+19, r24	; 0x13
    1cfc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cfe:	9c 89       	ldd	r25, Y+20	; 0x14
    1d00:	98 8b       	std	Y+16, r25	; 0x10
    1d02:	8f 87       	std	Y+15, r24	; 0x0f
    1d04:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d06:	98 89       	ldd	r25, Y+16	; 0x10
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	f1 f7       	brne	.-4      	; 0x1d08 <LCD_sendCommand+0x796>
    1d0c:	98 8b       	std	Y+16, r25	; 0x10
    1d0e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	62 e0       	ldi	r22, 0x02	; 2
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	a0 e8       	ldi	r26, 0x80	; 128
    1d20:	bf e3       	ldi	r27, 0x3F	; 63
    1d22:	8b 87       	std	Y+11, r24	; 0x0b
    1d24:	9c 87       	std	Y+12, r25	; 0x0c
    1d26:	ad 87       	std	Y+13, r26	; 0x0d
    1d28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	4a e7       	ldi	r20, 0x7A	; 122
    1d38:	53 e4       	ldi	r21, 0x43	; 67
    1d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	8f 83       	std	Y+7, r24	; 0x07
    1d44:	98 87       	std	Y+8, r25	; 0x08
    1d46:	a9 87       	std	Y+9, r26	; 0x09
    1d48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d4c:	78 85       	ldd	r23, Y+8	; 0x08
    1d4e:	89 85       	ldd	r24, Y+9	; 0x09
    1d50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	40 e8       	ldi	r20, 0x80	; 128
    1d58:	5f e3       	ldi	r21, 0x3F	; 63
    1d5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d5e:	88 23       	and	r24, r24
    1d60:	2c f4       	brge	.+10     	; 0x1d6c <LCD_sendCommand+0x7fa>
		__ticks = 1;
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	9e 83       	std	Y+6, r25	; 0x06
    1d68:	8d 83       	std	Y+5, r24	; 0x05
    1d6a:	3f c0       	rjmp	.+126    	; 0x1dea <LCD_sendCommand+0x878>
	else if (__tmp > 65535)
    1d6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6e:	78 85       	ldd	r23, Y+8	; 0x08
    1d70:	89 85       	ldd	r24, Y+9	; 0x09
    1d72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	3f ef       	ldi	r19, 0xFF	; 255
    1d78:	4f e7       	ldi	r20, 0x7F	; 127
    1d7a:	57 e4       	ldi	r21, 0x47	; 71
    1d7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d80:	18 16       	cp	r1, r24
    1d82:	4c f5       	brge	.+82     	; 0x1dd6 <LCD_sendCommand+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e2       	ldi	r20, 0x20	; 32
    1d92:	51 e4       	ldi	r21, 0x41	; 65
    1d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	bc 01       	movw	r22, r24
    1d9e:	cd 01       	movw	r24, r26
    1da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	9e 83       	std	Y+6, r25	; 0x06
    1daa:	8d 83       	std	Y+5, r24	; 0x05
    1dac:	0f c0       	rjmp	.+30     	; 0x1dcc <LCD_sendCommand+0x85a>
    1dae:	89 e1       	ldi	r24, 0x19	; 25
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	9c 83       	std	Y+4, r25	; 0x04
    1db4:	8b 83       	std	Y+3, r24	; 0x03
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <LCD_sendCommand+0x848>
    1dbe:	9c 83       	std	Y+4, r25	; 0x04
    1dc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	9e 83       	std	Y+6, r25	; 0x06
    1dca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dce:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd0:	00 97       	sbiw	r24, 0x00	; 0
    1dd2:	69 f7       	brne	.-38     	; 0x1dae <LCD_sendCommand+0x83c>
    1dd4:	14 c0       	rjmp	.+40     	; 0x1dfe <LCD_sendCommand+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd8:	78 85       	ldd	r23, Y+8	; 0x08
    1dda:	89 85       	ldd	r24, Y+9	; 0x09
    1ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	9e 83       	std	Y+6, r25	; 0x06
    1de8:	8d 83       	std	Y+5, r24	; 0x05
    1dea:	8d 81       	ldd	r24, Y+5	; 0x05
    1dec:	9e 81       	ldd	r25, Y+6	; 0x06
    1dee:	9a 83       	std	Y+2, r25	; 0x02
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	9a 81       	ldd	r25, Y+2	; 0x02
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	f1 f7       	brne	.-4      	; 0x1df6 <LCD_sendCommand+0x884>
    1dfa:	9a 83       	std	Y+2, r25	; 0x02
    1dfc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#endif
}
    1dfe:	cd 59       	subi	r28, 0x9D	; 157
    1e00:	df 4f       	sbci	r29, 0xFF	; 255
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	f8 94       	cli
    1e06:	de bf       	out	0x3e, r29	; 62
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	cd bf       	out	0x3d, r28	; 61
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	1f 91       	pop	r17
    1e12:	0f 91       	pop	r16
    1e14:	08 95       	ret

00001e16 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1e16:	0f 93       	push	r16
    1e18:	1f 93       	push	r17
    1e1a:	df 93       	push	r29
    1e1c:	cf 93       	push	r28
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	c3 56       	subi	r28, 0x63	; 99
    1e24:	d0 40       	sbci	r29, 0x00	; 0
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	f8 94       	cli
    1e2a:	de bf       	out	0x3e, r29	; 62
    1e2c:	0f be       	out	0x3f, r0	; 63
    1e2e:	cd bf       	out	0x3d, r28	; 61
    1e30:	fe 01       	movw	r30, r28
    1e32:	ed 59       	subi	r30, 0x9D	; 157
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID	, LOGIC_HIGH); /* Rs = 0 */
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	61 e0       	ldi	r22, 0x01	; 1
    1e3c:	41 e0       	ldi	r20, 0x01	; 1
    1e3e:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
    1e42:	fe 01       	movw	r30, r28
    1e44:	e1 5a       	subi	r30, 0xA1	; 161
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	a0 e8       	ldi	r26, 0x80	; 128
    1e4e:	bf e3       	ldi	r27, 0x3F	; 63
    1e50:	80 83       	st	Z, r24
    1e52:	91 83       	std	Z+1, r25	; 0x01
    1e54:	a2 83       	std	Z+2, r26	; 0x02
    1e56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e58:	8e 01       	movw	r16, r28
    1e5a:	05 5a       	subi	r16, 0xA5	; 165
    1e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5e:	fe 01       	movw	r30, r28
    1e60:	e1 5a       	subi	r30, 0xA1	; 161
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	60 81       	ld	r22, Z
    1e66:	71 81       	ldd	r23, Z+1	; 0x01
    1e68:	82 81       	ldd	r24, Z+2	; 0x02
    1e6a:	93 81       	ldd	r25, Z+3	; 0x03
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	4a e7       	ldi	r20, 0x7A	; 122
    1e72:	53 e4       	ldi	r21, 0x43	; 67
    1e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	f8 01       	movw	r30, r16
    1e7e:	80 83       	st	Z, r24
    1e80:	91 83       	std	Z+1, r25	; 0x01
    1e82:	a2 83       	std	Z+2, r26	; 0x02
    1e84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e86:	fe 01       	movw	r30, r28
    1e88:	e5 5a       	subi	r30, 0xA5	; 165
    1e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8c:	60 81       	ld	r22, Z
    1e8e:	71 81       	ldd	r23, Z+1	; 0x01
    1e90:	82 81       	ldd	r24, Z+2	; 0x02
    1e92:	93 81       	ldd	r25, Z+3	; 0x03
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e8       	ldi	r20, 0x80	; 128
    1e9a:	5f e3       	ldi	r21, 0x3F	; 63
    1e9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea0:	88 23       	and	r24, r24
    1ea2:	44 f4       	brge	.+16     	; 0x1eb4 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	e7 5a       	subi	r30, 0xA7	; 167
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	91 83       	std	Z+1, r25	; 0x01
    1eb0:	80 83       	st	Z, r24
    1eb2:	64 c0       	rjmp	.+200    	; 0x1f7c <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	e5 5a       	subi	r30, 0xA5	; 165
    1eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eba:	60 81       	ld	r22, Z
    1ebc:	71 81       	ldd	r23, Z+1	; 0x01
    1ebe:	82 81       	ldd	r24, Z+2	; 0x02
    1ec0:	93 81       	ldd	r25, Z+3	; 0x03
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	3f ef       	ldi	r19, 0xFF	; 255
    1ec6:	4f e7       	ldi	r20, 0x7F	; 127
    1ec8:	57 e4       	ldi	r21, 0x47	; 71
    1eca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ece:	18 16       	cp	r1, r24
    1ed0:	0c f0       	brlt	.+2      	; 0x1ed4 <LCD_displayCharacter+0xbe>
    1ed2:	43 c0       	rjmp	.+134    	; 0x1f5a <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	e1 5a       	subi	r30, 0xA1	; 161
    1ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eda:	60 81       	ld	r22, Z
    1edc:	71 81       	ldd	r23, Z+1	; 0x01
    1ede:	82 81       	ldd	r24, Z+2	; 0x02
    1ee0:	93 81       	ldd	r25, Z+3	; 0x03
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	40 e2       	ldi	r20, 0x20	; 32
    1ee8:	51 e4       	ldi	r21, 0x41	; 65
    1eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	8e 01       	movw	r16, r28
    1ef4:	07 5a       	subi	r16, 0xA7	; 167
    1ef6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef8:	bc 01       	movw	r22, r24
    1efa:	cd 01       	movw	r24, r26
    1efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	f8 01       	movw	r30, r16
    1f06:	91 83       	std	Z+1, r25	; 0x01
    1f08:	80 83       	st	Z, r24
    1f0a:	1f c0       	rjmp	.+62     	; 0x1f4a <LCD_displayCharacter+0x134>
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	e9 5a       	subi	r30, 0xA9	; 169
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	89 e1       	ldi	r24, 0x19	; 25
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	91 83       	std	Z+1, r25	; 0x01
    1f18:	80 83       	st	Z, r24
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	e9 5a       	subi	r30, 0xA9	; 169
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	80 81       	ld	r24, Z
    1f22:	91 81       	ldd	r25, Z+1	; 0x01
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	f1 f7       	brne	.-4      	; 0x1f24 <LCD_displayCharacter+0x10e>
    1f28:	fe 01       	movw	r30, r28
    1f2a:	e9 5a       	subi	r30, 0xA9	; 169
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	91 83       	std	Z+1, r25	; 0x01
    1f30:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f32:	de 01       	movw	r26, r28
    1f34:	a7 5a       	subi	r26, 0xA7	; 167
    1f36:	bf 4f       	sbci	r27, 0xFF	; 255
    1f38:	fe 01       	movw	r30, r28
    1f3a:	e7 5a       	subi	r30, 0xA7	; 167
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	80 81       	ld	r24, Z
    1f40:	91 81       	ldd	r25, Z+1	; 0x01
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	11 96       	adiw	r26, 0x01	; 1
    1f46:	9c 93       	st	X, r25
    1f48:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	e7 5a       	subi	r30, 0xA7	; 167
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	80 81       	ld	r24, Z
    1f52:	91 81       	ldd	r25, Z+1	; 0x01
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	d1 f6       	brne	.-76     	; 0x1f0c <LCD_displayCharacter+0xf6>
    1f58:	27 c0       	rjmp	.+78     	; 0x1fa8 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5a:	8e 01       	movw	r16, r28
    1f5c:	07 5a       	subi	r16, 0xA7	; 167
    1f5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f60:	fe 01       	movw	r30, r28
    1f62:	e5 5a       	subi	r30, 0xA5	; 165
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	60 81       	ld	r22, Z
    1f68:	71 81       	ldd	r23, Z+1	; 0x01
    1f6a:	82 81       	ldd	r24, Z+2	; 0x02
    1f6c:	93 81       	ldd	r25, Z+3	; 0x03
    1f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	f8 01       	movw	r30, r16
    1f78:	91 83       	std	Z+1, r25	; 0x01
    1f7a:	80 83       	st	Z, r24
    1f7c:	de 01       	movw	r26, r28
    1f7e:	ab 5a       	subi	r26, 0xAB	; 171
    1f80:	bf 4f       	sbci	r27, 0xFF	; 255
    1f82:	fe 01       	movw	r30, r28
    1f84:	e7 5a       	subi	r30, 0xA7	; 167
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	80 81       	ld	r24, Z
    1f8a:	91 81       	ldd	r25, Z+1	; 0x01
    1f8c:	8d 93       	st	X+, r24
    1f8e:	9c 93       	st	X, r25
    1f90:	fe 01       	movw	r30, r28
    1f92:	eb 5a       	subi	r30, 0xAB	; 171
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	80 81       	ld	r24, Z
    1f98:	91 81       	ldd	r25, Z+1	; 0x01
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <LCD_displayCharacter+0x184>
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	eb 5a       	subi	r30, 0xAB	; 171
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	91 83       	std	Z+1, r25	; 0x01
    1fa6:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable = 1 */
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	62 e0       	ldi	r22, 0x02	; 2
    1fac:	41 e0       	ldi	r20, 0x01	; 1
    1fae:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	ef 5a       	subi	r30, 0xAF	; 175
    1fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	a0 e8       	ldi	r26, 0x80	; 128
    1fbe:	bf e3       	ldi	r27, 0x3F	; 63
    1fc0:	80 83       	st	Z, r24
    1fc2:	91 83       	std	Z+1, r25	; 0x01
    1fc4:	a2 83       	std	Z+2, r26	; 0x02
    1fc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc8:	8e 01       	movw	r16, r28
    1fca:	03 5b       	subi	r16, 0xB3	; 179
    1fcc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fce:	fe 01       	movw	r30, r28
    1fd0:	ef 5a       	subi	r30, 0xAF	; 175
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	60 81       	ld	r22, Z
    1fd6:	71 81       	ldd	r23, Z+1	; 0x01
    1fd8:	82 81       	ldd	r24, Z+2	; 0x02
    1fda:	93 81       	ldd	r25, Z+3	; 0x03
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	4a e7       	ldi	r20, 0x7A	; 122
    1fe2:	53 e4       	ldi	r21, 0x43	; 67
    1fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	f8 01       	movw	r30, r16
    1fee:	80 83       	st	Z, r24
    1ff0:	91 83       	std	Z+1, r25	; 0x01
    1ff2:	a2 83       	std	Z+2, r26	; 0x02
    1ff4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	e3 5b       	subi	r30, 0xB3	; 179
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	60 81       	ld	r22, Z
    1ffe:	71 81       	ldd	r23, Z+1	; 0x01
    2000:	82 81       	ldd	r24, Z+2	; 0x02
    2002:	93 81       	ldd	r25, Z+3	; 0x03
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e8       	ldi	r20, 0x80	; 128
    200a:	5f e3       	ldi	r21, 0x3F	; 63
    200c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2010:	88 23       	and	r24, r24
    2012:	44 f4       	brge	.+16     	; 0x2024 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2014:	fe 01       	movw	r30, r28
    2016:	e5 5b       	subi	r30, 0xB5	; 181
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	91 83       	std	Z+1, r25	; 0x01
    2020:	80 83       	st	Z, r24
    2022:	64 c0       	rjmp	.+200    	; 0x20ec <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2024:	fe 01       	movw	r30, r28
    2026:	e3 5b       	subi	r30, 0xB3	; 179
    2028:	ff 4f       	sbci	r31, 0xFF	; 255
    202a:	60 81       	ld	r22, Z
    202c:	71 81       	ldd	r23, Z+1	; 0x01
    202e:	82 81       	ldd	r24, Z+2	; 0x02
    2030:	93 81       	ldd	r25, Z+3	; 0x03
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	3f ef       	ldi	r19, 0xFF	; 255
    2036:	4f e7       	ldi	r20, 0x7F	; 127
    2038:	57 e4       	ldi	r21, 0x47	; 71
    203a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    203e:	18 16       	cp	r1, r24
    2040:	0c f0       	brlt	.+2      	; 0x2044 <LCD_displayCharacter+0x22e>
    2042:	43 c0       	rjmp	.+134    	; 0x20ca <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2044:	fe 01       	movw	r30, r28
    2046:	ef 5a       	subi	r30, 0xAF	; 175
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	60 81       	ld	r22, Z
    204c:	71 81       	ldd	r23, Z+1	; 0x01
    204e:	82 81       	ldd	r24, Z+2	; 0x02
    2050:	93 81       	ldd	r25, Z+3	; 0x03
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	40 e2       	ldi	r20, 0x20	; 32
    2058:	51 e4       	ldi	r21, 0x41	; 65
    205a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	8e 01       	movw	r16, r28
    2064:	05 5b       	subi	r16, 0xB5	; 181
    2066:	1f 4f       	sbci	r17, 0xFF	; 255
    2068:	bc 01       	movw	r22, r24
    206a:	cd 01       	movw	r24, r26
    206c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	f8 01       	movw	r30, r16
    2076:	91 83       	std	Z+1, r25	; 0x01
    2078:	80 83       	st	Z, r24
    207a:	1f c0       	rjmp	.+62     	; 0x20ba <LCD_displayCharacter+0x2a4>
    207c:	fe 01       	movw	r30, r28
    207e:	e7 5b       	subi	r30, 0xB7	; 183
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	89 e1       	ldi	r24, 0x19	; 25
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	91 83       	std	Z+1, r25	; 0x01
    2088:	80 83       	st	Z, r24
    208a:	fe 01       	movw	r30, r28
    208c:	e7 5b       	subi	r30, 0xB7	; 183
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	80 81       	ld	r24, Z
    2092:	91 81       	ldd	r25, Z+1	; 0x01
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	f1 f7       	brne	.-4      	; 0x2094 <LCD_displayCharacter+0x27e>
    2098:	fe 01       	movw	r30, r28
    209a:	e7 5b       	subi	r30, 0xB7	; 183
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	91 83       	std	Z+1, r25	; 0x01
    20a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a2:	de 01       	movw	r26, r28
    20a4:	a5 5b       	subi	r26, 0xB5	; 181
    20a6:	bf 4f       	sbci	r27, 0xFF	; 255
    20a8:	fe 01       	movw	r30, r28
    20aa:	e5 5b       	subi	r30, 0xB5	; 181
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	80 81       	ld	r24, Z
    20b0:	91 81       	ldd	r25, Z+1	; 0x01
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	11 96       	adiw	r26, 0x01	; 1
    20b6:	9c 93       	st	X, r25
    20b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ba:	fe 01       	movw	r30, r28
    20bc:	e5 5b       	subi	r30, 0xB5	; 181
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	80 81       	ld	r24, Z
    20c2:	91 81       	ldd	r25, Z+1	; 0x01
    20c4:	00 97       	sbiw	r24, 0x00	; 0
    20c6:	d1 f6       	brne	.-76     	; 0x207c <LCD_displayCharacter+0x266>
    20c8:	27 c0       	rjmp	.+78     	; 0x2118 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ca:	8e 01       	movw	r16, r28
    20cc:	05 5b       	subi	r16, 0xB5	; 181
    20ce:	1f 4f       	sbci	r17, 0xFF	; 255
    20d0:	fe 01       	movw	r30, r28
    20d2:	e3 5b       	subi	r30, 0xB3	; 179
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	60 81       	ld	r22, Z
    20d8:	71 81       	ldd	r23, Z+1	; 0x01
    20da:	82 81       	ldd	r24, Z+2	; 0x02
    20dc:	93 81       	ldd	r25, Z+3	; 0x03
    20de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	f8 01       	movw	r30, r16
    20e8:	91 83       	std	Z+1, r25	; 0x01
    20ea:	80 83       	st	Z, r24
    20ec:	de 01       	movw	r26, r28
    20ee:	a9 5b       	subi	r26, 0xB9	; 185
    20f0:	bf 4f       	sbci	r27, 0xFF	; 255
    20f2:	fe 01       	movw	r30, r28
    20f4:	e5 5b       	subi	r30, 0xB5	; 181
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	80 81       	ld	r24, Z
    20fa:	91 81       	ldd	r25, Z+1	; 0x01
    20fc:	8d 93       	st	X+, r24
    20fe:	9c 93       	st	X, r25
    2100:	fe 01       	movw	r30, r28
    2102:	e9 5b       	subi	r30, 0xB9	; 185
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	80 81       	ld	r24, Z
    2108:	91 81       	ldd	r25, Z+1	; 0x01
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <LCD_displayCharacter+0x2f4>
    210e:	fe 01       	movw	r30, r28
    2110:	e9 5b       	subi	r30, 0xB9	; 185
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	91 83       	std	Z+1, r25	; 0x01
    2116:	80 83       	st	Z, r24
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Enable = 1 */
	_delay_ms(1);

#elif(LCD_DATA_BITS_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data,4));
    2118:	fe 01       	movw	r30, r28
    211a:	ed 59       	subi	r30, 0x9D	; 157
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	80 81       	ld	r24, Z
    2120:	82 95       	swap	r24
    2122:	8f 70       	andi	r24, 0x0F	; 15
    2124:	98 2f       	mov	r25, r24
    2126:	91 70       	andi	r25, 0x01	; 1
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	63 e0       	ldi	r22, 0x03	; 3
    212c:	49 2f       	mov	r20, r25
    212e:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data,5));
    2132:	fe 01       	movw	r30, r28
    2134:	ed 59       	subi	r30, 0x9D	; 157
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	80 81       	ld	r24, Z
    213a:	82 95       	swap	r24
    213c:	86 95       	lsr	r24
    213e:	87 70       	andi	r24, 0x07	; 7
    2140:	98 2f       	mov	r25, r24
    2142:	91 70       	andi	r25, 0x01	; 1
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	64 e0       	ldi	r22, 0x04	; 4
    2148:	49 2f       	mov	r20, r25
    214a:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data,6));
    214e:	fe 01       	movw	r30, r28
    2150:	ed 59       	subi	r30, 0x9D	; 157
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	80 81       	ld	r24, Z
    2156:	82 95       	swap	r24
    2158:	86 95       	lsr	r24
    215a:	86 95       	lsr	r24
    215c:	83 70       	andi	r24, 0x03	; 3
    215e:	98 2f       	mov	r25, r24
    2160:	91 70       	andi	r25, 0x01	; 1
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	65 e0       	ldi	r22, 0x05	; 5
    2166:	49 2f       	mov	r20, r25
    2168:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data,7));
    216c:	fe 01       	movw	r30, r28
    216e:	ed 59       	subi	r30, 0x9D	; 157
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	80 81       	ld	r24, Z
    2174:	98 2f       	mov	r25, r24
    2176:	99 1f       	adc	r25, r25
    2178:	99 27       	eor	r25, r25
    217a:	99 1f       	adc	r25, r25
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	66 e0       	ldi	r22, 0x06	; 6
    2180:	49 2f       	mov	r20, r25
    2182:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
    2186:	fe 01       	movw	r30, r28
    2188:	ed 5b       	subi	r30, 0xBD	; 189
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	a0 e8       	ldi	r26, 0x80	; 128
    2192:	bf e3       	ldi	r27, 0x3F	; 63
    2194:	80 83       	st	Z, r24
    2196:	91 83       	std	Z+1, r25	; 0x01
    2198:	a2 83       	std	Z+2, r26	; 0x02
    219a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219c:	8e 01       	movw	r16, r28
    219e:	01 5c       	subi	r16, 0xC1	; 193
    21a0:	1f 4f       	sbci	r17, 0xFF	; 255
    21a2:	fe 01       	movw	r30, r28
    21a4:	ed 5b       	subi	r30, 0xBD	; 189
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	60 81       	ld	r22, Z
    21aa:	71 81       	ldd	r23, Z+1	; 0x01
    21ac:	82 81       	ldd	r24, Z+2	; 0x02
    21ae:	93 81       	ldd	r25, Z+3	; 0x03
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	4a e7       	ldi	r20, 0x7A	; 122
    21b6:	53 e4       	ldi	r21, 0x43	; 67
    21b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	f8 01       	movw	r30, r16
    21c2:	80 83       	st	Z, r24
    21c4:	91 83       	std	Z+1, r25	; 0x01
    21c6:	a2 83       	std	Z+2, r26	; 0x02
    21c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21ca:	fe 01       	movw	r30, r28
    21cc:	ff 96       	adiw	r30, 0x3f	; 63
    21ce:	60 81       	ld	r22, Z
    21d0:	71 81       	ldd	r23, Z+1	; 0x01
    21d2:	82 81       	ldd	r24, Z+2	; 0x02
    21d4:	93 81       	ldd	r25, Z+3	; 0x03
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e8       	ldi	r20, 0x80	; 128
    21dc:	5f e3       	ldi	r21, 0x3F	; 63
    21de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21e2:	88 23       	and	r24, r24
    21e4:	2c f4       	brge	.+10     	; 0x21f0 <LCD_displayCharacter+0x3da>
		__ticks = 1;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	9e af       	std	Y+62, r25	; 0x3e
    21ec:	8d af       	std	Y+61, r24	; 0x3d
    21ee:	46 c0       	rjmp	.+140    	; 0x227c <LCD_displayCharacter+0x466>
	else if (__tmp > 65535)
    21f0:	fe 01       	movw	r30, r28
    21f2:	ff 96       	adiw	r30, 0x3f	; 63
    21f4:	60 81       	ld	r22, Z
    21f6:	71 81       	ldd	r23, Z+1	; 0x01
    21f8:	82 81       	ldd	r24, Z+2	; 0x02
    21fa:	93 81       	ldd	r25, Z+3	; 0x03
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	3f ef       	ldi	r19, 0xFF	; 255
    2200:	4f e7       	ldi	r20, 0x7F	; 127
    2202:	57 e4       	ldi	r21, 0x47	; 71
    2204:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2208:	18 16       	cp	r1, r24
    220a:	64 f5       	brge	.+88     	; 0x2264 <LCD_displayCharacter+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220c:	fe 01       	movw	r30, r28
    220e:	ed 5b       	subi	r30, 0xBD	; 189
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	60 81       	ld	r22, Z
    2214:	71 81       	ldd	r23, Z+1	; 0x01
    2216:	82 81       	ldd	r24, Z+2	; 0x02
    2218:	93 81       	ldd	r25, Z+3	; 0x03
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	40 e2       	ldi	r20, 0x20	; 32
    2220:	51 e4       	ldi	r21, 0x41	; 65
    2222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	bc 01       	movw	r22, r24
    222c:	cd 01       	movw	r24, r26
    222e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	9e af       	std	Y+62, r25	; 0x3e
    2238:	8d af       	std	Y+61, r24	; 0x3d
    223a:	0f c0       	rjmp	.+30     	; 0x225a <LCD_displayCharacter+0x444>
    223c:	89 e1       	ldi	r24, 0x19	; 25
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	9c af       	std	Y+60, r25	; 0x3c
    2242:	8b af       	std	Y+59, r24	; 0x3b
    2244:	8b ad       	ldd	r24, Y+59	; 0x3b
    2246:	9c ad       	ldd	r25, Y+60	; 0x3c
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	f1 f7       	brne	.-4      	; 0x2248 <LCD_displayCharacter+0x432>
    224c:	9c af       	std	Y+60, r25	; 0x3c
    224e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2250:	8d ad       	ldd	r24, Y+61	; 0x3d
    2252:	9e ad       	ldd	r25, Y+62	; 0x3e
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	9e af       	std	Y+62, r25	; 0x3e
    2258:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    225a:	8d ad       	ldd	r24, Y+61	; 0x3d
    225c:	9e ad       	ldd	r25, Y+62	; 0x3e
    225e:	00 97       	sbiw	r24, 0x00	; 0
    2260:	69 f7       	brne	.-38     	; 0x223c <LCD_displayCharacter+0x426>
    2262:	16 c0       	rjmp	.+44     	; 0x2290 <LCD_displayCharacter+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2264:	fe 01       	movw	r30, r28
    2266:	ff 96       	adiw	r30, 0x3f	; 63
    2268:	60 81       	ld	r22, Z
    226a:	71 81       	ldd	r23, Z+1	; 0x01
    226c:	82 81       	ldd	r24, Z+2	; 0x02
    226e:	93 81       	ldd	r25, Z+3	; 0x03
    2270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	9e af       	std	Y+62, r25	; 0x3e
    227a:	8d af       	std	Y+61, r24	; 0x3d
    227c:	8d ad       	ldd	r24, Y+61	; 0x3d
    227e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2280:	9a af       	std	Y+58, r25	; 0x3a
    2282:	89 af       	std	Y+57, r24	; 0x39
    2284:	89 ad       	ldd	r24, Y+57	; 0x39
    2286:	9a ad       	ldd	r25, Y+58	; 0x3a
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <LCD_displayCharacter+0x472>
    228c:	9a af       	std	Y+58, r25	; 0x3a
    228e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	62 e0       	ldi	r22, 0x02	; 2
    2294:	40 e0       	ldi	r20, 0x00	; 0
    2296:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	a0 e8       	ldi	r26, 0x80	; 128
    22a0:	bf e3       	ldi	r27, 0x3F	; 63
    22a2:	8d ab       	std	Y+53, r24	; 0x35
    22a4:	9e ab       	std	Y+54, r25	; 0x36
    22a6:	af ab       	std	Y+55, r26	; 0x37
    22a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22aa:	6d a9       	ldd	r22, Y+53	; 0x35
    22ac:	7e a9       	ldd	r23, Y+54	; 0x36
    22ae:	8f a9       	ldd	r24, Y+55	; 0x37
    22b0:	98 ad       	ldd	r25, Y+56	; 0x38
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	4a e7       	ldi	r20, 0x7A	; 122
    22b8:	53 e4       	ldi	r21, 0x43	; 67
    22ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	89 ab       	std	Y+49, r24	; 0x31
    22c4:	9a ab       	std	Y+50, r25	; 0x32
    22c6:	ab ab       	std	Y+51, r26	; 0x33
    22c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22ca:	69 a9       	ldd	r22, Y+49	; 0x31
    22cc:	7a a9       	ldd	r23, Y+50	; 0x32
    22ce:	8b a9       	ldd	r24, Y+51	; 0x33
    22d0:	9c a9       	ldd	r25, Y+52	; 0x34
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	40 e8       	ldi	r20, 0x80	; 128
    22d8:	5f e3       	ldi	r21, 0x3F	; 63
    22da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22de:	88 23       	and	r24, r24
    22e0:	2c f4       	brge	.+10     	; 0x22ec <LCD_displayCharacter+0x4d6>
		__ticks = 1;
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	98 ab       	std	Y+48, r25	; 0x30
    22e8:	8f a7       	std	Y+47, r24	; 0x2f
    22ea:	3f c0       	rjmp	.+126    	; 0x236a <LCD_displayCharacter+0x554>
	else if (__tmp > 65535)
    22ec:	69 a9       	ldd	r22, Y+49	; 0x31
    22ee:	7a a9       	ldd	r23, Y+50	; 0x32
    22f0:	8b a9       	ldd	r24, Y+51	; 0x33
    22f2:	9c a9       	ldd	r25, Y+52	; 0x34
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	3f ef       	ldi	r19, 0xFF	; 255
    22f8:	4f e7       	ldi	r20, 0x7F	; 127
    22fa:	57 e4       	ldi	r21, 0x47	; 71
    22fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2300:	18 16       	cp	r1, r24
    2302:	4c f5       	brge	.+82     	; 0x2356 <LCD_displayCharacter+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2304:	6d a9       	ldd	r22, Y+53	; 0x35
    2306:	7e a9       	ldd	r23, Y+54	; 0x36
    2308:	8f a9       	ldd	r24, Y+55	; 0x37
    230a:	98 ad       	ldd	r25, Y+56	; 0x38
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	40 e2       	ldi	r20, 0x20	; 32
    2312:	51 e4       	ldi	r21, 0x41	; 65
    2314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	bc 01       	movw	r22, r24
    231e:	cd 01       	movw	r24, r26
    2320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	98 ab       	std	Y+48, r25	; 0x30
    232a:	8f a7       	std	Y+47, r24	; 0x2f
    232c:	0f c0       	rjmp	.+30     	; 0x234c <LCD_displayCharacter+0x536>
    232e:	89 e1       	ldi	r24, 0x19	; 25
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	9e a7       	std	Y+46, r25	; 0x2e
    2334:	8d a7       	std	Y+45, r24	; 0x2d
    2336:	8d a5       	ldd	r24, Y+45	; 0x2d
    2338:	9e a5       	ldd	r25, Y+46	; 0x2e
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	f1 f7       	brne	.-4      	; 0x233a <LCD_displayCharacter+0x524>
    233e:	9e a7       	std	Y+46, r25	; 0x2e
    2340:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2342:	8f a5       	ldd	r24, Y+47	; 0x2f
    2344:	98 a9       	ldd	r25, Y+48	; 0x30
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	98 ab       	std	Y+48, r25	; 0x30
    234a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    234c:	8f a5       	ldd	r24, Y+47	; 0x2f
    234e:	98 a9       	ldd	r25, Y+48	; 0x30
    2350:	00 97       	sbiw	r24, 0x00	; 0
    2352:	69 f7       	brne	.-38     	; 0x232e <LCD_displayCharacter+0x518>
    2354:	14 c0       	rjmp	.+40     	; 0x237e <LCD_displayCharacter+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2356:	69 a9       	ldd	r22, Y+49	; 0x31
    2358:	7a a9       	ldd	r23, Y+50	; 0x32
    235a:	8b a9       	ldd	r24, Y+51	; 0x33
    235c:	9c a9       	ldd	r25, Y+52	; 0x34
    235e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	98 ab       	std	Y+48, r25	; 0x30
    2368:	8f a7       	std	Y+47, r24	; 0x2f
    236a:	8f a5       	ldd	r24, Y+47	; 0x2f
    236c:	98 a9       	ldd	r25, Y+48	; 0x30
    236e:	9c a7       	std	Y+44, r25	; 0x2c
    2370:	8b a7       	std	Y+43, r24	; 0x2b
    2372:	8b a5       	ldd	r24, Y+43	; 0x2b
    2374:	9c a5       	ldd	r25, Y+44	; 0x2c
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	f1 f7       	brne	.-4      	; 0x2376 <LCD_displayCharacter+0x560>
    237a:	9c a7       	std	Y+44, r25	; 0x2c
    237c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	62 e0       	ldi	r22, 0x02	; 2
    2382:	41 e0       	ldi	r20, 0x01	; 1
    2384:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	a0 e8       	ldi	r26, 0x80	; 128
    238e:	bf e3       	ldi	r27, 0x3F	; 63
    2390:	8f a3       	std	Y+39, r24	; 0x27
    2392:	98 a7       	std	Y+40, r25	; 0x28
    2394:	a9 a7       	std	Y+41, r26	; 0x29
    2396:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2398:	6f a1       	ldd	r22, Y+39	; 0x27
    239a:	78 a5       	ldd	r23, Y+40	; 0x28
    239c:	89 a5       	ldd	r24, Y+41	; 0x29
    239e:	9a a5       	ldd	r25, Y+42	; 0x2a
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	4a e7       	ldi	r20, 0x7A	; 122
    23a6:	53 e4       	ldi	r21, 0x43	; 67
    23a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	8b a3       	std	Y+35, r24	; 0x23
    23b2:	9c a3       	std	Y+36, r25	; 0x24
    23b4:	ad a3       	std	Y+37, r26	; 0x25
    23b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23b8:	6b a1       	ldd	r22, Y+35	; 0x23
    23ba:	7c a1       	ldd	r23, Y+36	; 0x24
    23bc:	8d a1       	ldd	r24, Y+37	; 0x25
    23be:	9e a1       	ldd	r25, Y+38	; 0x26
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e8       	ldi	r20, 0x80	; 128
    23c6:	5f e3       	ldi	r21, 0x3F	; 63
    23c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23cc:	88 23       	and	r24, r24
    23ce:	2c f4       	brge	.+10     	; 0x23da <LCD_displayCharacter+0x5c4>
		__ticks = 1;
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	9a a3       	std	Y+34, r25	; 0x22
    23d6:	89 a3       	std	Y+33, r24	; 0x21
    23d8:	3f c0       	rjmp	.+126    	; 0x2458 <LCD_displayCharacter+0x642>
	else if (__tmp > 65535)
    23da:	6b a1       	ldd	r22, Y+35	; 0x23
    23dc:	7c a1       	ldd	r23, Y+36	; 0x24
    23de:	8d a1       	ldd	r24, Y+37	; 0x25
    23e0:	9e a1       	ldd	r25, Y+38	; 0x26
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	3f ef       	ldi	r19, 0xFF	; 255
    23e6:	4f e7       	ldi	r20, 0x7F	; 127
    23e8:	57 e4       	ldi	r21, 0x47	; 71
    23ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ee:	18 16       	cp	r1, r24
    23f0:	4c f5       	brge	.+82     	; 0x2444 <LCD_displayCharacter+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f2:	6f a1       	ldd	r22, Y+39	; 0x27
    23f4:	78 a5       	ldd	r23, Y+40	; 0x28
    23f6:	89 a5       	ldd	r24, Y+41	; 0x29
    23f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e2       	ldi	r20, 0x20	; 32
    2400:	51 e4       	ldi	r21, 0x41	; 65
    2402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	bc 01       	movw	r22, r24
    240c:	cd 01       	movw	r24, r26
    240e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	9a a3       	std	Y+34, r25	; 0x22
    2418:	89 a3       	std	Y+33, r24	; 0x21
    241a:	0f c0       	rjmp	.+30     	; 0x243a <LCD_displayCharacter+0x624>
    241c:	89 e1       	ldi	r24, 0x19	; 25
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	98 a3       	std	Y+32, r25	; 0x20
    2422:	8f 8f       	std	Y+31, r24	; 0x1f
    2424:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2426:	98 a1       	ldd	r25, Y+32	; 0x20
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	f1 f7       	brne	.-4      	; 0x2428 <LCD_displayCharacter+0x612>
    242c:	98 a3       	std	Y+32, r25	; 0x20
    242e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2430:	89 a1       	ldd	r24, Y+33	; 0x21
    2432:	9a a1       	ldd	r25, Y+34	; 0x22
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	9a a3       	std	Y+34, r25	; 0x22
    2438:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243a:	89 a1       	ldd	r24, Y+33	; 0x21
    243c:	9a a1       	ldd	r25, Y+34	; 0x22
    243e:	00 97       	sbiw	r24, 0x00	; 0
    2440:	69 f7       	brne	.-38     	; 0x241c <LCD_displayCharacter+0x606>
    2442:	14 c0       	rjmp	.+40     	; 0x246c <LCD_displayCharacter+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2444:	6b a1       	ldd	r22, Y+35	; 0x23
    2446:	7c a1       	ldd	r23, Y+36	; 0x24
    2448:	8d a1       	ldd	r24, Y+37	; 0x25
    244a:	9e a1       	ldd	r25, Y+38	; 0x26
    244c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	9a a3       	std	Y+34, r25	; 0x22
    2456:	89 a3       	std	Y+33, r24	; 0x21
    2458:	89 a1       	ldd	r24, Y+33	; 0x21
    245a:	9a a1       	ldd	r25, Y+34	; 0x22
    245c:	9e 8f       	std	Y+30, r25	; 0x1e
    245e:	8d 8f       	std	Y+29, r24	; 0x1d
    2460:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2462:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	f1 f7       	brne	.-4      	; 0x2464 <LCD_displayCharacter+0x64e>
    2468:	9e 8f       	std	Y+30, r25	; 0x1e
    246a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data,0));
    246c:	fe 01       	movw	r30, r28
    246e:	ed 59       	subi	r30, 0x9D	; 157
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	80 81       	ld	r24, Z
    2474:	98 2f       	mov	r25, r24
    2476:	91 70       	andi	r25, 0x01	; 1
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	63 e0       	ldi	r22, 0x03	; 3
    247c:	49 2f       	mov	r20, r25
    247e:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data,1));
    2482:	fe 01       	movw	r30, r28
    2484:	ed 59       	subi	r30, 0x9D	; 157
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	80 81       	ld	r24, Z
    248a:	86 95       	lsr	r24
    248c:	98 2f       	mov	r25, r24
    248e:	91 70       	andi	r25, 0x01	; 1
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	64 e0       	ldi	r22, 0x04	; 4
    2494:	49 2f       	mov	r20, r25
    2496:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data,2));
    249a:	fe 01       	movw	r30, r28
    249c:	ed 59       	subi	r30, 0x9D	; 157
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	80 81       	ld	r24, Z
    24a2:	86 95       	lsr	r24
    24a4:	86 95       	lsr	r24
    24a6:	98 2f       	mov	r25, r24
    24a8:	91 70       	andi	r25, 0x01	; 1
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	65 e0       	ldi	r22, 0x05	; 5
    24ae:	49 2f       	mov	r20, r25
    24b0:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data,3));
    24b4:	fe 01       	movw	r30, r28
    24b6:	ed 59       	subi	r30, 0x9D	; 157
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	80 81       	ld	r24, Z
    24bc:	86 95       	lsr	r24
    24be:	86 95       	lsr	r24
    24c0:	86 95       	lsr	r24
    24c2:	98 2f       	mov	r25, r24
    24c4:	91 70       	andi	r25, 0x01	; 1
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	66 e0       	ldi	r22, 0x06	; 6
    24ca:	49 2f       	mov	r20, r25
    24cc:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	a0 e8       	ldi	r26, 0x80	; 128
    24d6:	bf e3       	ldi	r27, 0x3F	; 63
    24d8:	89 8f       	std	Y+25, r24	; 0x19
    24da:	9a 8f       	std	Y+26, r25	; 0x1a
    24dc:	ab 8f       	std	Y+27, r26	; 0x1b
    24de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e0:	69 8d       	ldd	r22, Y+25	; 0x19
    24e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	4a e7       	ldi	r20, 0x7A	; 122
    24ee:	53 e4       	ldi	r21, 0x43	; 67
    24f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	8d 8b       	std	Y+21, r24	; 0x15
    24fa:	9e 8b       	std	Y+22, r25	; 0x16
    24fc:	af 8b       	std	Y+23, r26	; 0x17
    24fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2500:	6d 89       	ldd	r22, Y+21	; 0x15
    2502:	7e 89       	ldd	r23, Y+22	; 0x16
    2504:	8f 89       	ldd	r24, Y+23	; 0x17
    2506:	98 8d       	ldd	r25, Y+24	; 0x18
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e8       	ldi	r20, 0x80	; 128
    250e:	5f e3       	ldi	r21, 0x3F	; 63
    2510:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2514:	88 23       	and	r24, r24
    2516:	2c f4       	brge	.+10     	; 0x2522 <LCD_displayCharacter+0x70c>
		__ticks = 1;
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	9c 8b       	std	Y+20, r25	; 0x14
    251e:	8b 8b       	std	Y+19, r24	; 0x13
    2520:	3f c0       	rjmp	.+126    	; 0x25a0 <LCD_displayCharacter+0x78a>
	else if (__tmp > 65535)
    2522:	6d 89       	ldd	r22, Y+21	; 0x15
    2524:	7e 89       	ldd	r23, Y+22	; 0x16
    2526:	8f 89       	ldd	r24, Y+23	; 0x17
    2528:	98 8d       	ldd	r25, Y+24	; 0x18
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	3f ef       	ldi	r19, 0xFF	; 255
    252e:	4f e7       	ldi	r20, 0x7F	; 127
    2530:	57 e4       	ldi	r21, 0x47	; 71
    2532:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2536:	18 16       	cp	r1, r24
    2538:	4c f5       	brge	.+82     	; 0x258c <LCD_displayCharacter+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    253a:	69 8d       	ldd	r22, Y+25	; 0x19
    253c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    253e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2540:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e2       	ldi	r20, 0x20	; 32
    2548:	51 e4       	ldi	r21, 0x41	; 65
    254a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	bc 01       	movw	r22, r24
    2554:	cd 01       	movw	r24, r26
    2556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	9c 8b       	std	Y+20, r25	; 0x14
    2560:	8b 8b       	std	Y+19, r24	; 0x13
    2562:	0f c0       	rjmp	.+30     	; 0x2582 <LCD_displayCharacter+0x76c>
    2564:	89 e1       	ldi	r24, 0x19	; 25
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	9a 8b       	std	Y+18, r25	; 0x12
    256a:	89 8b       	std	Y+17, r24	; 0x11
    256c:	89 89       	ldd	r24, Y+17	; 0x11
    256e:	9a 89       	ldd	r25, Y+18	; 0x12
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	f1 f7       	brne	.-4      	; 0x2570 <LCD_displayCharacter+0x75a>
    2574:	9a 8b       	std	Y+18, r25	; 0x12
    2576:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2578:	8b 89       	ldd	r24, Y+19	; 0x13
    257a:	9c 89       	ldd	r25, Y+20	; 0x14
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	9c 8b       	std	Y+20, r25	; 0x14
    2580:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2582:	8b 89       	ldd	r24, Y+19	; 0x13
    2584:	9c 89       	ldd	r25, Y+20	; 0x14
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	69 f7       	brne	.-38     	; 0x2564 <LCD_displayCharacter+0x74e>
    258a:	14 c0       	rjmp	.+40     	; 0x25b4 <LCD_displayCharacter+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258c:	6d 89       	ldd	r22, Y+21	; 0x15
    258e:	7e 89       	ldd	r23, Y+22	; 0x16
    2590:	8f 89       	ldd	r24, Y+23	; 0x17
    2592:	98 8d       	ldd	r25, Y+24	; 0x18
    2594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	9c 8b       	std	Y+20, r25	; 0x14
    259e:	8b 8b       	std	Y+19, r24	; 0x13
    25a0:	8b 89       	ldd	r24, Y+19	; 0x13
    25a2:	9c 89       	ldd	r25, Y+20	; 0x14
    25a4:	98 8b       	std	Y+16, r25	; 0x10
    25a6:	8f 87       	std	Y+15, r24	; 0x0f
    25a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25aa:	98 89       	ldd	r25, Y+16	; 0x10
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <LCD_displayCharacter+0x796>
    25b0:	98 8b       	std	Y+16, r25	; 0x10
    25b2:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	62 e0       	ldi	r22, 0x02	; 2
    25b8:	40 e0       	ldi	r20, 0x00	; 0
    25ba:	0e 94 08 07 	call	0xe10	; 0xe10 <GPIO_writePin>
    25be:	80 e0       	ldi	r24, 0x00	; 0
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	a0 e8       	ldi	r26, 0x80	; 128
    25c4:	bf e3       	ldi	r27, 0x3F	; 63
    25c6:	8b 87       	std	Y+11, r24	; 0x0b
    25c8:	9c 87       	std	Y+12, r25	; 0x0c
    25ca:	ad 87       	std	Y+13, r26	; 0x0d
    25cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	4a e7       	ldi	r20, 0x7A	; 122
    25dc:	53 e4       	ldi	r21, 0x43	; 67
    25de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	8f 83       	std	Y+7, r24	; 0x07
    25e8:	98 87       	std	Y+8, r25	; 0x08
    25ea:	a9 87       	std	Y+9, r26	; 0x09
    25ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ee:	6f 81       	ldd	r22, Y+7	; 0x07
    25f0:	78 85       	ldd	r23, Y+8	; 0x08
    25f2:	89 85       	ldd	r24, Y+9	; 0x09
    25f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	40 e8       	ldi	r20, 0x80	; 128
    25fc:	5f e3       	ldi	r21, 0x3F	; 63
    25fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2602:	88 23       	and	r24, r24
    2604:	2c f4       	brge	.+10     	; 0x2610 <LCD_displayCharacter+0x7fa>
		__ticks = 1;
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	9e 83       	std	Y+6, r25	; 0x06
    260c:	8d 83       	std	Y+5, r24	; 0x05
    260e:	3f c0       	rjmp	.+126    	; 0x268e <LCD_displayCharacter+0x878>
	else if (__tmp > 65535)
    2610:	6f 81       	ldd	r22, Y+7	; 0x07
    2612:	78 85       	ldd	r23, Y+8	; 0x08
    2614:	89 85       	ldd	r24, Y+9	; 0x09
    2616:	9a 85       	ldd	r25, Y+10	; 0x0a
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	3f ef       	ldi	r19, 0xFF	; 255
    261c:	4f e7       	ldi	r20, 0x7F	; 127
    261e:	57 e4       	ldi	r21, 0x47	; 71
    2620:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2624:	18 16       	cp	r1, r24
    2626:	4c f5       	brge	.+82     	; 0x267a <LCD_displayCharacter+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2628:	6b 85       	ldd	r22, Y+11	; 0x0b
    262a:	7c 85       	ldd	r23, Y+12	; 0x0c
    262c:	8d 85       	ldd	r24, Y+13	; 0x0d
    262e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e2       	ldi	r20, 0x20	; 32
    2636:	51 e4       	ldi	r21, 0x41	; 65
    2638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	bc 01       	movw	r22, r24
    2642:	cd 01       	movw	r24, r26
    2644:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	9e 83       	std	Y+6, r25	; 0x06
    264e:	8d 83       	std	Y+5, r24	; 0x05
    2650:	0f c0       	rjmp	.+30     	; 0x2670 <LCD_displayCharacter+0x85a>
    2652:	89 e1       	ldi	r24, 0x19	; 25
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	9c 83       	std	Y+4, r25	; 0x04
    2658:	8b 83       	std	Y+3, r24	; 0x03
    265a:	8b 81       	ldd	r24, Y+3	; 0x03
    265c:	9c 81       	ldd	r25, Y+4	; 0x04
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	f1 f7       	brne	.-4      	; 0x265e <LCD_displayCharacter+0x848>
    2662:	9c 83       	std	Y+4, r25	; 0x04
    2664:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2666:	8d 81       	ldd	r24, Y+5	; 0x05
    2668:	9e 81       	ldd	r25, Y+6	; 0x06
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	9e 83       	std	Y+6, r25	; 0x06
    266e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2670:	8d 81       	ldd	r24, Y+5	; 0x05
    2672:	9e 81       	ldd	r25, Y+6	; 0x06
    2674:	00 97       	sbiw	r24, 0x00	; 0
    2676:	69 f7       	brne	.-38     	; 0x2652 <LCD_displayCharacter+0x83c>
    2678:	14 c0       	rjmp	.+40     	; 0x26a2 <LCD_displayCharacter+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    267a:	6f 81       	ldd	r22, Y+7	; 0x07
    267c:	78 85       	ldd	r23, Y+8	; 0x08
    267e:	89 85       	ldd	r24, Y+9	; 0x09
    2680:	9a 85       	ldd	r25, Y+10	; 0x0a
    2682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	9e 83       	std	Y+6, r25	; 0x06
    268c:	8d 83       	std	Y+5, r24	; 0x05
    268e:	8d 81       	ldd	r24, Y+5	; 0x05
    2690:	9e 81       	ldd	r25, Y+6	; 0x06
    2692:	9a 83       	std	Y+2, r25	; 0x02
    2694:	89 83       	std	Y+1, r24	; 0x01
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	9a 81       	ldd	r25, Y+2	; 0x02
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	f1 f7       	brne	.-4      	; 0x269a <LCD_displayCharacter+0x884>
    269e:	9a 83       	std	Y+2, r25	; 0x02
    26a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#endif
}
    26a2:	cd 59       	subi	r28, 0x9D	; 157
    26a4:	df 4f       	sbci	r29, 0xFF	; 255
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	f8 94       	cli
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	cd bf       	out	0x3d, r28	; 61
    26b0:	cf 91       	pop	r28
    26b2:	df 91       	pop	r29
    26b4:	1f 91       	pop	r17
    26b6:	0f 91       	pop	r16
    26b8:	08 95       	ret

000026ba <LCD_displayString>:

void LCD_displayString(char * string)
{
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <LCD_displayString+0x6>
    26c0:	0f 92       	push	r0
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
    26c6:	9b 83       	std	Y+3, r25	; 0x03
    26c8:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i = 0 ; string[i]!='\0' ; i++)
    26ca:	19 82       	std	Y+1, r1	; 0x01
    26cc:	0e c0       	rjmp	.+28     	; 0x26ea <LCD_displayString+0x30>
	{
		LCD_displayCharacter(string[i]);
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	28 2f       	mov	r18, r24
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	8a 81       	ldd	r24, Y+2	; 0x02
    26d6:	9b 81       	ldd	r25, Y+3	; 0x03
    26d8:	fc 01       	movw	r30, r24
    26da:	e2 0f       	add	r30, r18
    26dc:	f3 1f       	adc	r31, r19
    26de:	80 81       	ld	r24, Z
    26e0:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <LCD_displayCharacter>
#endif
}

void LCD_displayString(char * string)
{
	for(uint8 i = 0 ; string[i]!='\0' ; i++)
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
    26e6:	8f 5f       	subi	r24, 0xFF	; 255
    26e8:	89 83       	std	Y+1, r24	; 0x01
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	28 2f       	mov	r18, r24
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	8a 81       	ldd	r24, Y+2	; 0x02
    26f2:	9b 81       	ldd	r25, Y+3	; 0x03
    26f4:	fc 01       	movw	r30, r24
    26f6:	e2 0f       	add	r30, r18
    26f8:	f3 1f       	adc	r31, r19
    26fa:	80 81       	ld	r24, Z
    26fc:	88 23       	and	r24, r24
    26fe:	39 f7       	brne	.-50     	; 0x26ce <LCD_displayString+0x14>
	{
		LCD_displayCharacter(string[i]);
	}
}
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <LCD_clearScreen>:

void LCD_clearScreen()
{
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	0e 94 b9 0a 	call	0x1572	; 0x1572 <LCD_sendCommand>
}
    271a:	cf 91       	pop	r28
    271c:	df 91       	pop	r29
    271e:	08 95       	ret

00002720 <LCD_moveCursor>:

void LCD_moveCursor(uint8 row,uint8 column)
{
    2720:	df 93       	push	r29
    2722:	cf 93       	push	r28
    2724:	00 d0       	rcall	.+0      	; 0x2726 <LCD_moveCursor+0x6>
    2726:	00 d0       	rcall	.+0      	; 0x2728 <LCD_moveCursor+0x8>
    2728:	0f 92       	push	r0
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
    272e:	8a 83       	std	Y+2, r24	; 0x02
    2730:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_cursorAdress;
	switch(row)
    2732:	8a 81       	ldd	r24, Y+2	; 0x02
    2734:	28 2f       	mov	r18, r24
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	3d 83       	std	Y+5, r19	; 0x05
    273a:	2c 83       	std	Y+4, r18	; 0x04
    273c:	8c 81       	ldd	r24, Y+4	; 0x04
    273e:	9d 81       	ldd	r25, Y+5	; 0x05
    2740:	81 30       	cpi	r24, 0x01	; 1
    2742:	91 05       	cpc	r25, r1
    2744:	c1 f0       	breq	.+48     	; 0x2776 <LCD_moveCursor+0x56>
    2746:	2c 81       	ldd	r18, Y+4	; 0x04
    2748:	3d 81       	ldd	r19, Y+5	; 0x05
    274a:	22 30       	cpi	r18, 0x02	; 2
    274c:	31 05       	cpc	r19, r1
    274e:	2c f4       	brge	.+10     	; 0x275a <LCD_moveCursor+0x3a>
    2750:	8c 81       	ldd	r24, Y+4	; 0x04
    2752:	9d 81       	ldd	r25, Y+5	; 0x05
    2754:	00 97       	sbiw	r24, 0x00	; 0
    2756:	61 f0       	breq	.+24     	; 0x2770 <LCD_moveCursor+0x50>
    2758:	19 c0       	rjmp	.+50     	; 0x278c <LCD_moveCursor+0x6c>
    275a:	2c 81       	ldd	r18, Y+4	; 0x04
    275c:	3d 81       	ldd	r19, Y+5	; 0x05
    275e:	22 30       	cpi	r18, 0x02	; 2
    2760:	31 05       	cpc	r19, r1
    2762:	69 f0       	breq	.+26     	; 0x277e <LCD_moveCursor+0x5e>
    2764:	8c 81       	ldd	r24, Y+4	; 0x04
    2766:	9d 81       	ldd	r25, Y+5	; 0x05
    2768:	83 30       	cpi	r24, 0x03	; 3
    276a:	91 05       	cpc	r25, r1
    276c:	61 f0       	breq	.+24     	; 0x2786 <LCD_moveCursor+0x66>
    276e:	0e c0       	rjmp	.+28     	; 0x278c <LCD_moveCursor+0x6c>
	{
	case 0:
		LCD_cursorAdress = column;
    2770:	8b 81       	ldd	r24, Y+3	; 0x03
    2772:	89 83       	std	Y+1, r24	; 0x01
    2774:	0b c0       	rjmp	.+22     	; 0x278c <LCD_moveCursor+0x6c>
		break;
	case 1:
		LCD_cursorAdress = 0x40 + column;
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	80 5c       	subi	r24, 0xC0	; 192
    277a:	89 83       	std	Y+1, r24	; 0x01
    277c:	07 c0       	rjmp	.+14     	; 0x278c <LCD_moveCursor+0x6c>
		break;
	case 2:
		LCD_cursorAdress = 0x10 + column;
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	80 5f       	subi	r24, 0xF0	; 240
    2782:	89 83       	std	Y+1, r24	; 0x01
    2784:	03 c0       	rjmp	.+6      	; 0x278c <LCD_moveCursor+0x6c>
		break;
	case 3:
		LCD_cursorAdress = 0x50 + column;
    2786:	8b 81       	ldd	r24, Y+3	; 0x03
    2788:	80 5b       	subi	r24, 0xB0	; 176
    278a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_cursorAdress |= LCD_SET_CURSOR_LOCATION ;
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	80 68       	ori	r24, 0x80	; 128
    2790:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_cursorAdress);
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	0e 94 b9 0a 	call	0x1572	; 0x1572 <LCD_sendCommand>
}
    2798:	0f 90       	pop	r0
    279a:	0f 90       	pop	r0
    279c:	0f 90       	pop	r0
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	cf 91       	pop	r28
    27a4:	df 91       	pop	r29
    27a6:	08 95       	ret

000027a8 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row , uint8 column , char * string)
{
    27a8:	df 93       	push	r29
    27aa:	cf 93       	push	r28
    27ac:	00 d0       	rcall	.+0      	; 0x27ae <LCD_displayStringRowColumn+0x6>
    27ae:	00 d0       	rcall	.+0      	; 0x27b0 <LCD_displayStringRowColumn+0x8>
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
    27b4:	89 83       	std	Y+1, r24	; 0x01
    27b6:	6a 83       	std	Y+2, r22	; 0x02
    27b8:	5c 83       	std	Y+4, r21	; 0x04
    27ba:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,column);
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	6a 81       	ldd	r22, Y+2	; 0x02
    27c0:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_moveCursor>
	LCD_displayString(string);
    27c4:	8b 81       	ldd	r24, Y+3	; 0x03
    27c6:	9c 81       	ldd	r25, Y+4	; 0x04
    27c8:	0e 94 5d 13 	call	0x26ba	; 0x26ba <LCD_displayString>
}
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	0f 90       	pop	r0
    27d4:	cf 91       	pop	r28
    27d6:	df 91       	pop	r29
    27d8:	08 95       	ret

000027da <LCD_intgerToString>:

void LCD_intgerToString(int number)
{
    27da:	df 93       	push	r29
    27dc:	cf 93       	push	r28
    27de:	cd b7       	in	r28, 0x3d	; 61
    27e0:	de b7       	in	r29, 0x3e	; 62
    27e2:	62 97       	sbiw	r28, 0x12	; 18
    27e4:	0f b6       	in	r0, 0x3f	; 63
    27e6:	f8 94       	cli
    27e8:	de bf       	out	0x3e, r29	; 62
    27ea:	0f be       	out	0x3f, r0	; 63
    27ec:	cd bf       	out	0x3d, r28	; 61
    27ee:	9a 8b       	std	Y+18, r25	; 0x12
    27f0:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16];
	itoa(number,buffer,10);
    27f2:	89 89       	ldd	r24, Y+17	; 0x11
    27f4:	9a 89       	ldd	r25, Y+18	; 0x12
    27f6:	9e 01       	movw	r18, r28
    27f8:	2f 5f       	subi	r18, 0xFF	; 255
    27fa:	3f 4f       	sbci	r19, 0xFF	; 255
    27fc:	b9 01       	movw	r22, r18
    27fe:	4a e0       	ldi	r20, 0x0A	; 10
    2800:	50 e0       	ldi	r21, 0x00	; 0
    2802:	0e 94 ab 14 	call	0x2956	; 0x2956 <itoa>
	LCD_displayString(buffer);
    2806:	ce 01       	movw	r24, r28
    2808:	01 96       	adiw	r24, 0x01	; 1
    280a:	0e 94 5d 13 	call	0x26ba	; 0x26ba <LCD_displayString>
}
    280e:	62 96       	adiw	r28, 0x12	; 18
    2810:	0f b6       	in	r0, 0x3f	; 63
    2812:	f8 94       	cli
    2814:	de bf       	out	0x3e, r29	; 62
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	cd bf       	out	0x3d, r28	; 61
    281a:	cf 91       	pop	r28
    281c:	df 91       	pop	r29
    281e:	08 95       	ret

00002820 <TIMER1_ISR>:

unsigned char led = 1;
extern signed char time;

void TIMER1_ISR()
{
    2820:	df 93       	push	r29
    2822:	cf 93       	push	r28
    2824:	cd b7       	in	r28, 0x3d	; 61
    2826:	de b7       	in	r29, 0x3e	; 62
	time--;
    2828:	80 91 7a 00 	lds	r24, 0x007A
    282c:	81 50       	subi	r24, 0x01	; 1
    282e:	80 93 7a 00 	sts	0x007A, r24
}
    2832:	cf 91       	pop	r28
    2834:	df 91       	pop	r29
    2836:	08 95       	ret

00002838 <main>:

int main(void)
{
    2838:	df 93       	push	r29
    283a:	cf 93       	push	r28
    283c:	00 d0       	rcall	.+0      	; 0x283e <main+0x6>
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
	SevenSegment_INIT();
    2842:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <SevenSegment_INIT>
	LCD_init();
    2846:	0e 94 07 0a 	call	0x140e	; 0x140e <LCD_init>

	TIMER1_INIT();
    284a:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER1_INIT>
	TIMER1_SetCallBack(TIMER1_ISR);
    284e:	80 e1       	ldi	r24, 0x10	; 16
    2850:	94 e1       	ldi	r25, 0x14	; 20
    2852:	0e 94 0b 06 	call	0xc16	; 0xc16 <TIMER1_SetCallBack>

	Led_Init();
    2856:	0e 94 95 09 	call	0x132a	; 0x132a <Led_Init>

	sei();
    285a:	78 94       	sei

	LCD_displayStringRowColumn(1, 2, "Secs Remaining");
    285c:	20 e6       	ldi	r18, 0x60	; 96
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	62 e0       	ldi	r22, 0x02	; 2
    2864:	a9 01       	movw	r20, r18
    2866:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_displayStringRowColumn>

	while(1)
	{
		if(time >= 0)
    286a:	80 91 7a 00 	lds	r24, 0x007A
    286e:	88 23       	and	r24, r24
    2870:	2c f0       	brlt	.+10     	; 0x287c <main+0x44>
		{
			SevenSegment_writeNum(time);
    2872:	80 91 7a 00 	lds	r24, 0x007A
    2876:	0e 94 80 09 	call	0x1300	; 0x1300 <SevenSegment_writeNum>
    287a:	27 c0       	rjmp	.+78     	; 0x28ca <main+0x92>
		}
		else
		{
			switch(led)
    287c:	80 91 77 00 	lds	r24, 0x0077
    2880:	28 2f       	mov	r18, r24
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	3a 83       	std	Y+2, r19	; 0x02
    2886:	29 83       	std	Y+1, r18	; 0x01
    2888:	89 81       	ldd	r24, Y+1	; 0x01
    288a:	9a 81       	ldd	r25, Y+2	; 0x02
    288c:	81 30       	cpi	r24, 0x01	; 1
    288e:	91 05       	cpc	r25, r1
    2890:	61 f0       	breq	.+24     	; 0x28aa <main+0x72>
    2892:	29 81       	ldd	r18, Y+1	; 0x01
    2894:	3a 81       	ldd	r19, Y+2	; 0x02
    2896:	22 30       	cpi	r18, 0x02	; 2
    2898:	31 05       	cpc	r19, r1
    289a:	51 f0       	breq	.+20     	; 0x28b0 <main+0x78>
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	9a 81       	ldd	r25, Y+2	; 0x02
    28a0:	00 97       	sbiw	r24, 0x00	; 0
    28a2:	41 f4       	brne	.+16     	; 0x28b4 <main+0x7c>
			{
				case 0: Led_Green(); break;
    28a4:	0e 94 bc 09 	call	0x1378	; 0x1378 <Led_Green>
    28a8:	05 c0       	rjmp	.+10     	; 0x28b4 <main+0x7c>
				case 1:	Led_Yellow(); break;
    28aa:	0e 94 d5 09 	call	0x13aa	; 0x13aa <Led_Yellow>
    28ae:	02 c0       	rjmp	.+4      	; 0x28b4 <main+0x7c>
				case 2:	Led_Red(); break;
    28b0:	0e 94 ee 09 	call	0x13dc	; 0x13dc <Led_Red>
			}
			led++;
    28b4:	80 91 77 00 	lds	r24, 0x0077
    28b8:	8f 5f       	subi	r24, 0xFF	; 255
    28ba:	80 93 77 00 	sts	0x0077, r24
			if(led > 2)
    28be:	80 91 77 00 	lds	r24, 0x0077
    28c2:	83 30       	cpi	r24, 0x03	; 3
    28c4:	10 f0       	brcs	.+4      	; 0x28ca <main+0x92>
			{
				led = 0;
    28c6:	10 92 77 00 	sts	0x0077, r1
			}
		}
		LCD_moveCursor(0, 8);
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	68 e0       	ldi	r22, 0x08	; 8
    28ce:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_moveCursor>
		LCD_intgerToString(time);
    28d2:	80 91 7a 00 	lds	r24, 0x007A
    28d6:	99 27       	eor	r25, r25
    28d8:	87 fd       	sbrc	r24, 7
    28da:	90 95       	com	r25
    28dc:	0e 94 ed 13 	call	0x27da	; 0x27da <LCD_intgerToString>
		LCD_displayCharacter(' ');
    28e0:	80 e2       	ldi	r24, 0x20	; 32
    28e2:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <LCD_displayCharacter>
    28e6:	c1 cf       	rjmp	.-126    	; 0x286a <main+0x32>

000028e8 <__prologue_saves__>:
    28e8:	2f 92       	push	r2
    28ea:	3f 92       	push	r3
    28ec:	4f 92       	push	r4
    28ee:	5f 92       	push	r5
    28f0:	6f 92       	push	r6
    28f2:	7f 92       	push	r7
    28f4:	8f 92       	push	r8
    28f6:	9f 92       	push	r9
    28f8:	af 92       	push	r10
    28fa:	bf 92       	push	r11
    28fc:	cf 92       	push	r12
    28fe:	df 92       	push	r13
    2900:	ef 92       	push	r14
    2902:	ff 92       	push	r15
    2904:	0f 93       	push	r16
    2906:	1f 93       	push	r17
    2908:	cf 93       	push	r28
    290a:	df 93       	push	r29
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	ca 1b       	sub	r28, r26
    2912:	db 0b       	sbc	r29, r27
    2914:	0f b6       	in	r0, 0x3f	; 63
    2916:	f8 94       	cli
    2918:	de bf       	out	0x3e, r29	; 62
    291a:	0f be       	out	0x3f, r0	; 63
    291c:	cd bf       	out	0x3d, r28	; 61
    291e:	09 94       	ijmp

00002920 <__epilogue_restores__>:
    2920:	2a 88       	ldd	r2, Y+18	; 0x12
    2922:	39 88       	ldd	r3, Y+17	; 0x11
    2924:	48 88       	ldd	r4, Y+16	; 0x10
    2926:	5f 84       	ldd	r5, Y+15	; 0x0f
    2928:	6e 84       	ldd	r6, Y+14	; 0x0e
    292a:	7d 84       	ldd	r7, Y+13	; 0x0d
    292c:	8c 84       	ldd	r8, Y+12	; 0x0c
    292e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2930:	aa 84       	ldd	r10, Y+10	; 0x0a
    2932:	b9 84       	ldd	r11, Y+9	; 0x09
    2934:	c8 84       	ldd	r12, Y+8	; 0x08
    2936:	df 80       	ldd	r13, Y+7	; 0x07
    2938:	ee 80       	ldd	r14, Y+6	; 0x06
    293a:	fd 80       	ldd	r15, Y+5	; 0x05
    293c:	0c 81       	ldd	r16, Y+4	; 0x04
    293e:	1b 81       	ldd	r17, Y+3	; 0x03
    2940:	aa 81       	ldd	r26, Y+2	; 0x02
    2942:	b9 81       	ldd	r27, Y+1	; 0x01
    2944:	ce 0f       	add	r28, r30
    2946:	d1 1d       	adc	r29, r1
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	f8 94       	cli
    294c:	de bf       	out	0x3e, r29	; 62
    294e:	0f be       	out	0x3f, r0	; 63
    2950:	cd bf       	out	0x3d, r28	; 61
    2952:	ed 01       	movw	r28, r26
    2954:	08 95       	ret

00002956 <itoa>:
    2956:	fb 01       	movw	r30, r22
    2958:	9f 01       	movw	r18, r30
    295a:	e8 94       	clt
    295c:	42 30       	cpi	r20, 0x02	; 2
    295e:	c4 f0       	brlt	.+48     	; 0x2990 <itoa+0x3a>
    2960:	45 32       	cpi	r20, 0x25	; 37
    2962:	b4 f4       	brge	.+44     	; 0x2990 <itoa+0x3a>
    2964:	4a 30       	cpi	r20, 0x0A	; 10
    2966:	29 f4       	brne	.+10     	; 0x2972 <itoa+0x1c>
    2968:	97 fb       	bst	r25, 7
    296a:	1e f4       	brtc	.+6      	; 0x2972 <itoa+0x1c>
    296c:	90 95       	com	r25
    296e:	81 95       	neg	r24
    2970:	9f 4f       	sbci	r25, 0xFF	; 255
    2972:	64 2f       	mov	r22, r20
    2974:	77 27       	eor	r23, r23
    2976:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <__udivmodhi4>
    297a:	80 5d       	subi	r24, 0xD0	; 208
    297c:	8a 33       	cpi	r24, 0x3A	; 58
    297e:	0c f0       	brlt	.+2      	; 0x2982 <itoa+0x2c>
    2980:	89 5d       	subi	r24, 0xD9	; 217
    2982:	81 93       	st	Z+, r24
    2984:	cb 01       	movw	r24, r22
    2986:	00 97       	sbiw	r24, 0x00	; 0
    2988:	a1 f7       	brne	.-24     	; 0x2972 <itoa+0x1c>
    298a:	16 f4       	brtc	.+4      	; 0x2990 <itoa+0x3a>
    298c:	5d e2       	ldi	r21, 0x2D	; 45
    298e:	51 93       	st	Z+, r21
    2990:	10 82       	st	Z, r1
    2992:	c9 01       	movw	r24, r18
    2994:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <strrev>

00002998 <strrev>:
    2998:	dc 01       	movw	r26, r24
    299a:	fc 01       	movw	r30, r24
    299c:	67 2f       	mov	r22, r23
    299e:	71 91       	ld	r23, Z+
    29a0:	77 23       	and	r23, r23
    29a2:	e1 f7       	brne	.-8      	; 0x299c <strrev+0x4>
    29a4:	32 97       	sbiw	r30, 0x02	; 2
    29a6:	04 c0       	rjmp	.+8      	; 0x29b0 <strrev+0x18>
    29a8:	7c 91       	ld	r23, X
    29aa:	6d 93       	st	X+, r22
    29ac:	70 83       	st	Z, r23
    29ae:	62 91       	ld	r22, -Z
    29b0:	ae 17       	cp	r26, r30
    29b2:	bf 07       	cpc	r27, r31
    29b4:	c8 f3       	brcs	.-14     	; 0x29a8 <strrev+0x10>
    29b6:	08 95       	ret

000029b8 <__udivmodhi4>:
    29b8:	aa 1b       	sub	r26, r26
    29ba:	bb 1b       	sub	r27, r27
    29bc:	51 e1       	ldi	r21, 0x11	; 17
    29be:	07 c0       	rjmp	.+14     	; 0x29ce <__udivmodhi4_ep>

000029c0 <__udivmodhi4_loop>:
    29c0:	aa 1f       	adc	r26, r26
    29c2:	bb 1f       	adc	r27, r27
    29c4:	a6 17       	cp	r26, r22
    29c6:	b7 07       	cpc	r27, r23
    29c8:	10 f0       	brcs	.+4      	; 0x29ce <__udivmodhi4_ep>
    29ca:	a6 1b       	sub	r26, r22
    29cc:	b7 0b       	sbc	r27, r23

000029ce <__udivmodhi4_ep>:
    29ce:	88 1f       	adc	r24, r24
    29d0:	99 1f       	adc	r25, r25
    29d2:	5a 95       	dec	r21
    29d4:	a9 f7       	brne	.-22     	; 0x29c0 <__udivmodhi4_loop>
    29d6:	80 95       	com	r24
    29d8:	90 95       	com	r25
    29da:	bc 01       	movw	r22, r24
    29dc:	cd 01       	movw	r24, r26
    29de:	08 95       	ret

000029e0 <_exit>:
    29e0:	f8 94       	cli

000029e2 <__stop_program>:
    29e2:	ff cf       	rjmp	.-2      	; 0x29e2 <__stop_program>
